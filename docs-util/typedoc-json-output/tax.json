{
	"id": 0,
	"name": "tax",
	"variant": "project",
	"kind": 1,
	"flags": {},
	"children": [
		{
			"id": 1,
			"name": "ShippingTaxCalculationLine",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "A shipping method and the tax rates configured to apply to the\nshipping method."
					}
				]
			},
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 2,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"children": [
						{
							"id": 3,
							"name": "shipping_method",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The shipping method to calculate taxes for."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa/src/models/shipping-method.ts",
									"qualifiedName": "ShippingMethod"
								},
								"name": "ShippingMethod",
								"package": "@medusajs/medusa"
							}
						},
						{
							"id": 4,
							"name": "rates",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The rates applicable on the shipping method."
									}
								]
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": {
										"sourceFileName": "../../../packages/medusa/src/types/tax-service.ts",
										"qualifiedName": "TaxServiceRate"
									},
									"name": "TaxServiceRate",
									"package": "@medusajs/medusa"
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								3,
								4
							]
						}
					]
				}
			}
		},
		{
			"id": 5,
			"name": "ItemTaxCalculationLine",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "A line item and the tax rates configured to apply to the\nproduct contained in the line item."
					}
				]
			},
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 6,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"children": [
						{
							"id": 7,
							"name": "item",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The line item to calculate taxes for."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa/src/models/line-item.ts",
									"qualifiedName": "LineItem"
								},
								"name": "LineItem",
								"package": "@medusajs/medusa"
							}
						},
						{
							"id": 8,
							"name": "rates",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The rates applicable on the item."
									}
								]
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": {
										"sourceFileName": "../../../packages/medusa/src/types/tax-service.ts",
										"qualifiedName": "TaxServiceRate"
									},
									"name": "TaxServiceRate",
									"package": "@medusajs/medusa"
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								7,
								8
							]
						}
					]
				}
			}
		},
		{
			"id": 9,
			"name": "TaxCalculationContext",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Information relevant to a tax calculation, such as the shipping address where\nthe items are going."
					}
				]
			},
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 10,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"children": [
						{
							"id": 11,
							"name": "shipping_address",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The shipping address used in the cart."
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/src/models/address.ts",
											"qualifiedName": "Address"
										},
										"name": "Address",
										"package": "@medusajs/medusa"
									},
									{
										"type": "literal",
										"value": null
									}
								]
							}
						},
						{
							"id": 12,
							"name": "customer",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The customer that the cart belongs to."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa/src/models/customer.ts",
									"qualifiedName": "Customer"
								},
								"name": "Customer",
								"package": "@medusajs/medusa"
							}
						},
						{
							"id": 13,
							"name": "region",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The cart's region."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa/src/models/region.ts",
									"qualifiedName": "Region"
								},
								"name": "Region",
								"package": "@medusajs/medusa"
							}
						},
						{
							"id": 14,
							"name": "is_return",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Whether the cart is used in a return flow."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 15,
							"name": "shipping_methods",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The shipping methods used in the cart."
									}
								]
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": {
										"sourceFileName": "../../../packages/medusa/src/models/shipping-method.ts",
										"qualifiedName": "ShippingMethod"
									},
									"name": "ShippingMethod",
									"package": "@medusajs/medusa"
								}
							}
						},
						{
							"id": 16,
							"name": "allocation_map",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The gift cards and discounts applied on line items.\nEach object key or property is an ID of a line item"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa/src/types/totals.ts",
									"qualifiedName": "LineAllocationsMap"
								},
								"name": "LineAllocationsMap",
								"package": "@medusajs/medusa"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								11,
								12,
								13,
								14,
								15,
								16
							]
						}
					]
				}
			}
		},
		{
			"id": 17,
			"name": "ITaxService",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "## Overview\n\nA tax provider is used to retrieve the tax lines in a cart. The Medusa backend provides a default "
					},
					{
						"kind": "code",
						"text": "`system`"
					},
					{
						"kind": "text",
						"text": " provider. You can create your own tax provider,\neither in a plugin or directly in your Medusa backend, then use it in any region.\n\nA tax provider class is defined in a TypeScript or JavaScript file under the "
					},
					{
						"kind": "code",
						"text": "`src/services`"
					},
					{
						"kind": "text",
						"text": " directory and the class must extend the\n"
					},
					{
						"kind": "code",
						"text": "`AbstractTaxService`"
					},
					{
						"kind": "text",
						"text": " class imported from "
					},
					{
						"kind": "code",
						"text": "`@medusajs/medusa`"
					},
					{
						"kind": "text",
						"text": ". The file's name is the tax provider's class name as a slug and without the word "
					},
					{
						"kind": "code",
						"text": "`Service`"
					},
					{
						"kind": "text",
						"text": ".\n\nFor example, you can create the file "
					},
					{
						"kind": "code",
						"text": "`src/services/my-tax.ts`"
					},
					{
						"kind": "text",
						"text": " with the following content:\n\n"
					},
					{
						"kind": "code",
						"text": "```ts title=\"src/services/my-tax.ts\"\nimport {\n  AbstractTaxService,\n  ItemTaxCalculationLine,\n  ShippingTaxCalculationLine,\n  TaxCalculationContext,\n} from \"@medusajs/medusa\"\nimport {\n  ProviderTaxLine,\n} from \"@medusajs/medusa/dist/types/tax-service\"\n\nclass MyTaxService extends AbstractTaxService {\n  async getTaxLines(\n    itemLines: ItemTaxCalculationLine[],\n    shippingLines: ShippingTaxCalculationLine[],\n    context: TaxCalculationContext):\n    Promise<ProviderTaxLine[]> {\n    throw new Error(\"Method not implemented.\")\n  }\n}\n\nexport default MyTaxService\n```"
					},
					{
						"kind": "text",
						"text": "\n\n---\n\n## Identifier Property\n\nThe "
					},
					{
						"kind": "code",
						"text": "`TaxProvider`"
					},
					{
						"kind": "text",
						"text": " entity has 2 properties: "
					},
					{
						"kind": "code",
						"text": "`identifier`"
					},
					{
						"kind": "text",
						"text": " and "
					},
					{
						"kind": "code",
						"text": "`is_installed`"
					},
					{
						"kind": "text",
						"text": ". The "
					},
					{
						"kind": "code",
						"text": "`identifier`"
					},
					{
						"kind": "text",
						"text": " property in the tax provider service is used when the tax provider is added to the database.\n\nThe value of this property is also used to reference the tax provider throughout Medusa. For example, it is used to [change the tax provider](https://docs.medusajs.com/modules/taxes/admin/manage-tax-settings#change-tax-provider-of-a-region) to a region.\n\n"
					},
					{
						"kind": "code",
						"text": "```ts title=\"src/services/my-tax.ts\"\nclass MyTaxService extends AbstractTaxService {\n  static identifier = \"my-tax\"\n  // ...\n}\n```"
					},
					{
						"kind": "text",
						"text": "\n\n---"
					}
				]
			},
			"children": [
				{
					"id": 18,
					"name": "getTaxLines",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 19,
							"name": "getTaxLines",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used when retrieving the tax lines for line items and shipping methods.\nThis occurs during checkout or when calculating totals for orders, swaps, or returns."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The list of calculated line item and shipping method tax lines.\nIf an item in the array has the "
											},
											{
												"kind": "code",
												"text": "`shipping_method_id`"
											},
											{
												"kind": "text",
												"text": " property, then it's a shipping method tax line. Otherwise, if it has\nthe "
											},
											{
												"kind": "code",
												"text": "`item_id`"
											},
											{
												"kind": "text",
												"text": " property, then it's a line item tax line."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "An example of how this method is implemented in the "
											},
											{
												"kind": "code",
												"text": "`system`"
											},
											{
												"kind": "text",
												"text": " provider implemented in the Medusa backend:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\n// ...\n\nclass SystemTaxService extends AbstractTaxService {\n  // ...\n\n  async getTaxLines(\n    itemLines: ItemTaxCalculationLine[],\n    shippingLines: ShippingTaxCalculationLine[],\n    context: TaxCalculationContext\n  ): Promise<ProviderTaxLine[]> {\n    let taxLines: ProviderTaxLine[] = itemLines.flatMap((l) => {\n      return l.rates.map((r) => ({\n        rate: r.rate || 0,\n        name: r.name,\n        code: r.code,\n        item_id: l.item.id,\n      }))\n    })\n\n    taxLines = taxLines.concat(\n      shippingLines.flatMap((l) => {\n        return l.rates.map((r) => ({\n          rate: r.rate || 0,\n          name: r.name,\n          code: r.code,\n          shipping_method_id: l.shipping_method.id,\n        }))\n      })\n    )\n\n    return taxLines\n  }\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 20,
									"name": "itemLines",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The line item lines to calculate taxes for."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 5,
											"name": "ItemTaxCalculationLine",
											"package": "@medusajs/medusa"
										}
									}
								},
								{
									"id": 21,
									"name": "shippingLines",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipping method lines to calculate taxes for."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 1,
											"name": "ShippingTaxCalculationLine",
											"package": "@medusajs/medusa"
										}
									}
								},
								{
									"id": 22,
									"name": "context",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Context relevant and useful for the taxes calculation."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 9,
										"name": "TaxCalculationContext",
										"package": "@medusajs/medusa"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": {
												"sourceFileName": "../../../packages/medusa/src/types/tax-service.ts",
												"qualifiedName": "ProviderTaxLine"
											},
											"name": "ProviderTaxLine",
											"package": "@medusajs/medusa"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"children": [
						18
					]
				}
			],
			"implementedBy": [
				{
					"type": "reference",
					"target": 23,
					"name": "AbstractTaxService"
				}
			]
		},
		{
			"id": 23,
			"name": "AbstractTaxService",
			"variant": "declaration",
			"kind": 128,
			"flags": {
				"isAbstract": true
			},
			"children": [
				{
					"id": 25,
					"name": "identifier",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true,
						"isStatic": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 29,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {
						"isProtected": true
					},
					"signatures": [
						{
							"id": 30,
							"name": "new AbstractTaxService",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "You can use the "
									},
									{
										"kind": "code",
										"text": "`constructor`"
									},
									{
										"kind": "text",
										"text": " of your tax provider to access the different services in Medusa through dependency injection.\n\nYou can also use the constructor to initialize your integration with the third-party provider. For example, if you use a client to connect to the third-party provider’s APIs, you can initialize it in the constructor and use it in other methods in the service.\nAdditionally, if you’re creating your tax provider as an external plugin to be installed on any Medusa backend and you want to access the options added for the plugin, you can access it in the constructor."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\n// ...\nimport { LineItemService } from \"@medusajs/medusa\"\n\ntype InjectedDependencies = {\n  lineItemService: LineItemService\n}\n\nclass MyTaxService extends AbstractTaxService {\n  protected readonly lineItemService_: LineItemService\n\n  constructor({ lineItemService }: InjectedDependencies) {\n    super(arguments[0])\n    this.lineItemService_ = lineItemService\n\n    // you can also initialize a client that\n    // communicates with a third-party service.\n    this.client = new Client(options)\n  }\n\n  // ...\n}\n\nexport default MyTaxService\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 31,
									"name": "container",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "An instance of "
											},
											{
												"kind": "code",
												"text": "`MedusaContainer`"
											},
											{
												"kind": "text",
												"text": " that allows you to access other resources, such as services, in your Medusa backend."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/types/src/common/medusa-container.ts",
											"qualifiedName": "MedusaContainer"
										},
										"name": "MedusaContainer",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 32,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "If this tax provider is created in a plugin, the plugin's options are passed in this parameter."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 23,
								"name": "AbstractTaxService",
								"package": "@medusajs/medusa"
							},
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "TransactionBaseService.constructor"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": -1,
						"name": "TransactionBaseService.constructor"
					}
				},
				{
					"id": 33,
					"name": "container",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true,
						"isReadonly": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "code",
								"text": "`MedusaContainer`"
							},
							{
								"kind": "text",
								"text": " that allows you to access other resources, such as services, in your Medusa backend."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../../packages/types/src/common/medusa-container.ts",
							"qualifiedName": "MedusaContainer"
						},
						"name": "MedusaContainer",
						"package": "@medusajs/types"
					}
				},
				{
					"id": 34,
					"name": "config",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true,
						"isOptional": true,
						"isReadonly": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "If this tax provider is created in a plugin, the plugin's options are passed in this parameter."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Record"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "Record",
						"package": "typescript"
					}
				},
				{
					"id": 37,
					"name": "getTaxLines",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isPublic": true,
						"isAbstract": true
					},
					"signatures": [
						{
							"id": 38,
							"name": "getTaxLines",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used when retrieving the tax lines for line items and shipping methods.\nThis occurs during checkout or when calculating totals for orders, swaps, or returns."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The list of calculated line item and shipping method tax lines.\nIf an item in the array has the "
											},
											{
												"kind": "code",
												"text": "`shipping_method_id`"
											},
											{
												"kind": "text",
												"text": " property, then it's a shipping method tax line. Otherwise, if it has\nthe "
											},
											{
												"kind": "code",
												"text": "`item_id`"
											},
											{
												"kind": "text",
												"text": " property, then it's a line item tax line."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "An example of how this method is implemented in the "
											},
											{
												"kind": "code",
												"text": "`system`"
											},
											{
												"kind": "text",
												"text": " provider implemented in the Medusa backend:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\n// ...\n\nclass SystemTaxService extends AbstractTaxService {\n  // ...\n\n  async getTaxLines(\n    itemLines: ItemTaxCalculationLine[],\n    shippingLines: ShippingTaxCalculationLine[],\n    context: TaxCalculationContext\n  ): Promise<ProviderTaxLine[]> {\n    let taxLines: ProviderTaxLine[] = itemLines.flatMap((l) => {\n      return l.rates.map((r) => ({\n        rate: r.rate || 0,\n        name: r.name,\n        code: r.code,\n        item_id: l.item.id,\n      }))\n    })\n\n    taxLines = taxLines.concat(\n      shippingLines.flatMap((l) => {\n        return l.rates.map((r) => ({\n          rate: r.rate || 0,\n          name: r.name,\n          code: r.code,\n          shipping_method_id: l.shipping_method.id,\n        }))\n      })\n    )\n\n    return taxLines\n  }\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 39,
									"name": "itemLines",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The line item lines to calculate taxes for."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 5,
											"name": "ItemTaxCalculationLine",
											"package": "@medusajs/medusa"
										}
									}
								},
								{
									"id": 40,
									"name": "shippingLines",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipping method lines to calculate taxes for."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 1,
											"name": "ShippingTaxCalculationLine",
											"package": "@medusajs/medusa"
										}
									}
								},
								{
									"id": 41,
									"name": "context",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Context relevant and useful for the taxes calculation."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 9,
										"name": "TaxCalculationContext",
										"package": "@medusajs/medusa"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": {
												"sourceFileName": "../../../packages/medusa/src/types/tax-service.ts",
												"qualifiedName": "ProviderTaxLine"
											},
											"name": "ProviderTaxLine",
											"package": "@medusajs/medusa"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": 19,
								"name": "ITaxService.getTaxLines"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": 18,
						"name": "ITaxService.getTaxLines"
					}
				},
				{
					"id": 42,
					"name": "manager_",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../../node_modules/typeorm/entity-manager/EntityManager.d.ts",
							"qualifiedName": "EntityManager"
						},
						"name": "EntityManager",
						"package": "typeorm"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionBaseService.manager_"
					}
				},
				{
					"id": 43,
					"name": "transactionManager_",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../../node_modules/typeorm/entity-manager/EntityManager.d.ts",
									"qualifiedName": "EntityManager"
								},
								"name": "EntityManager",
								"package": "typeorm"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionBaseService.transactionManager_"
					}
				},
				{
					"id": 46,
					"name": "__container__",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true,
						"isReadonly": true
					},
					"type": {
						"type": "intrinsic",
						"name": "any"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionBaseService.__container__"
					}
				},
				{
					"id": 47,
					"name": "__configModule__",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true,
						"isOptional": true,
						"isReadonly": true
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Record"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "Record",
						"package": "typescript"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionBaseService.__configModule__"
					}
				},
				{
					"id": 48,
					"name": "__moduleDeclaration__",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true,
						"isOptional": true,
						"isReadonly": true
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Record"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "Record",
						"package": "typescript"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionBaseService.__moduleDeclaration__"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						29
					]
				},
				{
					"title": "Properties",
					"children": [
						25,
						33,
						34,
						42,
						43,
						46,
						47,
						48
					]
				},
				{
					"title": "Methods",
					"children": [
						37
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
						"qualifiedName": "TransactionBaseService"
					},
					"name": "TransactionBaseService",
					"package": "@medusajs/medusa"
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"target": 17,
					"name": "ITaxService",
					"package": "@medusajs/medusa"
				}
			]
		}
	],
	"groups": [
		{
			"title": "Classes",
			"children": [
				23
			]
		},
		{
			"title": "Interfaces",
			"children": [
				17
			]
		},
		{
			"title": "Type Aliases",
			"children": [
				1,
				5,
				9
			]
		}
	],
	"packageName": "@medusajs/medusa",
	"symbolIdMap": {
		"0": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/tax-service.ts",
			"qualifiedName": ""
		},
		"1": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/tax-service.ts",
			"qualifiedName": "ShippingTaxCalculationLine"
		},
		"2": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/tax-service.ts",
			"qualifiedName": "__type"
		},
		"3": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/tax-service.ts",
			"qualifiedName": "__type.shipping_method"
		},
		"4": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/tax-service.ts",
			"qualifiedName": "__type.rates"
		},
		"5": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/tax-service.ts",
			"qualifiedName": "ItemTaxCalculationLine"
		},
		"6": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/tax-service.ts",
			"qualifiedName": "__type"
		},
		"7": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/tax-service.ts",
			"qualifiedName": "__type.item"
		},
		"8": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/tax-service.ts",
			"qualifiedName": "__type.rates"
		},
		"9": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/tax-service.ts",
			"qualifiedName": "TaxCalculationContext"
		},
		"10": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/tax-service.ts",
			"qualifiedName": "__type"
		},
		"11": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/tax-service.ts",
			"qualifiedName": "__type.shipping_address"
		},
		"12": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/tax-service.ts",
			"qualifiedName": "__type.customer"
		},
		"13": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/tax-service.ts",
			"qualifiedName": "__type.region"
		},
		"14": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/tax-service.ts",
			"qualifiedName": "__type.is_return"
		},
		"15": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/tax-service.ts",
			"qualifiedName": "__type.shipping_methods"
		},
		"16": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/tax-service.ts",
			"qualifiedName": "__type.allocation_map"
		},
		"17": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/tax-service.ts",
			"qualifiedName": "ITaxService"
		},
		"18": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/tax-service.ts",
			"qualifiedName": "ITaxService.getTaxLines"
		},
		"19": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/tax-service.ts",
			"qualifiedName": "ITaxService.getTaxLines"
		},
		"20": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/tax-service.ts",
			"qualifiedName": "itemLines"
		},
		"21": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/tax-service.ts",
			"qualifiedName": "shippingLines"
		},
		"22": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/tax-service.ts",
			"qualifiedName": "context"
		},
		"23": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/tax-service.ts",
			"qualifiedName": "AbstractTaxService"
		},
		"25": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/tax-service.ts",
			"qualifiedName": "AbstractTaxService.identifier"
		},
		"29": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/tax-service.ts",
			"qualifiedName": "AbstractTaxService.__constructor"
		},
		"30": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/tax-service.ts",
			"qualifiedName": "AbstractTaxService"
		},
		"31": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/tax-service.ts",
			"qualifiedName": "container"
		},
		"32": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/tax-service.ts",
			"qualifiedName": "config"
		},
		"33": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/tax-service.ts",
			"qualifiedName": "AbstractTaxService.container"
		},
		"34": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/tax-service.ts",
			"qualifiedName": "AbstractTaxService.config"
		},
		"37": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/tax-service.ts",
			"qualifiedName": "AbstractTaxService.getTaxLines"
		},
		"38": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/tax-service.ts",
			"qualifiedName": "AbstractTaxService.getTaxLines"
		},
		"39": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/tax-service.ts",
			"qualifiedName": "itemLines"
		},
		"40": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/tax-service.ts",
			"qualifiedName": "shippingLines"
		},
		"41": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/tax-service.ts",
			"qualifiedName": "context"
		},
		"42": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.manager_"
		},
		"43": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.transactionManager_"
		},
		"44": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.activeManager_"
		},
		"45": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.activeManager_"
		},
		"46": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.__container__"
		},
		"47": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.__configModule__"
		},
		"48": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.__moduleDeclaration__"
		},
		"49": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.withTransaction"
		},
		"50": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.withTransaction"
		},
		"51": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "transactionManager"
		},
		"52": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.shouldRetryTransaction_"
		},
		"53": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.shouldRetryTransaction_"
		},
		"54": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "err"
		},
		"55": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type"
		},
		"56": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type.code"
		},
		"57": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.atomicPhase_"
		},
		"58": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.atomicPhase_"
		},
		"59": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TResult"
		},
		"60": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TError"
		},
		"61": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "work"
		},
		"62": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type"
		},
		"63": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type"
		},
		"64": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "transactionManager"
		},
		"65": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "isolationOrErrorHandler"
		},
		"66": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type"
		},
		"67": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type"
		},
		"68": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "error"
		},
		"69": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "maybeErrorHandlerOrDontFail"
		},
		"70": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type"
		},
		"71": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type"
		},
		"72": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "error"
		}
	}
}