{
	"id": 0,
	"name": "js-client",
	"variant": "project",
	"kind": 1,
	"flags": {},
	"children": [
		{
			"id": 1,
			"name": "AddressesResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to Address API Routes part of the [Store Customer API Routes](https://docs.medusajs.com/api/store#customers_postcustomers). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.customers.addresses`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "customer authentication",
						"target": 22
					},
					{
						"kind": "text",
						"text": "."
					}
				]
			},
			"children": [
				{
					"id": 5,
					"name": "addAddress",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 6,
							"name": "addAddress",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add an address to the logged-in customer's saved addresses."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer's details, including the customer's addresses in the "
											},
											{
												"kind": "code",
												"text": "`shipping_addresses`"
											},
											{
												"kind": "text",
												"text": " attribute."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged\nmedusa.customers.addresses.addAddress({\n  address: {\n    first_name: \"Celia\",\n    last_name: \"Schumm\",\n    address_1: \"225 Bednar Curve\",\n    city: \"Danielville\",\n    country_code: \"US\",\n    postal_code: \"85137\",\n    phone: \"981-596-6748 x90188\",\n    company: \"Wyman LLC\",\n    province: \"Georgia\",\n  }\n})\n.then(({ customer }) => {\n  console.log(customer.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 7,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The address to add."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/create-address.d.ts",
											"qualifiedName": "StorePostCustomersCustomerAddressesReq"
										},
										"name": "StorePostCustomersCustomerAddressesReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 8,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/index.d.ts",
											"qualifiedName": "StoreCustomersRes"
										},
										"name": "StoreCustomersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 9,
					"name": "deleteAddress",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 10,
							"name": "deleteAddress",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete an address of the logged-in customer."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer's details, including the customer's addresses in the "
											},
											{
												"kind": "code",
												"text": "`shipping_addresses`"
											},
											{
												"kind": "text",
												"text": " attribute."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged\nmedusa.customers.addresses.deleteAddress(addressId)\n.then(({ customer }) => {\n  console.log(customer.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11,
									"name": "address_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the address to delete."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/index.d.ts",
											"qualifiedName": "StoreCustomersRes"
										},
										"name": "StoreCustomersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13,
					"name": "updateAddress",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14,
							"name": "updateAddress",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update an address of the logged-in customer."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer's details, including the customer's addresses in the "
											},
											{
												"kind": "code",
												"text": "`shipping_addresses`"
											},
											{
												"kind": "text",
												"text": " attribute."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged\nmedusa.customers.addresses.updateAddress(addressId, {\n  first_name: \"Gina\"\n})\n.then(({ customer }) => {\n  console.log(customer.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15,
									"name": "address_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The address's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 16,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the address."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/update-address.d.ts",
											"qualifiedName": "StorePostCustomersCustomerAddressesAddressReq"
										},
										"name": "StorePostCustomersCustomerAddressesAddressReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 17,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/index.d.ts",
											"qualifiedName": "StoreCustomersRes"
										},
										"name": "StoreCustomersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 2,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 3,
							"name": "new AddressesResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 4,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1,
								"name": "AddressesResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						2
					]
				},
				{
					"title": "Methods",
					"children": [
						5,
						9,
						13
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 428,
			"name": "AdminAuthResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Auth API Routes](https://docs.medusajs.com/api/admin#auth_getauth). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.auth`"
					},
					{
						"kind": "text",
						"text": " property.\n\nThe methods in this class allow admin users to manage their session, such as login or log out.\nYou can send authenticated requests for an admin user either using the Cookie header, their API token, or the JWT Token.\nWhen you log the admin user in using the "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "createSession",
						"target": 438,
						"tsLinkText": ""
					},
					{
						"kind": "text",
						"text": " method, the JS client will automatically attach the\ncookie header in all subsequent requests.\n\nRelated Guide: [How to implement user profiles](https://docs.medusajs.com/modules/users/admin/manage-profile)."
					}
				]
			},
			"children": [
				{
					"id": 432,
					"name": "getSession",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 433,
							"name": "getSession",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Get the currently logged in user's details. Can also be used to check if there is an authenticated user."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the logged-in user's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.auth.getSession()\n.then(({ user }) => {\n  console.log(user.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 434,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/auth/index.d.ts",
											"qualifiedName": "AdminAuthRes"
										},
										"name": "AdminAuthRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 435,
					"name": "deleteSession",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 436,
							"name": "deleteSession",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Log out the user and remove their authentication session. This will only work if you're using Cookie session for authentication. If the API token is still passed in the header,\nthe user is still authorized to perform admin functionalities in other API Routes."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves when user is logged out successfully."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in\nmedusa.admin.auth.deleteSession()\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 437,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 438,
					"name": "createSession",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 439,
							"name": "createSession",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Log a User in using their credentials. If the user is authenticated successfully, the cookie is automatically attached to subsequent requests sent with the JS Client."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the user's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.admin.AdminAuthResource.createSession({\n  email: \"user@example.com\",\n  password: \"supersecret\"\n})\n.then(({ user }) => {\n  console.log(user.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 440,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The credentials of the user."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/auth/create-session.d.ts",
											"qualifiedName": "AdminPostAuthReq"
										},
										"name": "AdminPostAuthReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 441,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/auth/index.d.ts",
											"qualifiedName": "AdminAuthRes"
										},
										"name": "AdminAuthRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 442,
					"name": "getToken",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 443,
							"name": "getToken",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Authenticate the user and retrieve a JWT token to use for subsequent authenticated requests."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the access token of the user, if they're authenticated successfully."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.admin.auth.getToken({\n  email: 'user@example.com',\n  password: 'supersecret'\n})\n.then(({ access_token }) => {\n  console.log(access_token);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 444,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The credentials of the user."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/auth/create-session.d.ts",
											"qualifiedName": "AdminPostAuthReq"
										},
										"name": "AdminPostAuthReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 445,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/auth/index.d.ts",
											"qualifiedName": "AdminBearerAuthRes"
										},
										"name": "AdminBearerAuthRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 429,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 430,
							"name": "new AdminAuthResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 431,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 428,
								"name": "AdminAuthResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						429
					]
				},
				{
					"title": "Methods",
					"children": [
						432,
						435,
						438,
						442
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 446,
			"name": "AdminBatchJobsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Batch Job API Routes](https://docs.medusajs.com/api/admin#batch-jobs). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.batchJobs`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 438
					},
					{
						"kind": "text",
						"text": ".\n\nA batch job is a task that is performed by the Medusa backend asynchronusly. For example, the Import Product feature is implemented using batch jobs.\nThe methods in this class allow admins to manage the batch jobs and their state.\n\nRelated Guide: [How to import products](https://docs.medusajs.com/modules/products/admin/import-products)."
					}
				]
			},
			"children": [
				{
					"id": 450,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 451,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a Batch Job to be executed asynchronously in the Medusa backend. If "
									},
									{
										"kind": "code",
										"text": "`dry_run`"
									},
									{
										"kind": "text",
										"text": " is set to "
									},
									{
										"kind": "code",
										"text": "`true`"
									},
									{
										"kind": "text",
										"text": ", the batch job will not be executed until the it is confirmed,\nwhich can be done using the "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "confirm",
										"target": 462,
										"tsLinkText": ""
									},
									{
										"kind": "text",
										"text": " method."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the batch job's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.batchJobs.create({\n  type: 'product-export',\n  context: {},\n  dry_run: false\n}).then((({ batch_job }) => {\n  console.log(batch_job.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 452,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The data of the batch job to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/batch/create-batch-job.d.ts",
											"qualifiedName": "AdminPostBatchesReq"
										},
										"name": "AdminPostBatchesReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 453,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/batch/index.d.ts",
											"qualifiedName": "AdminBatchJobRes"
										},
										"name": "AdminBatchJobRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 454,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 455,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of Batch Jobs. The batch jobs can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`type`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`confirmed_at`"
									},
									{
										"kind": "text",
										"text": ". The batch jobs can also be sorted or paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The list of batch jobs with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list batch jobs:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.batchJobs.list()\n.then(({ batch_jobs, limit, offset, count }) => {\n  console.log(batch_jobs.length)\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the batch jobs:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.batchJobs.list({\n  expand: \"created_by_user\"\n})\n.then(({ batch_jobs, limit, offset, count }) => {\n  console.log(batch_jobs.length)\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`10`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.batchJobs.list({\n  expand: \"created_by_user\",\n  limit,\n  offset\n})\n.then(({ batch_jobs, limit, offset, count }) => {\n  console.log(batch_jobs.length)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 456,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved batch jobs."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/batch/list-batch-jobs.d.ts",
											"qualifiedName": "AdminGetBatchParams"
										},
										"name": "AdminGetBatchParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 457,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/batch/index.d.ts",
											"qualifiedName": "AdminBatchJobListRes"
										},
										"name": "AdminBatchJobListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 458,
					"name": "cancel",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 459,
							"name": "cancel",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Mark a batch job as canceled. When a batch job is canceled, the processing of the batch job doesn’t automatically stop."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the batch job's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.batchJobs.cancel(batchJobId)\n.then(({ batch_job }) => {\n  console.log(batch_job.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 460,
									"name": "batchJobId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the batch job."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 461,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/batch/index.d.ts",
											"qualifiedName": "AdminBatchJobRes"
										},
										"name": "AdminBatchJobRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 462,
					"name": "confirm",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 463,
							"name": "confirm",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "When a batch job is created, it's not executed automatically if "
									},
									{
										"kind": "code",
										"text": "`dry_run`"
									},
									{
										"kind": "text",
										"text": " is set to "
									},
									{
										"kind": "code",
										"text": "`true`"
									},
									{
										"kind": "text",
										"text": ". This method confirms that the batch job should be executed."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the batch job's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.batchJobs.confirm(batchJobId)\n.then(({ batch_job }) => {\n  console.log(batch_job.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 464,
									"name": "batchJobId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the batch job."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 465,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/batch/index.d.ts",
											"qualifiedName": "AdminBatchJobRes"
										},
										"name": "AdminBatchJobRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 466,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 467,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve the details of a batch job."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the batch job's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.batchJobs.retrieve(batchJobId)\n.then(({ batch_job }) => {\n  console.log(batch_job.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 468,
									"name": "batchJobId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the batch job."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 469,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/batch/index.d.ts",
											"qualifiedName": "AdminBatchJobRes"
										},
										"name": "AdminBatchJobRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 447,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 448,
							"name": "new AdminBatchJobsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 449,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 446,
								"name": "AdminBatchJobsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						447
					]
				},
				{
					"title": "Methods",
					"children": [
						450,
						454,
						458,
						462,
						466
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 470,
			"name": "AdminCollectionsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Product Collection API Routes](https://docs.medusajs.com/api/admin#product-collections). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.collections`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 438
					},
					{
						"kind": "text",
						"text": ".\n\nA product collection is used to organize products for different purposes such as marketing or discount purposes. For example, you can create a Summer Collection."
					}
				]
			},
			"children": [
				{
					"id": 474,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 475,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a product collection."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the created product collection's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.collections.create({\n  title: \"New Collection\"\n})\n.then(({ collection }) => {\n  console.log(collection.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 476,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The data of the product collection to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/collections/create-collection.d.ts",
											"qualifiedName": "AdminPostCollectionsReq"
										},
										"name": "AdminPostCollectionsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 477,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/collections/index.d.ts",
											"qualifiedName": "AdminCollectionsRes"
										},
										"name": "AdminCollectionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 478,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 479,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a product collection's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product collection's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.collections.update(collectionId, {\n  title: \"New Collection\"\n})\n.then(({ collection }) => {\n  console.log(collection.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 480,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 481,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The data to update in the product collection."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/collections/update-collection.d.ts",
											"qualifiedName": "AdminPostCollectionsCollectionReq"
										},
										"name": "AdminPostCollectionsCollectionReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 482,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/collections/index.d.ts",
											"qualifiedName": "AdminCollectionsRes"
										},
										"name": "AdminCollectionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 483,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 484,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a product collection. This does not delete associated products."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.collections.delete(collectionId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 485,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 486,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 487,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 488,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a product collection by its ID. The products associated with it are expanded and returned as well."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product collection's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.collections.retrieve(collectionId)\n.then(({ collection }) => {\n  console.log(collection.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 489,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 490,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/collections/index.d.ts",
											"qualifiedName": "AdminCollectionsRes"
										},
										"name": "AdminCollectionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 491,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 492,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of product collections. The product collections can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`handle`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`title`"
									},
									{
										"kind": "text",
										"text": ". The collections can also be sorted or paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of product collections with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list product collections:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.collections.list()\n.then(({ collections, limit, offset, count }) => {\n  console.log(collections.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`10`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.collections.list({\n  limit,\n  offset\n})\n.then(({ collections, limit, offset, count }) => {\n  console.log(collections.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 493,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved product collections."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/collections/list-collections.d.ts",
											"qualifiedName": "AdminGetCollectionsParams"
										},
										"name": "AdminGetCollectionsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 494,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/collections/index.d.ts",
											"qualifiedName": "AdminCollectionsListRes"
										},
										"name": "AdminCollectionsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 495,
					"name": "addProducts",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 496,
							"name": "addProducts",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add products to collection."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product collection's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.collections.addProducts(collectionId, {\n  product_ids: [\n    productId1,\n    productId2\n  ]\n})\n.then(({ collection }) => {\n  console.log(collection.products)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 497,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 498,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The products to add."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/collections/add-products.d.ts",
											"qualifiedName": "AdminPostProductsToCollectionReq"
										},
										"name": "AdminPostProductsToCollectionReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 499,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/collections/index.d.ts",
											"qualifiedName": "AdminCollectionsRes"
										},
										"name": "AdminCollectionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 500,
					"name": "removeProducts",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 501,
							"name": "removeProducts",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Remove a list of products from a collection. This would not delete the product, only the association between the product and the collection."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.collections.removeProducts(collectionId, {\n  product_ids: [\n    productId1,\n    productId2\n  ]\n})\n.then(({ id, object, removed_products }) => {\n  console.log(removed_products)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 502,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "the ID of the product collection"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 503,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The products to remove from the collection."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/collections/remove-products.d.ts",
											"qualifiedName": "AdminDeleteProductsFromCollectionReq"
										},
										"name": "AdminDeleteProductsFromCollectionReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 504,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/collections/index.d.ts",
											"qualifiedName": "AdminDeleteProductsFromCollectionRes"
										},
										"name": "AdminDeleteProductsFromCollectionRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 471,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 472,
							"name": "new AdminCollectionsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 473,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 470,
								"name": "AdminCollectionsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						471
					]
				},
				{
					"title": "Methods",
					"children": [
						474,
						478,
						483,
						487,
						491,
						495,
						500
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 505,
			"name": "AdminCurrenciesResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Currency API Routes](https://docs.medusajs.com/api/admin#currencies). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.currencies`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 438
					},
					{
						"kind": "text",
						"text": ".\n\nA store can use unlimited currencies, and each region must be associated with at least one currency.\nCurrencies are defined within the Medusa backend. The methods in this class allow admins to list and update currencies.\n\nRelated Guide: [How to manage currencies](https://docs.medusajs.com/modules/regions-and-currencies/admin/manage-currencies)."
					}
				]
			},
			"children": [
				{
					"id": 509,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 510,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of currencies. The currencies can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`code`"
									},
									{
										"kind": "text",
										"text": ". The currencies can also be sorted or paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of currencies with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list currencies:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.currencies.list()\n.then(({ currencies, count, offset, limit }) => {\n  console.log(currencies.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`20`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.currencies.list({\n  limit,\n  offset\n})\n.then(({ currencies, count, offset, limit }) => {\n  console.log(currencies.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 511,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on retrieved currencies."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/currencies/list-currencies.d.ts",
											"qualifiedName": "AdminGetCurrenciesParams"
										},
										"name": "AdminGetCurrenciesParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 512,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/currencies/index.d.ts",
											"qualifiedName": "AdminCurrenciesListRes"
										},
										"name": "AdminCurrenciesListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 513,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 514,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a Currency's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the currency's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.currencies.update(code, {\n  includes_tax: true\n})\n.then(({ currency }) => {\n  console.log(currency.code);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 515,
									"name": "code",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The code of the currency to update."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 516,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the currency."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/currencies/update-currency.d.ts",
											"qualifiedName": "AdminPostCurrenciesCurrencyReq"
										},
										"name": "AdminPostCurrenciesCurrencyReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 517,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/currencies/index.d.ts",
											"qualifiedName": "AdminCurrenciesRes"
										},
										"name": "AdminCurrenciesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 506,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 507,
							"name": "new AdminCurrenciesResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 508,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 505,
								"name": "AdminCurrenciesResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						506
					]
				},
				{
					"title": "Methods",
					"children": [
						509,
						513
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 402,
			"name": "AdminCustomResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests custom API Routes. All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.custom`"
					},
					{
						"kind": "text",
						"text": " property."
					}
				]
			},
			"children": [
				{
					"id": 406,
					"name": "get",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 407,
							"name": "get",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Send a "
									},
									{
										"kind": "code",
										"text": "`GET`"
									},
									{
										"kind": "text",
										"text": " request to a custom API Route. The method accepts a tuple of type parameters: the first "
									},
									{
										"kind": "code",
										"text": "`TQuery`"
									},
									{
										"kind": "text",
										"text": " is the type of accepted query parameters,\nwhich defaults to "
									},
									{
										"kind": "code",
										"text": "`Record<string, any>`"
									},
									{
										"kind": "text",
										"text": "; the second "
									},
									{
										"kind": "code",
										"text": "`TResponse`"
									},
									{
										"kind": "text",
										"text": " is the type of response, which defaults to "
									},
									{
										"kind": "code",
										"text": "`any`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The response data."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\ntype PostsResponse = {\nposts: Post[]\n}\n// must be previously logged in or use api token\nmedusa.admin.custom.get<Record<string, any>, PostsResponse>(\n  \"/blog/posts\"\n)\n.then(({ posts }) => {\n  console.log(posts.length);\n})\n```"
											}
										]
									}
								]
							},
							"typeParameter": [
								{
									"id": 408,
									"name": "TQuery",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								},
								{
									"id": 409,
									"name": "TResponse",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"default": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"parameters": [
								{
									"id": 410,
									"name": "path",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The path of the custom API Route."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 411,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Query path parameters to pass in the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 408,
										"name": "TQuery",
										"package": "@medusajs/medusa-js",
										"refersToTypeParameter": true
									}
								},
								{
									"id": 412,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "RequestOptions"
										},
										"name": "RequestOptions",
										"package": "@medusajs/medusa-js"
									}
								},
								{
									"id": 413,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 409,
										"name": "TResponse",
										"package": "@medusajs/medusa-js",
										"refersToTypeParameter": true
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 414,
					"name": "post",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 415,
							"name": "post",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Send a "
									},
									{
										"kind": "code",
										"text": "`POST`"
									},
									{
										"kind": "text",
										"text": " request to a custom API Route. The method accepts a tuple of type parameters: the first "
									},
									{
										"kind": "code",
										"text": "`TPayload`"
									},
									{
										"kind": "text",
										"text": " is the type of accepted body parameters,\nwhich defaults to "
									},
									{
										"kind": "code",
										"text": "`Record<string, any>`"
									},
									{
										"kind": "text",
										"text": "; the second "
									},
									{
										"kind": "code",
										"text": "`TResponse`"
									},
									{
										"kind": "text",
										"text": " is the type of response, which defaults to "
									},
									{
										"kind": "code",
										"text": "`any`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The response data."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\ntype PostRequest = {\n  title: string\n}\ntype PostResponse = {\n  post: Post\n}\n// must be previously logged in or use api token\nmedusa.admin.custom.post<PostRequest, PostResponse>(\n  \"/blog/posts\",\n  {\n    title: \"My post\",\n  }\n)\n.then(({ post }) => {\n  console.log(post.id);\n})\n```"
											}
										]
									}
								]
							},
							"typeParameter": [
								{
									"id": 416,
									"name": "TPayload",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								},
								{
									"id": 417,
									"name": "TResponse",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"default": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"parameters": [
								{
									"id": 418,
									"name": "path",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The path of the custom API Route."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 419,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Body parameters to pass in the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 416,
										"name": "TPayload",
										"package": "@medusajs/medusa-js",
										"refersToTypeParameter": true
									}
								},
								{
									"id": 420,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "RequestOptions"
										},
										"name": "RequestOptions",
										"package": "@medusajs/medusa-js"
									}
								},
								{
									"id": 421,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 417,
										"name": "TResponse",
										"package": "@medusajs/medusa-js",
										"refersToTypeParameter": true
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 422,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 423,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Send a "
									},
									{
										"kind": "code",
										"text": "`DELETE`"
									},
									{
										"kind": "text",
										"text": " request to a custom API Route. The method accepts a type parameters "
									},
									{
										"kind": "code",
										"text": "`TResponse`"
									},
									{
										"kind": "text",
										"text": " indicating the type of response, which defaults to "
									},
									{
										"kind": "code",
										"text": "`any`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The response data."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.custom.delete(\n  `/blog/posts/${postId}`\n)\n.then(() => {\n  // deleted successfully\n})\n```"
											}
										]
									}
								]
							},
							"typeParameter": [
								{
									"id": 424,
									"name": "TResponse",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"default": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"parameters": [
								{
									"id": 425,
									"name": "path",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The path of the custom API Route."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 426,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "RequestOptions"
										},
										"name": "RequestOptions",
										"package": "@medusajs/medusa-js"
									}
								},
								{
									"id": 427,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 424,
										"name": "TResponse",
										"package": "@medusajs/medusa-js",
										"refersToTypeParameter": true
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 403,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 404,
							"name": "new AdminCustomResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 405,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 402,
								"name": "AdminCustomResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						403
					]
				},
				{
					"title": "Methods",
					"children": [
						406,
						414,
						422
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 518,
			"name": "AdminCustomerGroupsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Customer Group API Routes](https://docs.medusajs.com/api/admin#customer-groups). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.customerGroups`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 438
					},
					{
						"kind": "text",
						"text": ".\n\nCustomer Groups can be used to organize customers that share similar data or attributes into dedicated groups.\nThis can be useful for different purposes such as setting a different price for a specific customer group.\n\nRelated Guide: [How to manage customer groups](https://docs.medusajs.com/modules/customers/admin/manage-customer-groups)."
					}
				]
			},
			"children": [
				{
					"id": 522,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 523,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a customer group."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer group's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.customerGroups.create({\n  name: \"VIP\"\n})\n.then(({ customer_group }) => {\n  console.log(customer_group.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 524,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The data of the customer group to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customer-groups/create-customer-group.d.ts",
											"qualifiedName": "AdminPostCustomerGroupsReq"
										},
										"name": "AdminPostCustomerGroupsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 525,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customer-groups/index.d.ts",
											"qualifiedName": "AdminCustomerGroupsRes"
										},
										"name": "AdminCustomerGroupsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 526,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 527,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a customer group by its ID. You can expand the customer group's relations or select the fields that should be returned."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer group's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.customerGroups.retrieve(customerGroupId)\n.then(({ customer_group }) => {\n  console.log(customer_group.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 528,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the customer group."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 529,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved customer group."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customer-groups/get-customer-group.d.ts",
											"qualifiedName": "AdminGetCustomerGroupsGroupParams"
										},
										"name": "AdminGetCustomerGroupsGroupParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 530,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customer-groups/index.d.ts",
											"qualifiedName": "AdminCustomerGroupsRes"
										},
										"name": "AdminCustomerGroupsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 531,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 532,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a customer group's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer group's details."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 533,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the customer group."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 534,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the customer group."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customer-groups/update-customer-group.d.ts",
											"qualifiedName": "AdminPostCustomerGroupsGroupReq"
										},
										"name": "AdminPostCustomerGroupsGroupReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 535,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customer-groups/index.d.ts",
											"qualifiedName": "AdminCustomerGroupsRes"
										},
										"name": "AdminCustomerGroupsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 536,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 537,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a customer group. This doesn't delete the customers associated with the customer group."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.customerGroups.delete(customerGroupId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 538,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the customer group."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 539,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 540,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 541,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of customer groups. The customer groups can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`name`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`id`"
									},
									{
										"kind": "text",
										"text": ". The customer groups can also be sorted or paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of customer groups with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list customer groups:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.customerGroups.list()\n.then(({ customer_groups, limit, offset, count }) => {\n  console.log(customer_groups.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the customer groups:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.customerGroups.list({\n  expand: \"customers\"\n})\n.then(({ customer_groups, limit, offset, count }) => {\n  console.log(customer_groups.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`10`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.customerGroups.list({\n  \"expand\": \"customers\",\n  limit,\n  offset\n})\n.then(({ customer_groups, limit, offset, count }) => {\n  console.log(customer_groups.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 542,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved customer groups."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customer-groups/list-customer-groups.d.ts",
											"qualifiedName": "AdminGetCustomerGroupsParams"
										},
										"name": "AdminGetCustomerGroupsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 543,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customer-groups/index.d.ts",
											"qualifiedName": "AdminCustomerGroupsListRes"
										},
										"name": "AdminCustomerGroupsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 544,
					"name": "addCustomers",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 545,
							"name": "addCustomers",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add a list of customers to a customer group."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer group's details."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 546,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the customer group."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 547,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The customers to add to the customer group."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customer-groups/add-customers-batch.d.ts",
											"qualifiedName": "AdminPostCustomerGroupsGroupCustomersBatchReq"
										},
										"name": "AdminPostCustomerGroupsGroupCustomersBatchReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 548,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customer-groups/index.d.ts",
											"qualifiedName": "AdminCustomerGroupsRes"
										},
										"name": "AdminCustomerGroupsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 549,
					"name": "removeCustomers",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 550,
							"name": "removeCustomers",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Remove a list of customers from a customer group. This doesn't delete the customer, only the association between the customer and the customer group."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer group's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.customerGroups.removeCustomers(customerGroupId, {\n  customer_ids: [\n    {\n      id: customerId\n    }\n  ]\n})\n.then(({ customer_group }) => {\n  console.log(customer_group.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 551,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the customer group."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 552,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The customers to remove from the customer group."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customer-groups/delete-customers-batch.d.ts",
											"qualifiedName": "AdminDeleteCustomerGroupsGroupCustomerBatchReq"
										},
										"name": "AdminDeleteCustomerGroupsGroupCustomerBatchReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 553,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customer-groups/index.d.ts",
											"qualifiedName": "AdminCustomerGroupsRes"
										},
										"name": "AdminCustomerGroupsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 554,
					"name": "listCustomers",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 555,
							"name": "listCustomers",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of customers in a customer group. The customers can be filtered by the "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " field. The customers can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of customers with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.customerGroups.listCustomers(customerGroupId)\n.then(({ customers }) => {\n  console.log(customers.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 556,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the customer group."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 557,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved customers."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customers/list-customers.d.ts",
											"qualifiedName": "AdminGetCustomersParams"
										},
										"name": "AdminGetCustomersParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 558,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customers/index.d.ts",
											"qualifiedName": "AdminCustomersListRes"
										},
										"name": "AdminCustomersListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 519,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 520,
							"name": "new AdminCustomerGroupsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 521,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 518,
								"name": "AdminCustomerGroupsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						519
					]
				},
				{
					"title": "Methods",
					"children": [
						522,
						526,
						531,
						536,
						540,
						544,
						549,
						554
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 559,
			"name": "AdminCustomersResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Customer API Routes](https://docs.medusajs.com/api/admin#customers). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.customers`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 438
					},
					{
						"kind": "text",
						"text": ".\n\nCustomers can either be created when they register through the "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "CustomersResource.create",
						"target": 115
					},
					{
						"kind": "text",
						"text": " method, or created by the admin using the "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "create",
						"target": 563,
						"tsLinkText": ""
					},
					{
						"kind": "text",
						"text": " method.\n\nRelated Guide: [How to manage customers](https://docs.medusajs.com/modules/customers/admin/manage-customers)."
					}
				]
			},
			"children": [
				{
					"id": 563,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 564,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a customer as an admin."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.customers.create({\n  email: \"user@example.com\",\n  first_name: \"Caterina\",\n  last_name: \"Yost\",\n  password: \"supersecret\"\n})\n.then(({ customer }) => {\n  console.log(customer.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 565,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The customer to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customers/create-customer.d.ts",
											"qualifiedName": "AdminPostCustomersReq"
										},
										"name": "AdminPostCustomersReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 566,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customers/index.d.ts",
											"qualifiedName": "AdminCustomersRes"
										},
										"name": "AdminCustomersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 567,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 568,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a customer's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.customers.update(customerId, {\n  first_name: \"Dolly\"\n})\n.then(({ customer }) => {\n  console.log(customer.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 569,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The customer's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 570,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the customer."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customers/update-customer.d.ts",
											"qualifiedName": "AdminPostCustomersCustomerReq"
										},
										"name": "AdminPostCustomersCustomerReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 571,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customers/index.d.ts",
											"qualifiedName": "AdminCustomersRes"
										},
										"name": "AdminCustomersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 572,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 573,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve the details of a customer."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.customers.retrieve(customerId)\n.then(({ customer }) => {\n  console.log(customer.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 574,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The customer's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 575,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customers/index.d.ts",
											"qualifiedName": "AdminCustomersRes"
										},
										"name": "AdminCustomersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 576,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 577,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of Customers. The customers can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`groups`"
									},
									{
										"kind": "text",
										"text": ". The customers can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of customers with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list customers:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.customers.list()\n.then(({ customers, limit, offset, count }) => {\n  console.log(customers.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the customers:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.customers.list({\n  expand: \"billing_address\"\n})\n.then(({ customers, limit, offset, count }) => {\n  console.log(customers.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`50`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.customers.list({\n  expand: \"billing_address\",\n  limit,\n  offset\n})\n.then(({ customers, limit, offset, count }) => {\n  console.log(customers.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 578,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved customers."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customers/list-customers.d.ts",
											"qualifiedName": "AdminGetCustomersParams"
										},
										"name": "AdminGetCustomersParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 579,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customers/index.d.ts",
											"qualifiedName": "AdminCustomersListRes"
										},
										"name": "AdminCustomersListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 560,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 561,
							"name": "new AdminCustomersResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 562,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 559,
								"name": "AdminCustomersResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						560
					]
				},
				{
					"title": "Methods",
					"children": [
						563,
						567,
						572,
						576
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 580,
			"name": "AdminDiscountsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Discount API Routes](https://docs.medusajs.com/api/admin#discounts). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.discounts`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 438
					},
					{
						"kind": "text",
						"text": ".\n\nAdmins can create discounts with conditions and rules, providing them with advanced settings for variety of cases.\nThe methods in this class can be used to manage discounts, their conditions, resources, and more.\n\nRelated Guide: [How to manage discounts](https://docs.medusajs.com/modules/discounts/admin/manage-discounts)."
					}
				]
			},
			"children": [
				{
					"id": 584,
					"name": "addRegion",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 585,
							"name": "addRegion",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add a Region to the list of Regions a Discount can be used in."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the discount's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.addRegion(discountId, regionId)\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 586,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The discount's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 587,
									"name": "regionId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the region to add."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 588,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/index.d.ts",
											"qualifiedName": "AdminDiscountsRes"
										},
										"name": "AdminDiscountsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 589,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 590,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a discount with a given set of rules that defines how the discount is applied."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the discount's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nimport { AllocationType, DiscountRuleType } from \"@medusajs/medusa\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.create({\n  code: \"TEST\",\n  rule: {\n    type: DiscountRuleType.FIXED,\n    value: 10,\n    allocation: AllocationType.ITEM\n  },\n  regions: [\"reg_XXXXXXXX\"],\n  is_dynamic: false,\n  is_disabled: false\n})\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 591,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The discount to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/create-discount.d.ts",
											"qualifiedName": "AdminPostDiscountsReq"
										},
										"name": "AdminPostDiscountsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 592,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/index.d.ts",
											"qualifiedName": "AdminDiscountsRes"
										},
										"name": "AdminDiscountsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 593,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 594,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a discount with a given set of rules that define how the discount is applied."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the discount."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.update(discountId, {\n  code: \"TEST\"\n})\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 595,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The discount's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 596,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the discount."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/update-discount.d.ts",
											"qualifiedName": "AdminPostDiscountsDiscountReq"
										},
										"name": "AdminPostDiscountsDiscountReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 597,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/index.d.ts",
											"qualifiedName": "AdminDiscountsRes"
										},
										"name": "AdminDiscountsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 598,
					"name": "createDynamicCode",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 599,
							"name": "createDynamicCode",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a dynamic unique code that can map to a parent discount. This is useful if you want to automatically generate codes with the same rules and conditions."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the discount."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.createDynamicCode(discountId, {\n  code: \"TEST\",\n  usage_limit: 1\n})\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 600,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The discount's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 601,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The dynamic code to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/create-dynamic-code.d.ts",
											"qualifiedName": "AdminPostDiscountsDiscountDynamicCodesReq"
										},
										"name": "AdminPostDiscountsDiscountDynamicCodesReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 602,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/index.d.ts",
											"qualifiedName": "AdminDiscountsRes"
										},
										"name": "AdminDiscountsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 603,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 604,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a discount. Deleting the discount will make it unavailable for customers to use."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the delete operation details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.delete(discountId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 605,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The discount's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 606,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 607,
					"name": "deleteDynamicCode",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 608,
							"name": "deleteDynamicCode",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a dynamic code from a discount."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the discount."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.deleteDynamicCode(discountId, code)\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 609,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The discount's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 610,
									"name": "code",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The code of the dynamic code to delete."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 611,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/index.d.ts",
											"qualifiedName": "AdminDiscountsRes"
										},
										"name": "AdminDiscountsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 612,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 613,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a discount."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the discount."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.retrieve(discountId)\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 614,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The discount's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 615,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/index.d.ts",
											"qualifiedName": "AdminDiscountsRes"
										},
										"name": "AdminDiscountsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 616,
					"name": "retrieveByCode",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 617,
							"name": "retrieveByCode",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a discount's details by its discount code."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the discount."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.retrieveByCode(code)\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 618,
									"name": "code",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The code of the discount."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 619,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/index.d.ts",
											"qualifiedName": "AdminDiscountsRes"
										},
										"name": "AdminDiscountsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 620,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 621,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of Discounts. The discounts can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`rule`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`is_dynamic`"
									},
									{
										"kind": "text",
										"text": ". The discounts can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of discounts with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list discounts:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.list()\n.then(({ discounts, limit, offset, count }) => {\n  console.log(discounts.id);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the discounts:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.list({\n  expand: \"rule\"\n})\n.then(({ discounts, limit, offset, count }) => {\n  console.log(discounts.id);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`20`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.list({\n  expand: \"rule\",\n  limit,\n  offset\n})\n.then(({ discounts, limit, offset, count }) => {\n  console.log(discounts.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 622,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved discounts."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/list-discounts.d.ts",
											"qualifiedName": "AdminGetDiscountsParams"
										},
										"name": "AdminGetDiscountsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 623,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/index.d.ts",
											"qualifiedName": "AdminDiscountsListRes"
										},
										"name": "AdminDiscountsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 624,
					"name": "removeRegion",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 625,
							"name": "removeRegion",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Remove a Region from the list of Regions that a Discount can be used in. This does not delete a region, only the association between it and the discount."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the discount."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.removeRegion(discountId, regionId)\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 626,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The discount's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 627,
									"name": "regionId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the region to remove."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 628,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/index.d.ts",
											"qualifiedName": "AdminDiscountsRes"
										},
										"name": "AdminDiscountsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 629,
					"name": "createCondition",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 630,
							"name": "createCondition",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a discount condition. Only one of "
									},
									{
										"kind": "code",
										"text": "`products`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`product_types`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`product_collections`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`product_tags`"
									},
									{
										"kind": "text",
										"text": ", and "
									},
									{
										"kind": "code",
										"text": "`customer_groups`"
									},
									{
										"kind": "text",
										"text": " should be provided in the "
									},
									{
										"kind": "code",
										"text": "`payload`"
									},
									{
										"kind": "text",
										"text": " parameter, \nbased on the type of discount condition. For example, if the discount condition's type is "
									},
									{
										"kind": "code",
										"text": "`products`"
									},
									{
										"kind": "text",
										"text": ", the "
									},
									{
										"kind": "code",
										"text": "`products`"
									},
									{
										"kind": "text",
										"text": " field should be provided in the "
									},
									{
										"kind": "code",
										"text": "`payload`"
									},
									{
										"kind": "text",
										"text": " parameter."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the discount."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To create a condition in a discount:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nimport { DiscountConditionOperator } from \"@medusajs/medusa\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.createCondition(discountId, {\n  operator: DiscountConditionOperator.IN,\n  products: [productId]\n})\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved as part of the response:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nimport { DiscountConditionOperator } from \"@medusajs/medusa\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.createCondition(discountId, {\n  operator: DiscountConditionOperator.IN,\n  products: [productId]\n}, {\n  expand: \"rule\"\n})\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 631,
									"name": "discountId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The discount's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 632,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The discount condition to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/create-condition.d.ts",
											"qualifiedName": "AdminPostDiscountsDiscountConditions"
										},
										"name": "AdminPostDiscountsDiscountConditions",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 633,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the returned discount."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/create-condition.d.ts",
											"qualifiedName": "AdminPostDiscountsDiscountConditionsParams"
										},
										"name": "AdminPostDiscountsDiscountConditionsParams",
										"package": "@medusajs/medusa"
									},
									"defaultValue": "{}"
								},
								{
									"id": 634,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/index.d.ts",
											"qualifiedName": "AdminDiscountsRes"
										},
										"name": "AdminDiscountsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 635,
					"name": "updateCondition",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 636,
							"name": "updateCondition",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a discount condition. Only one of "
									},
									{
										"kind": "code",
										"text": "`products`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`product_types`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`product_collections`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`product_tags`"
									},
									{
										"kind": "text",
										"text": ", and "
									},
									{
										"kind": "code",
										"text": "`customer_groups`"
									},
									{
										"kind": "text",
										"text": " should be provided in the "
									},
									{
										"kind": "code",
										"text": "`payload`"
									},
									{
										"kind": "text",
										"text": " parameter,\nbased on the type of discount condition. For example, if the discount condition's type is "
									},
									{
										"kind": "code",
										"text": "`products`"
									},
									{
										"kind": "text",
										"text": ", the "
									},
									{
										"kind": "code",
										"text": "`products`"
									},
									{
										"kind": "text",
										"text": " field should be provided in the "
									},
									{
										"kind": "code",
										"text": "`payload`"
									},
									{
										"kind": "text",
										"text": " parameter."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the discount."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To update a condition in a discount:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.updateCondition(discountId, conditionId, {\n  products: [\n    productId\n  ]\n})\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved as part of the response:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.updateCondition(discountId, conditionId, {\n  products: [\n    productId\n  ]\n}, {\n  expand: \"rule\"\n})\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 637,
									"name": "discountId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The discount's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 638,
									"name": "conditionId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the discount condition."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 639,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the discount condition."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/update-condition.d.ts",
											"qualifiedName": "AdminPostDiscountsDiscountConditionsCondition"
										},
										"name": "AdminPostDiscountsDiscountConditionsCondition",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 640,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the returned discount."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/update-condition.d.ts",
											"qualifiedName": "AdminPostDiscountsDiscountConditionsConditionParams"
										},
										"name": "AdminPostDiscountsDiscountConditionsConditionParams",
										"package": "@medusajs/medusa"
									},
									"defaultValue": "{}"
								},
								{
									"id": 641,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/index.d.ts",
											"qualifiedName": "AdminDiscountsRes"
										},
										"name": "AdminDiscountsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 642,
					"name": "deleteCondition",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 643,
							"name": "deleteCondition",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a discount condition. This doesn't delete resources associated to the discount condition."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.deleteCondition(discountId, conditionId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 644,
									"name": "discountId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The discount's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 645,
									"name": "conditionId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the discount condition."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 646,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 647,
					"name": "getCondition",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 648,
							"name": "getCondition",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a Discount Condition's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the discount condition details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "A simple example that retrieves a discount condition by its ID:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.getCondition(discountId, conditionId)\n.then(({ discount_condition }) => {\n  console.log(discount_condition.id);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.getCondition(discountId, conditionId, {\n  expand: \"discount_rule\"\n})\n.then(({ discount_condition }) => {\n  console.log(discount_condition.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 649,
									"name": "discountId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the discount that the condition belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 650,
									"name": "conditionId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the discount condition."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 651,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved discount condition."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/get-condition.d.ts",
											"qualifiedName": "AdminGetDiscountsDiscountConditionsConditionParams"
										},
										"name": "AdminGetDiscountsDiscountConditionsConditionParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 652,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/index.d.ts",
											"qualifiedName": "AdminDiscountConditionsRes"
										},
										"name": "AdminDiscountConditionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 653,
					"name": "addConditionResourceBatch",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 654,
							"name": "addConditionResourceBatch",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add a batch of resources to a discount condition. The type of resource depends on the type of discount condition. For example, if the discount condition's type is "
									},
									{
										"kind": "code",
										"text": "`products`"
									},
									{
										"kind": "text",
										"text": ",\nthe resources being added should be products."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the discount."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To add resources to a discount condition:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.addConditionResourceBatch(discountId, conditionId, {\n  resources: [{ id: itemId }]\n})\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations to include in the returned discount:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.addConditionResourceBatch(discountId, conditionId, {\n  resources: [{ id: itemId }]\n}, {\n  expand: \"rule\"\n})\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 655,
									"name": "discountId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the discount the condition belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 656,
									"name": "conditionId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the discount condition."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 657,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The resources to add to the discount condition."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/add-resources-to-condition-batch.d.ts",
											"qualifiedName": "AdminPostDiscountsDiscountConditionsConditionBatchReq"
										},
										"name": "AdminPostDiscountsDiscountConditionsConditionBatchReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 658,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved discount."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/add-resources-to-condition-batch.d.ts",
											"qualifiedName": "AdminPostDiscountsDiscountConditionsConditionBatchParams"
										},
										"name": "AdminPostDiscountsDiscountConditionsConditionBatchParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 659,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/index.d.ts",
											"qualifiedName": "AdminDiscountsRes"
										},
										"name": "AdminDiscountsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 660,
					"name": "deleteConditionResourceBatch",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 661,
							"name": "deleteConditionResourceBatch",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Remove a batch of resources from a discount condition. This will only remove the association between the resource and the discount condition, not the resource itself."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the discount."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.deleteConditionResourceBatch(discountId, conditionId, {\n  resources: [{ id: itemId }]\n})\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 662,
									"name": "discountId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the discount the condition belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 663,
									"name": "conditionId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the discount condition."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 664,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The resources to remove."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/delete-resources-from-condition-batch.d.ts",
											"qualifiedName": "AdminDeleteDiscountsDiscountConditionsConditionBatchReq"
										},
										"name": "AdminDeleteDiscountsDiscountConditionsConditionBatchReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 665,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/index.d.ts",
											"qualifiedName": "AdminDiscountsRes"
										},
										"name": "AdminDiscountsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 581,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 582,
							"name": "new AdminDiscountsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 583,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 580,
								"name": "AdminDiscountsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						581
					]
				},
				{
					"title": "Methods",
					"children": [
						584,
						589,
						593,
						598,
						603,
						607,
						612,
						616,
						620,
						624,
						629,
						635,
						642,
						647,
						653,
						660
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 666,
			"name": "AdminDraftOrdersResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Draft Order API Routes](https://docs.medusajs.com/api/admin#draft-orders). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.draftOrders`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 438
					},
					{
						"kind": "text",
						"text": ".\n\nA draft order is an order created manually by the admin. It allows admins to create orders without direct involvement from the customer.\n\nRelated Guide: [How to manage draft orders](https://docs.medusajs.com/modules/orders/admin/manage-draft-orders)."
					}
				]
			},
			"children": [
				{
					"id": 670,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 671,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a Draft Order. A draft order is not transformed into an order until payment is captured."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the draft order's details"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.draftOrders.create({\n  email: \"user@example.com\",\n  region_id,\n  items: [\n    {\n      quantity: 1\n    }\n  ],\n  shipping_methods: [\n    {\n      option_id\n    }\n  ],\n})\n.then(({ draft_order }) => {\n  console.log(draft_order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 672,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The draft order to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/draft-orders/create-draft-order.d.ts",
											"qualifiedName": "AdminPostDraftOrdersReq"
										},
										"name": "AdminPostDraftOrdersReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 673,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/draft-orders/index.d.ts",
											"qualifiedName": "AdminDraftOrdersRes"
										},
										"name": "AdminDraftOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 674,
					"name": "addLineItem",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 675,
							"name": "addLineItem",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a Line Item in the Draft Order."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the draft order's details"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.draftOrders.addLineItem(draftOrderId, {\n  quantity: 1\n})\n.then(({ draft_order }) => {\n  console.log(draft_order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 676,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the draft order."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 677,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The line item to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/draft-orders/create-line-item.d.ts",
											"qualifiedName": "AdminPostDraftOrdersDraftOrderLineItemsReq"
										},
										"name": "AdminPostDraftOrdersDraftOrderLineItemsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 678,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/draft-orders/index.d.ts",
											"qualifiedName": "AdminDraftOrdersRes"
										},
										"name": "AdminDraftOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 679,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 680,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a Draft Order."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.draftOrders.delete(draftOrderId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 681,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the draft order."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 682,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 683,
					"name": "removeLineItem",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 684,
							"name": "removeLineItem",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a Line Item from a Draft Order."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the draft order's details"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.draftOrders.removeLineItem(draftOrderId, itemId)\n.then(({ draft_order }) => {\n  console.log(draft_order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 685,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the draft order that the line item belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 686,
									"name": "itemId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the line item to delete from the draft order."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 687,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/draft-orders/index.d.ts",
											"qualifiedName": "AdminDraftOrdersRes"
										},
										"name": "AdminDraftOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 688,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 689,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a Draft Order's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the draft order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.draftOrders.retrieve(draftOrderId)\n.then(({ draft_order }) => {\n  console.log(draft_order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 690,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the draft order."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 691,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/draft-orders/index.d.ts",
											"qualifiedName": "AdminDraftOrdersRes"
										},
										"name": "AdminDraftOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 692,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 693,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve an list of Draft Orders. The draft orders can be filtered by parameters such as "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": ". The draft orders can also paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of draft orders with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list draft orders:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.draftOrders.list()\n.then(({ draft_orders, limit, offset, count }) => {\n  console.log(draft_orders.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`50`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.draftOrders.list({\n  limit,\n  offset\n})\n.then(({ draft_orders, limit, offset, count }) => {\n  console.log(draft_orders.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 694,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved draft orders."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/draft-orders/list-draft-orders.d.ts",
											"qualifiedName": "AdminGetDraftOrdersParams"
										},
										"name": "AdminGetDraftOrdersParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 695,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/draft-orders/index.d.ts",
											"qualifiedName": "AdminDraftOrdersListRes"
										},
										"name": "AdminDraftOrdersListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 696,
					"name": "markPaid",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 697,
							"name": "markPaid",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Capture the draft order's payment. This will also set the draft order's status to "
									},
									{
										"kind": "code",
										"text": "`completed`"
									},
									{
										"kind": "text",
										"text": " and create an order from the draft order. The payment is captured through Medusa's system payment,\nwhich is manual payment that isn't integrated with any third-party payment provider. It is assumed that the payment capturing is handled manually by the admin."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the created order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.draftOrders.markPaid(draftOrderId)\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 698,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the draft order."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 699,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/draft-orders/index.d.ts",
											"qualifiedName": "AdminPostDraftOrdersDraftOrderRegisterPaymentRes"
										},
										"name": "AdminPostDraftOrdersDraftOrderRegisterPaymentRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 700,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 701,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a Draft Order's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the draft order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.draftOrders.update(draftOrderId, {\n  email: \"user@example.com\"\n})\n.then(({ draft_order }) => {\n  console.log(draft_order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 702,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the draft order."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 703,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the draft order."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/draft-orders/update-draft-order.d.ts",
											"qualifiedName": "AdminPostDraftOrdersDraftOrderReq"
										},
										"name": "AdminPostDraftOrdersDraftOrderReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 704,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/draft-orders/index.d.ts",
											"qualifiedName": "AdminDraftOrdersRes"
										},
										"name": "AdminDraftOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 705,
					"name": "updateLineItem",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 706,
							"name": "updateLineItem",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a Line Item in a Draft Order."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the draft order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.draftOrders.updateLineItem(draftOrderId, lineId, {\n  quantity: 1\n})\n.then(({ draft_order }) => {\n  console.log(draft_order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 707,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the draft order that the line item belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 708,
									"name": "itemId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the line item to update."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 709,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the line item."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/draft-orders/update-line-item.d.ts",
											"qualifiedName": "AdminPostDraftOrdersDraftOrderLineItemsItemReq"
										},
										"name": "AdminPostDraftOrdersDraftOrderLineItemsItemReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 710,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/draft-orders/index.d.ts",
											"qualifiedName": "AdminDraftOrdersRes"
										},
										"name": "AdminDraftOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 667,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 668,
							"name": "new AdminDraftOrdersResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 669,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 666,
								"name": "AdminDraftOrdersResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						667
					]
				},
				{
					"title": "Methods",
					"children": [
						670,
						674,
						679,
						683,
						688,
						692,
						696,
						700,
						705
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 711,
			"name": "AdminGiftCardsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Gift Card API Routes](https://docs.medusajs.com/api/admin#gift-cards). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.giftCards`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 438
					},
					{
						"kind": "text",
						"text": ".\n\nAdmins can create gift cards and send them directly to customers, specifying options like their balance, region, and more.\nThese gift cards are different than the saleable gift cards in a store, which are created and managed through "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "AdminProductsResource",
						"target": 1108
					},
					{
						"kind": "text",
						"text": ".\n\nRelated Guide: [How to manage gift cards](https://docs.medusajs.com/modules/gift-cards/admin/manage-gift-cards#manage-custom-gift-cards)."
					}
				]
			},
			"children": [
				{
					"id": 715,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 716,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a gift card that can redeemed by its unique code. The Gift Card is only valid within one region."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the gift card's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.giftCards.create({\n  region_id\n})\n.then(({ gift_card }) => {\n  console.log(gift_card.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 717,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The gift card to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/gift-cards/create-gift-card.d.ts",
											"qualifiedName": "AdminPostGiftCardsReq"
										},
										"name": "AdminPostGiftCardsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 718,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/gift-cards/index.d.ts",
											"qualifiedName": "AdminGiftCardsRes"
										},
										"name": "AdminGiftCardsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 719,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 720,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a gift card's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the gift card's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.giftCards.update(giftCardId, {\n  region_id\n})\n.then(({ gift_card }) => {\n  console.log(gift_card.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 721,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the gift card."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 722,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the gift card."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/gift-cards/update-gift-card.d.ts",
											"qualifiedName": "AdminPostGiftCardsGiftCardReq"
										},
										"name": "AdminPostGiftCardsGiftCardReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 723,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/gift-cards/index.d.ts",
											"qualifiedName": "AdminGiftCardsRes"
										},
										"name": "AdminGiftCardsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 724,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 725,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a gift card. Once deleted, it can't be used by customers."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.giftCards.delete(giftCardId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 726,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the gift card."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 727,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 728,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 729,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a gift card's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the gift card's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.giftCards.retrieve(giftCardId)\n.then(({ gift_card }) => {\n  console.log(gift_card.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 730,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the gift card."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 731,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/gift-cards/index.d.ts",
											"qualifiedName": "AdminGiftCardsRes"
										},
										"name": "AdminGiftCardsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 732,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 733,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of gift cards. The gift cards can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The gift cards can also paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of gift cards with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list gift cards:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.giftCards.list()\n.then(({ gift_cards, limit, offset, count }) => {\n  console.log(gift_cards.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`50`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.giftCards.list({\n  limit,\n  offset\n})\n.then(({ gift_cards, limit, offset, count }) => {\n  console.log(gift_cards.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 734,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved gift cards."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/gift-cards/list-gift-cards.d.ts",
											"qualifiedName": "AdminGetGiftCardsParams"
										},
										"name": "AdminGetGiftCardsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 735,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/gift-cards/index.d.ts",
											"qualifiedName": "AdminGiftCardsListRes"
										},
										"name": "AdminGiftCardsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 712,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 713,
							"name": "new AdminGiftCardsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 714,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 711,
								"name": "AdminGiftCardsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						712
					]
				},
				{
					"title": "Methods",
					"children": [
						715,
						719,
						724,
						728,
						732
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 360,
			"name": "Admin",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class includes properties used to send requests to the [Admin API Routes](https://docs.medusajs.com/api/admin). All its properties\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin`"
					},
					{
						"kind": "text",
						"text": " property."
					}
				]
			},
			"children": [
				{
					"id": 364,
					"name": "auth",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminAuthResource",
								"target": 428,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Auth API Routes](https://docs.medusajs.com/api/admin#auth)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 428,
						"name": "AdminAuthResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 365,
					"name": "batchJobs",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminBatchJobsResource",
								"target": 446,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Batch Job API Routes](https://docs.medusajs.com/api/admin#batch-jobs)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 446,
						"name": "AdminBatchJobsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 366,
					"name": "customers",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminCustomersResource",
								"target": 559,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Customer API Routes](https://docs.medusajs.com/api/admin#customers)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 559,
						"name": "AdminCustomersResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 367,
					"name": "customerGroups",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminCustomerGroupsResource",
								"target": 518,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Customer Group API Routes](https://docs.medusajs.com/api/admin#customer-groups)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 518,
						"name": "AdminCustomerGroupsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 368,
					"name": "discounts",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminDiscountsResource",
								"target": 580,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Discount API Routes](https://docs.medusajs.com/api/admin#discounts)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 580,
						"name": "AdminDiscountsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 369,
					"name": "currencies",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminCurrenciesResource",
								"target": 505,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Currency API Routes](https://docs.medusajs.com/api/admin#currencies_getcurrencies)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 505,
						"name": "AdminCurrenciesResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 370,
					"name": "collections",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminCollectionsResource",
								"target": 470,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Product Collection API Routes](https://docs.medusajs.com/api/admin#product-collections)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 470,
						"name": "AdminCollectionsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 371,
					"name": "draftOrders",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminDraftOrdersResource",
								"target": 666,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Draft Order API Routes](https://docs.medusajs.com/api/admin#draft-orders)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 666,
						"name": "AdminDraftOrdersResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 372,
					"name": "giftCards",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminGiftCardsResource",
								"target": 711,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Gift Card API Routes](https://docs.medusajs.com/api/admin#gift-cards)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 711,
						"name": "AdminGiftCardsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 373,
					"name": "invites",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminInvitesResource",
								"target": 787,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Invite API Routes](https://docs.medusajs.com/api/admin#invites)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 787,
						"name": "AdminInvitesResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 374,
					"name": "inventoryItems",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminInventoryItemsResource",
								"target": 736,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Inventory Item API Routes](https://docs.medusajs.com/api/admin#inventory-items)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 736,
						"name": "AdminInventoryItemsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 375,
					"name": "notes",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminNotesResource",
								"target": 810,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Note API Routes](https://docs.medusajs.com/api/admin#notes)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 810,
						"name": "AdminNotesResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 376,
					"name": "priceLists",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminPriceListResource",
								"target": 1038,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Price List API Routes](https://docs.medusajs.com/api/admin#price-lists)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 1038,
						"name": "AdminPriceListResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 377,
					"name": "products",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminProductsResource",
								"target": 1108,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Product API Routes](https://docs.medusajs.com/api/admin#products)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 1108,
						"name": "AdminProductsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 378,
					"name": "productTags",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminProductTagsResource",
								"target": 1093,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Product Tag API Routes](https://docs.medusajs.com/api/admin#product-tags)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 1093,
						"name": "AdminProductTagsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 379,
					"name": "productTypes",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminProductTypesResource",
								"target": 1100,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Product Type API Routes](https://docs.medusajs.com/api/admin#product-types)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 1100,
						"name": "AdminProductTypesResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 380,
					"name": "users",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminUsersResource",
								"target": 1589,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin User API Routes](https://docs.medusajs.com/api/admin#users)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 1589,
						"name": "AdminUsersResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 381,
					"name": "returns",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminReturnsResource",
								"target": 1328,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Return API Routes](https://docs.medusajs.com/api/admin#returns)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 1328,
						"name": "AdminReturnsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 382,
					"name": "orders",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminOrdersResource",
								"target": 848,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Order API Routes](https://docs.medusajs.com/api/admin#orders)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 848,
						"name": "AdminOrdersResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 383,
					"name": "orderEdits",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminOrderEditsResource",
								"target": 979,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Order Edit API Routes](https://docs.medusajs.com/api/admin#order-edits)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 979,
						"name": "AdminOrderEditsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 384,
					"name": "publishableApiKeys",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminPublishableApiKeyResource",
								"target": 1176,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Publishable API Key API Routes](https://docs.medusajs.com/api/admin#publishable-api-keys)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 1176,
						"name": "AdminPublishableApiKeyResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 385,
					"name": "returnReasons",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminReturnReasonsResource",
								"target": 1304,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Return Reason API Routes](https://docs.medusajs.com/api/admin#return-reasons)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 1304,
						"name": "AdminReturnReasonsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 386,
					"name": "variants",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@props",
								"content": [
									{
										"kind": "text",
										"text": "variants - An instance of "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "AdminVariantsResource",
										"target": 1622,
										"tsLinkText": ""
									},
									{
										"kind": "text",
										"text": " used to send requests to [Admin Product Variant API Routes](https://docs.medusajs.com/api/admin#product-variants)."
									}
								]
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 1622,
						"name": "AdminVariantsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 387,
					"name": "salesChannels",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminSalesChannelsResource",
								"target": 1345,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Sales Channel API Routes](https://docs.medusajs.com/api/admin#sales-channels)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 1345,
						"name": "AdminSalesChannelsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 388,
					"name": "swaps",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminSwapsResource",
								"target": 1489,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Swap API Routes](https://docs.medusajs.com/api/admin#swaps)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 1489,
						"name": "AdminSwapsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 389,
					"name": "shippingProfiles",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminShippingProfilesResource",
								"target": 1415,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Shipping Profile API Routes](https://docs.medusajs.com/api/admin#shipping-profiles)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 1415,
						"name": "AdminShippingProfilesResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 390,
					"name": "stockLocations",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminStockLocationsResource",
								"target": 1439,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Stock Location API Routes](https://docs.medusajs.com/api/admin#stock-locations)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 1439,
						"name": "AdminStockLocationsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 391,
					"name": "store",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminStoresResource",
								"target": 1464,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Store API Routes](https://docs.medusajs.com/api/admin#store)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 1464,
						"name": "AdminStoresResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 392,
					"name": "shippingOptions",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminShippingOptionsResource",
								"target": 1390,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Shipping Option API Routes](https://docs.medusajs.com/api/admin#shipping-options)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 1390,
						"name": "AdminShippingOptionsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 393,
					"name": "regions",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminRegionsResource",
								"target": 1220,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Region API Routes](https://docs.medusajs.com/api/admin#regions)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 1220,
						"name": "AdminRegionsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 394,
					"name": "reservations",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminReservationsResource",
								"target": 1279,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Reservation API Routes](https://docs.medusajs.com/api/admin#reservations)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 1279,
						"name": "AdminReservationsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 395,
					"name": "notifications",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminNotificationsResource",
								"target": 835,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Notification API Routes](https://docs.medusajs.com/api/admin#notifications)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 835,
						"name": "AdminNotificationsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 396,
					"name": "taxRates",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminTaxRatesResource",
								"target": 1501,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Tax Rate API Routes](https://docs.medusajs.com/api/admin#tax-rates)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 1501,
						"name": "AdminTaxRatesResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 397,
					"name": "uploads",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminUploadsResource",
								"target": 1565,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Upload API Routes](https://docs.medusajs.com/api/admin#uploads)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 1565,
						"name": "AdminUploadsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 398,
					"name": "paymentCollections",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminPaymentCollectionsResource",
								"target": 1639,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Payment Collection API Routes](https://docs.medusajs.com/api/admin#payment-collections)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 1639,
						"name": "AdminPaymentCollectionsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 399,
					"name": "payments",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminPaymentsResource",
								"target": 1661,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Payment API Routes](https://docs.medusajs.com/api/admin#payments)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 1661,
						"name": "AdminPaymentsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 400,
					"name": "productCategories",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminProductCategoriesResource",
								"target": 1679,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Product Category API Routes](https://docs.medusajs.com/api/admin#product-categories)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 1679,
						"name": "AdminProductCategoriesResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 401,
					"name": "custom",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminCustomResource",
								"target": 402,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to custom API Routes."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 402,
						"name": "AdminCustomResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 361,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 362,
							"name": "new Admin",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 363,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 360,
								"name": "Admin",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						361
					]
				},
				{
					"title": "Properties",
					"children": [
						364,
						365,
						366,
						367,
						368,
						369,
						370,
						371,
						372,
						373,
						374,
						375,
						376,
						377,
						378,
						379,
						380,
						381,
						382,
						383,
						384,
						385,
						386,
						387,
						388,
						389,
						390,
						391,
						392,
						393,
						394,
						395,
						396,
						397,
						398,
						399,
						400,
						401
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 736,
			"name": "AdminInventoryItemsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Inventory Item API Routes](https://docs.medusajs.com/api/admin#inventory-items). To use these API Routes, make sure to install the\n[@medusajs/inventory](https://docs.medusajs.com/modules/multiwarehouse/install-modules#inventory-module) module in your Medusa backend. All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.inventoryItems`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 438
					},
					{
						"kind": "text",
						"text": ".\n\nInventory items, provided by the [Inventory Module](https://docs.medusajs.com/modules/multiwarehouse/inventory-module), can be used to manage the inventory of saleable items in your store.\n\nRelated Guide: [How to manage inventory items](https://docs.medusajs.com/modules/multiwarehouse/admin/manage-inventory-items)."
					}
				]
			},
			"children": [
				{
					"id": 740,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 741,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve an Inventory Item's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The inventory item's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.inventoryItems.retrieve(inventoryItemId)\n.then(({ inventory_item }) => {\n  console.log(inventory_item.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 742,
									"name": "inventoryItemId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the inventory item."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 743,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations applied on the retrieved inventory item."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/get-inventory-item.d.ts",
											"qualifiedName": "AdminGetInventoryItemsItemParams"
										},
										"name": "AdminGetInventoryItemsItemParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 744,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/index.d.ts",
											"qualifiedName": "AdminInventoryItemsRes"
										},
										"name": "AdminInventoryItemsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 745,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 746,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update an Inventory Item's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The inventory item's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.inventoryItems.update(inventoryItemId, {\n  origin_country: \"US\",\n})\n.then(({ inventory_item }) => {\n  console.log(inventory_item.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 747,
									"name": "inventoryItemId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the inventory item."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 748,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the inventory item."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/update-inventory-item.d.ts",
											"qualifiedName": "AdminPostInventoryItemsInventoryItemReq"
										},
										"name": "AdminPostInventoryItemsInventoryItemReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 749,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved inventory item."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/update-inventory-item.d.ts",
											"qualifiedName": "AdminPostInventoryItemsInventoryItemParams"
										},
										"name": "AdminPostInventoryItemsInventoryItemParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 750,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/index.d.ts",
											"qualifiedName": "AdminInventoryItemsRes"
										},
										"name": "AdminInventoryItemsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 751,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 752,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete an Inventory Item. This does not delete the associated product variant."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.inventoryItems.delete(inventoryItemId)\n.then(({ id, object, deleted }) => {\n  console.log(id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 753,
									"name": "inventoryItemId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the inventory item."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 754,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 755,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 756,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create an Inventory Item for a product variant."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The inventory item's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.inventoryItems.create({\n  variant_id: \"variant_123\",\n})\n.then(({ inventory_item }) => {\n  console.log(inventory_item.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 757,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The inventory item to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/create-inventory-item.d.ts",
											"qualifiedName": "AdminPostInventoryItemsReq"
										},
										"name": "AdminPostInventoryItemsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 758,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved inventory item."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/create-inventory-item.d.ts",
											"qualifiedName": "AdminPostInventoryItemsParams"
										},
										"name": "AdminPostInventoryItemsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 759,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/index.d.ts",
											"qualifiedName": "AdminInventoryItemsRes"
										},
										"name": "AdminInventoryItemsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 760,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 761,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of inventory items. The inventory items can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`location_id`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter.\nThe inventory items can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The list of inventory items with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list inventory items:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.inventoryItems.list()\n.then(({ inventory_items, count, offset, limit }) => {\n  console.log(inventory_items.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`20`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.inventoryItems.list({\n  limit,\n  offset\n})\n.then(({ inventory_items, count, offset, limit }) => {\n  console.log(inventory_items.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 762,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations applied on the retrieved inventory items."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/list-inventory-items.d.ts",
											"qualifiedName": "AdminGetInventoryItemsParams"
										},
										"name": "AdminGetInventoryItemsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 763,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/index.d.ts",
											"qualifiedName": "AdminInventoryItemsListWithVariantsAndLocationLevelsRes"
										},
										"name": "AdminInventoryItemsListWithVariantsAndLocationLevelsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 764,
					"name": "updateLocationLevel",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 765,
							"name": "updateLocationLevel",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a location level's details for a given inventory item."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "the inventory item's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.inventoryItems.updateLocationLevel(inventoryItemId, locationId, {\n  stocked_quantity: 15,\n})\n.then(({ inventory_item }) => {\n  console.log(inventory_item.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 766,
									"name": "inventoryItemId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the inventory item that the location level belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 767,
									"name": "locationId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the location level to update."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 768,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the location level."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/update-location-level.d.ts",
											"qualifiedName": "AdminPostInventoryItemsItemLocationLevelsLevelReq"
										},
										"name": "AdminPostInventoryItemsItemLocationLevelsLevelReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 769,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the returned inventory item."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/update-location-level.d.ts",
											"qualifiedName": "AdminPostInventoryItemsItemLocationLevelsLevelParams"
										},
										"name": "AdminPostInventoryItemsItemLocationLevelsLevelParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 770,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/index.d.ts",
											"qualifiedName": "AdminInventoryItemsRes"
										},
										"name": "AdminInventoryItemsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 771,
					"name": "createLocationLevel",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 772,
							"name": "createLocationLevel",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a Location Level for a given Inventory Item."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "the inventory item's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.inventoryItems.createLocationLevel(inventoryItemId, {\n  location_id: \"sloc_123\",\n  stocked_quantity: 10,\n})\n.then(({ inventory_item }) => {\n  console.log(inventory_item.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 773,
									"name": "inventoryItemId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the inventory item that the location level belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 774,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The location level to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/create-location-level.d.ts",
											"qualifiedName": "AdminPostInventoryItemsItemLocationLevelsReq"
										},
										"name": "AdminPostInventoryItemsItemLocationLevelsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 775,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the returned inventory item."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/create-location-level.d.ts",
											"qualifiedName": "AdminPostInventoryItemsItemLocationLevelsParams"
										},
										"name": "AdminPostInventoryItemsItemLocationLevelsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 776,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/index.d.ts",
											"qualifiedName": "AdminInventoryItemsRes"
										},
										"name": "AdminInventoryItemsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 777,
					"name": "deleteLocationLevel",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 778,
							"name": "deleteLocationLevel",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a location level of an Inventory Item."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "the inventory item's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.inventoryItems.deleteLocationLevel(inventoryItemId, locationId)\n.then(({ inventory_item }) => {\n  console.log(inventory_item.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 779,
									"name": "inventoryItemId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the inventory item."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 780,
									"name": "locationId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the location level to delete."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 781,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/index.d.ts",
											"qualifiedName": "AdminInventoryItemsRes"
										},
										"name": "AdminInventoryItemsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 782,
					"name": "listLocationLevels",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 783,
							"name": "listLocationLevels",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of inventory levels of an inventory item. The inventory levels can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`location_id`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The inventory item's details and list of location levels."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.inventoryItems.listLocationLevels(inventoryItemId)\n.then(({ inventory_item }) => {\n  console.log(inventory_item.location_levels);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 784,
									"name": "inventoryItemId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the inventory item that the location levels belong to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 785,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters to apply on the retrieved location levels."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/list-location-levels.d.ts",
											"qualifiedName": "AdminGetInventoryItemsItemLocationLevelsParams"
										},
										"name": "AdminGetInventoryItemsItemLocationLevelsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 786,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/index.d.ts",
											"qualifiedName": "AdminInventoryItemsLocationLevelsRes"
										},
										"name": "AdminInventoryItemsLocationLevelsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 737,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 738,
							"name": "new AdminInventoryItemsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 739,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 736,
								"name": "AdminInventoryItemsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						737
					]
				},
				{
					"title": "Methods",
					"children": [
						740,
						745,
						751,
						755,
						760,
						764,
						771,
						777,
						782
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 787,
			"name": "AdminInvitesResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Invite API Routes](https://docs.medusajs.com/api/admin#invites). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.invites`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 438
					},
					{
						"kind": "text",
						"text": ".\n\nAn admin can invite new users to manage their team. This would allow new users to authenticate as admins and perform admin functionalities.\n\nRelated Guide: [How to manage invites](https://docs.medusajs.com/modules/users/admin/manage-invites)."
					}
				]
			},
			"children": [
				{
					"id": 791,
					"name": "accept",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 792,
							"name": "accept",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Accept an Invite. This will also delete the invite and create a new user that can log in and perform admin functionalities. \nThe user will have the email associated with the invite, and the password provided in the "
									},
									{
										"kind": "code",
										"text": "`payload`"
									},
									{
										"kind": "text",
										"text": " parameter."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves when the invite is accepted successfully."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.invites.accept({\n  token,\n  user: {\n    first_name: \"Brigitte\",\n    last_name: \"Collier\",\n    password: \"supersecret\"\n  }\n})\n.then(() => {\n  // successful\n})\n.catch(() => {\n  // an error occurred\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 793,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The user accepting the invite."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/invites/accept-invite.d.ts",
											"qualifiedName": "AdminPostInvitesInviteAcceptReq"
										},
										"name": "AdminPostInvitesInviteAcceptReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 794,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 795,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 796,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create an invite. This will generate a token associated with the invite and trigger an "
									},
									{
										"kind": "code",
										"text": "`invite.created`"
									},
									{
										"kind": "text",
										"text": " event. If you have a Notification Provider installed that handles this\nevent, a notification should be sent to the email associated with the invite to allow them to accept the invite."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves when the invite is created successfully."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.invites.create({\n  user: \"user@example.com\",\n  role: \"admin\"\n})\n.then(() => {\n  // successful\n})\n.catch(() => {\n  // an error occurred\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 797,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The invite to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
											"qualifiedName": "AdminPostInvitesPayload"
										},
										"name": "AdminPostInvitesPayload",
										"package": "@medusajs/medusa-js"
									}
								},
								{
									"id": 798,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 799,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 800,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete an invite. Only invites that weren't accepted can be deleted."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.invites.delete(inviteId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 801,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The invite's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 802,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 803,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 804,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of invites."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of invites."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.invites.list()\n.then(({ invites }) => {\n  console.log(invites.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 805,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/invites/index.d.ts",
											"qualifiedName": "AdminListInvitesRes"
										},
										"name": "AdminListInvitesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 806,
					"name": "resend",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 807,
							"name": "resend",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Resend an invite. This renews the expiry date by seven days and generates a new token for the invite. It also triggers the "
									},
									{
										"kind": "code",
										"text": "`invite.created`"
									},
									{
										"kind": "text",
										"text": " event, \nso if you have a Notification Provider installed that handles this event, a notification should be sent to the email associated with the \ninvite to allow them to accept the invite."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves when the invite is resent successfully."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.invites.resend(inviteId)\n.then(() => {\n  // successful\n})\n.catch(() => {\n  // an error occurred\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 808,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The invite's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 809,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 788,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 789,
							"name": "new AdminInvitesResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 790,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 787,
								"name": "AdminInvitesResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						788
					]
				},
				{
					"title": "Methods",
					"children": [
						791,
						795,
						799,
						803,
						806
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 810,
			"name": "AdminNotesResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Note API Routes](https://docs.medusajs.com/api/admin#notes). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.notes`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 438
					},
					{
						"kind": "text",
						"text": ".\n\nNotes are created by admins and can be associated with any resource. For example, an admin can add a note to an order for additional details or remarks."
					}
				]
			},
			"children": [
				{
					"id": 814,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 815,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a Note which can be associated with any resource."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the note's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.notes.create({\n  resource_id,\n  resource_type: \"order\",\n  value: \"We delivered this order\"\n})\n.then(({ note }) => {\n  console.log(note.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 816,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The note to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/notes/create-note.d.ts",
											"qualifiedName": "AdminPostNotesReq"
										},
										"name": "AdminPostNotesReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 817,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/notes/index.d.ts",
											"qualifiedName": "AdminNotesRes"
										},
										"name": "AdminNotesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 818,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 819,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a Note's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the note's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.notes.update(noteId, {\n value: \"We delivered this order\"\n})\n.then(({ note }) => {\n  console.log(note.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 820,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The note's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 821,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the note."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/notes/update-note.d.ts",
											"qualifiedName": "AdminPostNotesNoteReq"
										},
										"name": "AdminPostNotesNoteReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 822,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/notes/index.d.ts",
											"qualifiedName": "AdminNotesRes"
										},
										"name": "AdminNotesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 823,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 824,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a Note."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.notes.delete(noteId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 825,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The note's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 826,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 827,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 828,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a note's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the note's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.notes.retrieve(noteId)\n.then(({ note }) => {\n  console.log(note.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 829,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The note's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 830,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/notes/index.d.ts",
											"qualifiedName": "AdminNotesRes"
										},
										"name": "AdminNotesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 831,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 832,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of notes. The notes can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`resource_id`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The notes can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of notes with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list notes:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.notes.list()\n.then(({ notes, limit, offset, count }) => {\n  console.log(notes.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`50`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.notes.list({\n  limit,\n  offset\n})\n.then(({ notes, limit, offset, count }) => {\n  console.log(notes.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 833,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations applied on retrieved notes."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/notes/list-notes.d.ts",
											"qualifiedName": "AdminGetNotesParams"
										},
										"name": "AdminGetNotesParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 834,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/notes/index.d.ts",
											"qualifiedName": "AdminNotesListRes"
										},
										"name": "AdminNotesListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 811,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 812,
							"name": "new AdminNotesResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 813,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 810,
								"name": "AdminNotesResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						811
					]
				},
				{
					"title": "Methods",
					"children": [
						814,
						818,
						823,
						827,
						831
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 835,
			"name": "AdminNotificationsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Notification API Routes](https://docs.medusajs.com/api/admin#notifications). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.notifications`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 438
					},
					{
						"kind": "text",
						"text": ".\n\nNotifications are sent to customers to inform them of new updates. For example, a notification can be sent to the customer when their order is place or its state is updated.\nThe notification's type, such as an email or SMS, is determined by the notification provider installed on the Medusa backend."
					}
				]
			},
			"children": [
				{
					"id": 839,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 840,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of notifications. The notifications can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`event_name`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`resource_type`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter.\nThe notifications can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of notifications with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list notifications:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.notifications.list()\n.then(({ notifications }) => {\n  console.log(notifications.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the notifications:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.notifications.list({\n  expand: \"provider\"\n})\n.then(({ notifications }) => {\n  console.log(notifications.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`50`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.notifications.list({\n  expand: \"provider\",\n  limit,\n  offset\n})\n.then(({ notifications }) => {\n  console.log(notifications.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 841,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations applied to the retrieved notifications."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/notifications/list-notifications.d.ts",
											"qualifiedName": "AdminGetNotificationsParams"
										},
										"name": "AdminGetNotificationsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 842,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/notifications/index.d.ts",
											"qualifiedName": "AdminNotificationsListRes"
										},
										"name": "AdminNotificationsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 843,
					"name": "resend",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 844,
							"name": "resend",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Resend a previously sent notifications, with the same data but optionally to a different address."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the notification's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.notifications.resend(notificationId)\n.then(({ notification }) => {\n  console.log(notification.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 845,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The notification's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 846,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The details necessary to resend the notification."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/notifications/resend-notification.d.ts",
											"qualifiedName": "AdminPostNotificationsNotificationResendReq"
										},
										"name": "AdminPostNotificationsNotificationResendReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 847,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/notifications/index.d.ts",
											"qualifiedName": "AdminNotificationsRes"
										},
										"name": "AdminNotificationsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 836,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 837,
							"name": "new AdminNotificationsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 838,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 835,
								"name": "AdminNotificationsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						836
					]
				},
				{
					"title": "Methods",
					"children": [
						839,
						843
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 979,
			"name": "AdminOrderEditsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Order Edit API Routes](https://docs.medusajs.com/api/admin#order-edits). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.orderEdits`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 438
					},
					{
						"kind": "text",
						"text": ".\n\nAn admin can edit an order to remove, add, or update an item's quantity. When an admin edits an order, they're stored as an "
					},
					{
						"kind": "code",
						"text": "`OrderEdit`"
					},
					{
						"kind": "text",
						"text": ".\n\nRelated Guide: [How to edit an order](https://docs.medusajs.com/modules/orders/admin/edit-order)."
					}
				]
			},
			"children": [
				{
					"id": 983,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 984,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve an order edit's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order edit's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "A simple example that retrieves an order edit by its ID:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.retrieve(orderEditId)\n.then(({ order_edit }) => {\n  console.log(order_edit.id)\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.retrieve(orderEditId, {\n  expand: \"order\"\n})\n.then(({ order_edit }) => {\n  console.log(order_edit.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 985,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order edit."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 986,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved order edit."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/get-order-edit.d.ts",
											"qualifiedName": "GetOrderEditsOrderEditParams"
										},
										"name": "GetOrderEditsOrderEditParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 987,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/index.d.ts",
											"qualifiedName": "AdminOrderEditsRes"
										},
										"name": "AdminOrderEditsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 988,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 989,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of order edits. The order edits can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`order_id`"
									},
									{
										"kind": "text",
										"text": " passed to the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The order edits can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of order edits with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list order edits:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.list()\n.then(({ order_edits, count, limit, offset }) => {\n  console.log(order_edits.length)\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the order edits:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.list({\n  expand: \"order\"\n})\n.then(({ order_edits, count, limit, offset }) => {\n  console.log(order_edits.length)\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`50`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.list({\n  expand: \"order\",\n  limit,\n  offset\n})\n.then(({ order_edits, count, limit, offset }) => {\n  console.log(order_edits.length)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 990,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations applied to retrieved order edits."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/list-order-edit.d.ts",
											"qualifiedName": "GetOrderEditsParams"
										},
										"name": "GetOrderEditsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 991,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/index.d.ts",
											"qualifiedName": "AdminOrderEditsListRes"
										},
										"name": "AdminOrderEditsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 992,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 993,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create an order edit."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order edit's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.create({ orderId })\n.then(({ order_edit }) => {\n  console.log(order_edit.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 994,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The order edit to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/create-order-edit.d.ts",
											"qualifiedName": "AdminPostOrderEditsReq"
										},
										"name": "AdminPostOrderEditsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 995,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/index.d.ts",
											"qualifiedName": "AdminOrderEditsRes"
										},
										"name": "AdminOrderEditsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 996,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 997,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update an Order Edit's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order edit's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.update(orderEditId, {\n  internal_note: \"internal reason XY\"\n})\n.then(({ order_edit }) => {\n  console.log(order_edit.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 998,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order edit."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 999,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in an order edit."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/update-order-edit.d.ts",
											"qualifiedName": "AdminPostOrderEditsOrderEditReq"
										},
										"name": "AdminPostOrderEditsOrderEditReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1000,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/index.d.ts",
											"qualifiedName": "AdminOrderEditsRes"
										},
										"name": "AdminOrderEditsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1001,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1002,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete an order edit. Only order edits that have the status "
									},
									{
										"kind": "code",
										"text": "`created`"
									},
									{
										"kind": "text",
										"text": " can be deleted."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.delete(orderEditId)\n.then(({ id, object, deleted }) => {\n  console.log(id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1003,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order edit."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1004,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1005,
					"name": "addLineItem",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1006,
							"name": "addLineItem",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a line item change in the order edit that indicates adding an item in the original order. The item will not be added to the original order until the order edit is\nconfirmed."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order edit's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.addLineItem(orderEditId, {\n  variant_id,\n  quantity\n})\n.then(({ order_edit }) => {\n   console.log(order_edit.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1007,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order edit to add the line item change to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1008,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The line item change to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/add-line-item.d.ts",
											"qualifiedName": "AdminPostOrderEditsEditLineItemsReq"
										},
										"name": "AdminPostOrderEditsEditLineItemsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1009,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/index.d.ts",
											"qualifiedName": "AdminOrderEditsRes"
										},
										"name": "AdminOrderEditsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1010,
					"name": "deleteItemChange",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1011,
							"name": "deleteItemChange",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a line item change that indicates the addition, deletion, or update of a line item in the original order."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.deleteItemChange(orderEdit_id, itemChangeId)\n.then(({ id, object, deleted }) => {\n  console.log(id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1012,
									"name": "orderEditId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order edit."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1013,
									"name": "itemChangeId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the line item change."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1014,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/index.d.ts",
											"qualifiedName": "AdminOrderEditItemChangeDeleteRes"
										},
										"name": "AdminOrderEditItemChangeDeleteRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1015,
					"name": "requestConfirmation",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1016,
							"name": "requestConfirmation",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Request customer confirmation of an order edit. This would emit the event "
									},
									{
										"kind": "code",
										"text": "`order-edit.requested`"
									},
									{
										"kind": "text",
										"text": " which Notification Providers listen to and send\na notification to the customer about the order edit."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order edit's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.requestConfirmation(orderEditId)\n.then({ order_edit }) => {\n  console.log(order_edit.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1017,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order edit."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1018,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/index.d.ts",
											"qualifiedName": "AdminOrderEditsRes"
										},
										"name": "AdminOrderEditsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1019,
					"name": "cancel",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1020,
							"name": "cancel",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Cancel an order edit."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order edit's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.cancel(orderEditId)\n.then(({ order_edit }) => {\n  console.log(order_edit.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1021,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order edit to cancel."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1022,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/index.d.ts",
											"qualifiedName": "AdminOrderEditsRes"
										},
										"name": "AdminOrderEditsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1023,
					"name": "confirm",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1024,
							"name": "confirm",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Confirm an order edit. This will reflect the changes in the order edit on the associated order."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order edit's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.confirm(orderEditId)\n.then(({ order_edit }) => {\n  console.log(order_edit.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1025,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order edit to confirm."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1026,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/index.d.ts",
											"qualifiedName": "AdminOrderEditsRes"
										},
										"name": "AdminOrderEditsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1027,
					"name": "updateLineItem",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1028,
							"name": "updateLineItem",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create or update a line item change in the order edit that indicates addition, deletion, or update of a line item into an original order. Line item changes\nare only reflected on the original order after the order edit is confirmed."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order edit's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.updateLineItem(orderEditId, lineItemId, {\n  quantity: 5\n})\n.then(({ order_edit }) => {\n  console.log(order_edit.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1029,
									"name": "orderEditId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order edit that the line item belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1030,
									"name": "itemId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the line item to create or update its line item change."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1031,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The creation or update of the line item change."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/update-order-edit-line-item.d.ts",
											"qualifiedName": "AdminPostOrderEditsEditLineItemsLineItemReq"
										},
										"name": "AdminPostOrderEditsEditLineItemsLineItemReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1032,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/index.d.ts",
											"qualifiedName": "AdminOrderEditsRes"
										},
										"name": "AdminOrderEditsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1033,
					"name": "removeLineItem",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1034,
							"name": "removeLineItem",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a line item change in the order edit that indicates deleting an item in the original order. The item in the original order will not be deleted until the order edit is\nconfirmed."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order edit's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.removeLineItem(orderEditId, lineItemId)\n.then(({ order_edit }) => {\n  console.log(order_edit.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1035,
									"name": "orderEditId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order edit that the line item change belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1036,
									"name": "itemId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the line item."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1037,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/index.d.ts",
											"qualifiedName": "AdminOrderEditsRes"
										},
										"name": "AdminOrderEditsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 980,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 981,
							"name": "new AdminOrderEditsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 982,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 979,
								"name": "AdminOrderEditsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						980
					]
				},
				{
					"title": "Methods",
					"children": [
						983,
						988,
						992,
						996,
						1001,
						1005,
						1010,
						1015,
						1019,
						1023,
						1027,
						1033
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 848,
			"name": "AdminOrdersResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Order API Routes](https://docs.medusajs.com/api/admin#orders). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.orders`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 438
					},
					{
						"kind": "text",
						"text": ".\n\nOrders are purchases made by customers, typically through a storefront using "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "CartsResource",
						"target": 40
					},
					{
						"kind": "text",
						"text": ". Draft orders created by the admin are also transformed to an Order once the payment is captured.\nManaging orders include managing fulfillment, payment, claims, reservations, and more.\n\nRelated Guide: [How to manage orders](https://docs.medusajs.com/modules/orders/admin/manage-orders)."
					}
				]
			},
			"children": [
				{
					"id": 852,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 853,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update an order's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.update(orderId, {\n  email: \"user@example.com\"\n})\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 854,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The order's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 855,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the order."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/update-order.d.ts",
											"qualifiedName": "AdminPostOrdersOrderReq"
										},
										"name": "AdminPostOrdersOrderReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 856,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 857,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 858,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve an order's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "A simple example that retrieves an order by its ID:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.retrieve(orderId)\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.retrieve(orderId, {\n  expand: \"customer\"\n})\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 859,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The order's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 860,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved order."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "FindParams"
										},
										"name": "FindParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 861,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 862,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 863,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of orders. The orders can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`status`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`display_id`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The order can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of orders with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list orders:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.list()\n.then(({ orders, limit, offset, count }) => {\n  console.log(orders.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the orders:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.list({\n  expand: \"customers\"\n})\n.then(({ orders, limit, offset, count }) => {\n  console.log(orders.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`50`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.list({\n  expand: \"customers\",\n  limit,\n  offset\n})\n.then(({ orders, limit, offset, count }) => {\n  console.log(orders.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 864,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations applied on the retrieved orders."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/list-orders.d.ts",
											"qualifiedName": "AdminGetOrdersParams"
										},
										"name": "AdminGetOrdersParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 865,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersListRes"
										},
										"name": "AdminOrdersListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 866,
					"name": "complete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 867,
							"name": "complete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Complete an order and change its status. A canceled order can't be completed."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.complete(orderId)\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 868,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The order's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 869,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 870,
					"name": "capturePayment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 871,
							"name": "capturePayment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Capture all the payments associated with an order. The payment of canceled orders can't be captured."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.capturePayment(orderId)\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 872,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order whose payments should be captured."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 873,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 874,
					"name": "refundPayment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 875,
							"name": "refundPayment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Refund an amount for an order. The amount must be less than or equal the "
									},
									{
										"kind": "code",
										"text": "`refundable_amount`"
									},
									{
										"kind": "text",
										"text": " of the order."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.refundPayment(orderId, {\n  amount: 1000,\n  reason: \"Do not like it\"\n})\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 876,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order whose customer should be refunded."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 877,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The refund's details."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/refund-payment.d.ts",
											"qualifiedName": "AdminPostOrdersOrderRefundsReq"
										},
										"name": "AdminPostOrdersOrderRefundsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 878,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 879,
					"name": "createFulfillment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 880,
							"name": "createFulfillment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a Fulfillment of an Order using the fulfillment provider, and change the order's fulfillment status to either "
									},
									{
										"kind": "code",
										"text": "`partially_fulfilled`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`fulfilled`"
									},
									{
										"kind": "text",
										"text": ", depending on\nwhether all the items were fulfilled."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.createFulfillment(orderId, {\n  items: [\n    {\n      item_id,\n      quantity: 1\n    }\n  ]\n})\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 881,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order that the fulfillment belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 882,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The fulfillment to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/create-fulfillment.d.ts",
											"qualifiedName": "AdminPostOrdersOrderFulfillmentsReq"
										},
										"name": "AdminPostOrdersOrderFulfillmentsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 883,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 884,
					"name": "cancelFulfillment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 885,
							"name": "cancelFulfillment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Cancel an order's fulfillment and change its fulfillment status to "
									},
									{
										"kind": "code",
										"text": "`canceled`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.cancelFulfillment(orderId, fulfillmentId)\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 886,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order that the fulfillment belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 887,
									"name": "fulfillmentId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The fulfillment's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 888,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 889,
					"name": "cancelSwapFulfillment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 890,
							"name": "cancelSwapFulfillment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Cancel a swap's fulfillment and change its fulfillment status to "
									},
									{
										"kind": "code",
										"text": "`canceled`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.cancelSwapFulfillment(orderId, swapId, fulfillmentId)\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 891,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order that the swap is associated with."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 892,
									"name": "swapId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the swap the fulfillment belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 893,
									"name": "fulfillmentId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The fulfillment's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 894,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 895,
					"name": "cancelClaimFulfillment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 896,
							"name": "cancelClaimFulfillment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Cancel a claim's fulfillment and change its fulfillment status to "
									},
									{
										"kind": "code",
										"text": "`canceled`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.cancelClaimFulfillment(orderId, claimId, fulfillmentId)\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 897,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order that the claim is associated with."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 898,
									"name": "claimId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The claim's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 899,
									"name": "fulfillmentId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The fulfillment's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 900,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 901,
					"name": "createShipment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 902,
							"name": "createShipment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a shipment and mark a fulfillment as shipped. This changes the order's fulfillment status to either "
									},
									{
										"kind": "code",
										"text": "`partially_shipped`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`shipped`"
									},
									{
										"kind": "text",
										"text": ", depending on\nwhether all the items were shipped."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.createShipment(order_id, {\n  fulfillment_id\n})\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 903,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 904,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipment to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/create-shipment.d.ts",
											"qualifiedName": "AdminPostOrdersOrderShipmentReq"
										},
										"name": "AdminPostOrdersOrderShipmentReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 905,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 906,
					"name": "requestReturn",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 907,
							"name": "requestReturn",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Request and create a return for items in an order. If the return shipping method is specified, it will be automatically fulfilled."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details. You can access the return under the "
											},
											{
												"kind": "code",
												"text": "`returns`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.requestReturn(orderId, {\n  items: [\n    {\n      item_id,\n      quantity: 1\n    }\n  ]\n})\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 908,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The order's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 909,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The return to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/request-return.d.ts",
											"qualifiedName": "AdminPostOrdersOrderReturnsReq"
										},
										"name": "AdminPostOrdersOrderReturnsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 910,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 911,
					"name": "cancel",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 912,
							"name": "cancel",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Cancel an order and change its status. This will also cancel any associated fulfillments and payments, and it may fail if the payment or fulfillment Provider \nis unable to cancel the payment/fulfillment."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.cancel(orderId)\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 913,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The order's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 914,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 915,
					"name": "addShippingMethod",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 916,
							"name": "addShippingMethod",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add a shipping method to an order. If another shipping method exists with the same shipping profile, the previous shipping method will be replaced."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.addShippingMethod(orderId, {\n  price: 1000,\n  option_id\n})\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 917,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The order's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 918,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipping method to be added."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/add-shipping-method.d.ts",
											"qualifiedName": "AdminPostOrdersOrderShippingMethodsReq"
										},
										"name": "AdminPostOrdersOrderShippingMethodsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 919,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 920,
					"name": "archive",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 921,
							"name": "archive",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Archive an order and change its status."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.archive(orderId)\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 922,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The order's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 923,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 924,
					"name": "createSwap",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 925,
							"name": "createSwap",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a swap for an order. This includes creating a return that is associated with the swap."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details. You can access the swap under the "
											},
											{
												"kind": "code",
												"text": "`swaps`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.createSwap(orderId, {\n  return_items: [\n    {\n      item_id,\n      quantity: 1\n    }\n  ]\n})\n.then(({ order }) => {\n  console.log(order.swaps);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 926,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The order's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 927,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The swap to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/create-swap.d.ts",
											"qualifiedName": "AdminPostOrdersOrderSwapsReq"
										},
										"name": "AdminPostOrdersOrderSwapsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 928,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 929,
					"name": "cancelSwap",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 930,
							"name": "cancelSwap",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Cancel a swap and change its status."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details. You can access the swap under the "
											},
											{
												"kind": "code",
												"text": "`swaps`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.cancelSwap(orderId, swapId)\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 931,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order that the swap belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 932,
									"name": "swapId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The swap's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 933,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 934,
					"name": "fulfillSwap",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 935,
							"name": "fulfillSwap",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a Fulfillment for a Swap and change its fulfillment status to "
									},
									{
										"kind": "code",
										"text": "`fulfilled`"
									},
									{
										"kind": "text",
										"text": ". If it requires any additional actions,\nits fulfillment status may change to "
									},
									{
										"kind": "code",
										"text": "`requires_action`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details. You can access the swap under the "
											},
											{
												"kind": "code",
												"text": "`swaps`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.fulfillSwap(orderId, swapId, {\n  no_notification: true,\n})\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 936,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order that the swap belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 937,
									"name": "swapId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The swap's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 938,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The fulfillment to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/fulfill-swap.d.ts",
											"qualifiedName": "AdminPostOrdersOrderSwapsSwapFulfillmentsReq"
										},
										"name": "AdminPostOrdersOrderSwapsSwapFulfillmentsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 939,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 940,
					"name": "createSwapShipment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 941,
							"name": "createSwapShipment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a shipment for a swap and mark its fulfillment as shipped. This changes the swap's fulfillment status to either "
									},
									{
										"kind": "code",
										"text": "`shipped`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`partially_shipped`"
									},
									{
										"kind": "text",
										"text": ", depending on\nwhether all the items were shipped."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details. You can access the swap under the "
											},
											{
												"kind": "code",
												"text": "`swaps`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.createSwapShipment(orderId, swapId, {\n  fulfillment_id\n})\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 942,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order that the swap belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 943,
									"name": "swapId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The swap's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 944,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipment to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/create-swap-shipment.d.ts",
											"qualifiedName": "AdminPostOrdersOrderSwapsSwapShipmentsReq"
										},
										"name": "AdminPostOrdersOrderSwapsSwapShipmentsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 945,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 946,
					"name": "processSwapPayment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 947,
							"name": "processSwapPayment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Process a swap's payment either by refunding or issuing a payment. This depends on the "
									},
									{
										"kind": "code",
										"text": "`difference_due`"
									},
									{
										"kind": "text",
										"text": " of the swap. If "
									},
									{
										"kind": "code",
										"text": "`difference_due`"
									},
									{
										"kind": "text",
										"text": " is negative, the amount is refunded.\nIf "
									},
									{
										"kind": "code",
										"text": "`difference_due`"
									},
									{
										"kind": "text",
										"text": " is positive, the amount is captured."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details. You can access the swap under the "
											},
											{
												"kind": "code",
												"text": "`swaps`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.processSwapPayment(orderId, swapId)\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 948,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order that the swap belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 949,
									"name": "swapId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The swap's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 950,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 951,
					"name": "createClaim",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 952,
							"name": "createClaim",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a claim for an order. If a return shipping method is specified, a return will also be created and associated with the claim. If the claim's type is "
									},
									{
										"kind": "code",
										"text": "`refund`"
									},
									{
										"kind": "text",
										"text": ",\nthe refund is processed as well."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details. You can access the claim under the "
											},
											{
												"kind": "code",
												"text": "`claims`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.createClaim(orderId, {\n  type: 'refund',\n  claim_items: [\n    {\n      item_id,\n      quantity: 1\n    }\n  ]\n})\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 953,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The order's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 954,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The claim to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/create-claim.d.ts",
											"qualifiedName": "AdminPostOrdersOrderClaimsReq"
										},
										"name": "AdminPostOrdersOrderClaimsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 955,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 956,
					"name": "cancelClaim",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 957,
							"name": "cancelClaim",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Cancel a claim and change its status. A claim can't be canceled if it has a refund, if its fulfillments haven't been canceled, of if its associated return hasn't been canceled."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details. You can access the swap under the "
											},
											{
												"kind": "code",
												"text": "`claims`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.cancelClaim(orderId, claimId)\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 958,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order that the claim belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 959,
									"name": "claimId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The claim's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 960,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 961,
					"name": "updateClaim",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 962,
							"name": "updateClaim",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a claim's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details. You can access the claims under the "
											},
											{
												"kind": "code",
												"text": "`claims`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.updateClaim(orderId, claimId, {\n  no_notification: true\n})\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 963,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order that the claim belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 964,
									"name": "claimId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The claim's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 965,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the claim."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/update-claim.d.ts",
											"qualifiedName": "AdminPostOrdersOrderClaimsClaimReq"
										},
										"name": "AdminPostOrdersOrderClaimsClaimReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 966,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 967,
					"name": "fulfillClaim",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 968,
							"name": "fulfillClaim",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a Fulfillment for a Claim, and change its fulfillment status to "
									},
									{
										"kind": "code",
										"text": "`partially_fulfilled`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`fulfilled`"
									},
									{
										"kind": "text",
										"text": " depending on whether all the items were fulfilled.\nIt may also change the status to "
									},
									{
										"kind": "code",
										"text": "`requires_action`"
									},
									{
										"kind": "text",
										"text": " if any actions are required."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details. You can access the swap under the "
											},
											{
												"kind": "code",
												"text": "`claims`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.fulfillClaim(orderId, claimId, {\n})\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 969,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order that the claim belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 970,
									"name": "claimId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The claim's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 971,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The fulfillment to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/fulfill-claim.d.ts",
											"qualifiedName": "AdminPostOrdersOrderClaimsClaimFulfillmentsReq"
										},
										"name": "AdminPostOrdersOrderClaimsClaimFulfillmentsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 972,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 973,
					"name": "createClaimShipment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 974,
							"name": "createClaimShipment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a shipment for the claim and mark its fulfillment as shipped. If the shipment is created successfully, this changes the claim's fulfillment status\nto either "
									},
									{
										"kind": "code",
										"text": "`partially_shipped`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`shipped`"
									},
									{
										"kind": "text",
										"text": ", depending on whether all the items were shipped."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details. You can access the swap under the "
											},
											{
												"kind": "code",
												"text": "`claims`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.createClaimShipment(orderId, claimId, {\n  fulfillment_id\n})\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 975,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order that the claim belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 976,
									"name": "claimId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The claim's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 977,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipment to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/create-claim-shipment.d.ts",
											"qualifiedName": "AdminPostOrdersOrderClaimsClaimShipmentsReq"
										},
										"name": "AdminPostOrdersOrderClaimsClaimShipmentsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 978,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 849,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 850,
							"name": "new AdminOrdersResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 851,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 848,
								"name": "AdminOrdersResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						849
					]
				},
				{
					"title": "Methods",
					"children": [
						852,
						857,
						862,
						866,
						870,
						874,
						879,
						884,
						889,
						895,
						901,
						906,
						911,
						915,
						920,
						924,
						929,
						934,
						940,
						946,
						951,
						956,
						961,
						967,
						973
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 1639,
			"name": "AdminPaymentCollectionsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Payment Collection API Routes](https://docs.medusajs.com/api/admin#payment-collections). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.paymentCollections`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 438
					},
					{
						"kind": "text",
						"text": ".\n\nA payment collection is useful for managing additional payments, such as for Order Edits, or installment payments."
					}
				]
			},
			"children": [
				{
					"id": 1643,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1644,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a Payment Collection's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the payment collection's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "A simple example that retrieves a payment collection by its ID:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.paymentCollections.retrieve(paymentCollectionId)\n.then(({ payment_collection }) => {\n    console.log(payment_collection.id)\n  })\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.paymentCollections.retrieve(paymentCollectionId, {\n  expand: \"currency\"\n})\n.then(({ payment_collection }) => {\n  console.log(payment_collection.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1645,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1646,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved payment collection."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/payment-collections/get-payment-collection.d.ts",
											"qualifiedName": "AdminGetPaymentCollectionsParams"
										},
										"name": "AdminGetPaymentCollectionsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1647,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/payment-collections/index.d.ts",
											"qualifiedName": "AdminPaymentCollectionsRes"
										},
										"name": "AdminPaymentCollectionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1648,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1649,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a payment collection's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the payment collection's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.paymentCollections.update(paymentCollectionId, {\n  description\n})\n.then(({ payment_collection }) => {\n  console.log(payment_collection.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1650,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1651,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the payment collection."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/payment-collections/update-payment-collection.d.ts",
											"qualifiedName": "AdminUpdatePaymentCollectionsReq"
										},
										"name": "AdminUpdatePaymentCollectionsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1652,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/payment-collections/index.d.ts",
											"qualifiedName": "AdminPaymentCollectionsRes"
										},
										"name": "AdminPaymentCollectionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1653,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1654,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a payment collection. Only payment collections with the statuses "
									},
									{
										"kind": "code",
										"text": "`canceled`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`not_paid`"
									},
									{
										"kind": "text",
										"text": " can be deleted."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.paymentCollections.delete(paymentCollectionId)\n.then(({ id, object, deleted }) => {\n  console.log(id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1655,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1656,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/payment-collections/index.d.ts",
											"qualifiedName": "AdminPaymentCollectionDeleteRes"
										},
										"name": "AdminPaymentCollectionDeleteRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1657,
					"name": "markAsAuthorized",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1658,
							"name": "markAsAuthorized",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Set the status of a payment collection as "
									},
									{
										"kind": "code",
										"text": "`authorized`"
									},
									{
										"kind": "text",
										"text": ". This will also change the "
									},
									{
										"kind": "code",
										"text": "`authorized_amount`"
									},
									{
										"kind": "text",
										"text": " of the payment collection."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the payment collection's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.paymentCollections.markAsAuthorized(paymentCollectionId)\n.then(({ payment_collection }) => {\n  console.log(payment_collection.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1659,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1660,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/payment-collections/index.d.ts",
											"qualifiedName": "AdminPaymentCollectionsRes"
										},
										"name": "AdminPaymentCollectionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1640,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 1641,
							"name": "new AdminPaymentCollectionsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 1642,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1639,
								"name": "AdminPaymentCollectionsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						1640
					]
				},
				{
					"title": "Methods",
					"children": [
						1643,
						1648,
						1653,
						1657
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 1661,
			"name": "AdminPaymentsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Payment API Routes](https://docs.medusajs.com/api/admin#payments). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.payments`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 438
					},
					{
						"kind": "text",
						"text": ".\n\nA payment can be related to an order, swap, return, or more. It can be captured or refunded."
					}
				]
			},
			"children": [
				{
					"id": 1665,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1666,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a payment's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the payment's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.payments.retrieve(paymentId)\n.then(({ payment }) => {\n  console.log(payment.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1667,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The payment's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1668,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved payment."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/payments/get-payment.d.ts",
											"qualifiedName": "GetPaymentsParams"
										},
										"name": "GetPaymentsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1669,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/payments/index.d.ts",
											"qualifiedName": "AdminPaymentRes"
										},
										"name": "AdminPaymentRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1670,
					"name": "capturePayment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1671,
							"name": "capturePayment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Capture a payment."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the payment's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.payments.capturePayment(paymentId)\n.then(({ payment }) => {\n  console.log(payment.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1672,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The payment's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1673,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/payments/index.d.ts",
											"qualifiedName": "AdminPaymentRes"
										},
										"name": "AdminPaymentRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1674,
					"name": "refundPayment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1675,
							"name": "refundPayment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Refund a payment. The payment must be captured first."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the refund's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { RefundReason } from \"@medusajs/medusa\";\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.payments.refundPayment(paymentId, {\n  amount: 1000,\n  reason: RefundReason.RETURN,\n  note: \"Do not like it\",\n})\n.then(({ refund }) => {\n  console.log(refund.amount);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1676,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The payment's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1677,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The refund to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/payments/refund-payment.d.ts",
											"qualifiedName": "AdminPostPaymentRefundsReq"
										},
										"name": "AdminPostPaymentRefundsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1678,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/payments/index.d.ts",
											"qualifiedName": "AdminRefundRes"
										},
										"name": "AdminRefundRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1662,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 1663,
							"name": "new AdminPaymentsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 1664,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1661,
								"name": "AdminPaymentsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						1662
					]
				},
				{
					"title": "Methods",
					"children": [
						1665,
						1670,
						1674
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 1038,
			"name": "AdminPriceListResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Price List API Routes](https://docs.medusajs.com/api/admin#price-lists). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.priceLists`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 438
					},
					{
						"kind": "text",
						"text": ".\n\nA price list are special prices applied to products based on a set of conditions, such as customer group.\n\nRelated Guide: [How to manage price lists](https://docs.medusajs.com/modules/price-lists/admin/manage-price-lists)."
					}
				]
			},
			"children": [
				{
					"id": 1042,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1043,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a price list."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the price list details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nmedusa.admin.priceLists.create({\n  name: \"New Price List\",\n  description: \"A new price list\",\n  type: PriceListType.SALE,\n  prices: [\n    {\n      amount: 1000,\n      variant_id,\n      currency_code: \"eur\"\n    }\n  ]\n})\n.then(({ price_list }) => {\n  console.log(price_list.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1044,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The price list to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/create-price-list.d.ts",
											"qualifiedName": "AdminPostPriceListsPriceListReq"
										},
										"name": "AdminPostPriceListsPriceListReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1045,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/index.d.ts",
											"qualifiedName": "AdminPriceListRes"
										},
										"name": "AdminPriceListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1046,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1047,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a price list's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the price list details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.priceLists.update(priceListId, {\n  name: \"New Price List\"\n})\n.then(({ price_list }) => {\n  console.log(price_list.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1048,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the price list."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1049,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the price list."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/update-price-list.d.ts",
											"qualifiedName": "AdminPostPriceListsPriceListPriceListReq"
										},
										"name": "AdminPostPriceListsPriceListPriceListReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1050,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/index.d.ts",
											"qualifiedName": "AdminPriceListRes"
										},
										"name": "AdminPriceListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1051,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1052,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a price list and its associated prices."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.priceLists.delete(priceListId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1053,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the price list."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1054,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1055,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1056,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a price list's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the price list details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.priceLists.retrieve(priceListId)\n.then(({ price_list }) => {\n  console.log(price_list.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1057,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the price list."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1058,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/index.d.ts",
											"qualifiedName": "AdminPriceListRes"
										},
										"name": "AdminPriceListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1059,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1060,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of price lists. The price lists can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`status`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The price lists can also be sorted or paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of price lists with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list price lists:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.priceLists.list()\n.then(({ price_lists, limit, offset, count }) => {\n  console.log(price_lists.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the price lists:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.priceLists.list({\n  expand: \"prices\"\n})\n.then(({ price_lists, limit, offset, count }) => {\n  console.log(price_lists.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`10`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.priceLists.list({\n  expand: \"prices\",\n  limit,\n  offset\n})\n.then(({ price_lists, limit, offset, count }) => {\n  console.log(price_lists.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1061,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved price lists."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/list-price-lists.d.ts",
											"qualifiedName": "AdminGetPriceListPaginationParams"
										},
										"name": "AdminGetPriceListPaginationParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1062,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/index.d.ts",
											"qualifiedName": "AdminPriceListsListRes"
										},
										"name": "AdminPriceListsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1063,
					"name": "listProducts",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1064,
							"name": "listProducts",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a price list's products. The products can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`status`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The products can also be sorted or paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of products with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list products in a price list:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.priceLists.listProducts(priceListId)\n.then(({ products, limit, offset, count }) => {\n  console.log(products.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the products:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.priceLists.listProducts(priceListId, {\n  expand: \"variants\"\n})\n.then(({ products, limit, offset, count }) => {\n  console.log(products.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`50`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.priceLists.listProducts(priceListId, {\n  expand: \"variants\",\n  limit,\n  offset\n})\n.then(({ products, limit, offset, count }) => {\n  console.log(products.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1065,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the price list."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1066,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations applied on the retrieved products."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/list-price-list-products.d.ts",
											"qualifiedName": "AdminGetPriceListsPriceListProductsParams"
										},
										"name": "AdminGetPriceListsPriceListProductsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1067,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/index.d.ts",
											"qualifiedName": "AdminPriceListsProductsListRes"
										},
										"name": "AdminPriceListsProductsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1068,
					"name": "addPrices",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1069,
							"name": "addPrices",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add or update a list of prices in a price list."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the price list's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.priceLists.addPrices(priceListId, {\n  prices: [\n    {\n      amount: 1000,\n      variant_id,\n      currency_code: \"eur\"\n    }\n  ]\n})\n.then(({ price_list }) => {\n  console.log(price_list.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1070,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the price list."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1071,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The details of prices to add or update."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/add-prices-batch.d.ts",
											"qualifiedName": "AdminPostPriceListPricesPricesReq"
										},
										"name": "AdminPostPriceListPricesPricesReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1072,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/index.d.ts",
											"qualifiedName": "AdminPriceListRes"
										},
										"name": "AdminPriceListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1073,
					"name": "deletePrices",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1074,
							"name": "deletePrices",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a list of prices in a price list"
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.priceLists.deletePrices(priceListId, {\n  price_ids: [\n    price_id\n  ]\n})\n.then(({ ids, object, deleted }) => {\n  console.log(ids.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1075,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the price list."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1076,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The prices to delete."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/delete-prices-batch.d.ts",
											"qualifiedName": "AdminDeletePriceListPricesPricesReq"
										},
										"name": "AdminDeletePriceListPricesPricesReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1077,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/index.d.ts",
											"qualifiedName": "AdminPriceListDeleteBatchRes"
										},
										"name": "AdminPriceListDeleteBatchRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1078,
					"name": "deleteProductPrices",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1079,
							"name": "deleteProductPrices",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete all the prices related to a specific product in a price list."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.priceLists.deleteProductPrices(priceListId, productId)\n.then(({ ids, object, deleted }) => {\n  console.log(ids.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1080,
									"name": "priceListId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the price list."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1081,
									"name": "productId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1082,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/index.d.ts",
											"qualifiedName": "AdminPriceListDeleteBatchRes"
										},
										"name": "AdminPriceListDeleteBatchRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1083,
					"name": "deleteVariantPrices",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1084,
							"name": "deleteVariantPrices",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete all the prices related to a specific product variant in a price list."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.priceLists.deleteVariantPrices(priceListId, variantId)\n.then(({ ids, object, deleted }) => {\n  console.log(ids);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1085,
									"name": "priceListId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the price list."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1086,
									"name": "variantId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product variant."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1087,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/index.d.ts",
											"qualifiedName": "AdminPriceListDeleteBatchRes"
										},
										"name": "AdminPriceListDeleteBatchRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1088,
					"name": "deleteProductsPrices",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1089,
							"name": "deleteProductsPrices",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete all the prices associated with multiple products in a price list."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.priceLists.deleteProductsPrices(priceListId, {\n  product_ids: [\n    productId1,\n    productId2,\n  ]\n})\n.then(({ ids, object, deleted }) => {\n  console.log(ids.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1090,
									"name": "priceListId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the price list."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1091,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The products whose prices should be deleted."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/delete-products-prices-batch.d.ts",
											"qualifiedName": "AdminDeletePriceListsPriceListProductsPricesBatchReq"
										},
										"name": "AdminDeletePriceListsPriceListProductsPricesBatchReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1092,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/index.d.ts",
											"qualifiedName": "AdminPriceListDeleteBatchRes"
										},
										"name": "AdminPriceListDeleteBatchRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1039,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 1040,
							"name": "new AdminPriceListResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 1041,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1038,
								"name": "AdminPriceListResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						1039
					]
				},
				{
					"title": "Methods",
					"children": [
						1042,
						1046,
						1051,
						1055,
						1059,
						1063,
						1068,
						1073,
						1078,
						1083,
						1088
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 1679,
			"name": "AdminProductCategoriesResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Product Category API Routes](https://docs.medusajs.com/api/admin#product-categories). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.productCategories`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 438
					},
					{
						"kind": "text",
						"text": ".\n\nProducts can be categoriezed into categories. A product can be added into more than one category.\n\nRelated Guide: [How to manage product categories](https://docs.medusajs.com/modules/products/admin/manage-categories)."
					}
				],
				"blockTags": [
					{
						"tag": "@featureFlag",
						"content": [
							{
								"kind": "text",
								"text": "product_categories"
							}
						]
					}
				]
			},
			"children": [
				{
					"id": 1683,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1684,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a product category's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product category's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "A simple example that retrieves an order by its ID:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.productCategories.retrieve(productCategoryId)\n.then(({ product_category }) => {\n  console.log(product_category.id);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.productCategories.retrieve(productCategoryId, {\n  expand: \"category_children\"\n})\n.then(({ product_category }) => {\n  console.log(product_category.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1685,
									"name": "productCategoryId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product category."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1686,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved product category."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-categories/get-product-category.d.ts",
											"qualifiedName": "AdminGetProductCategoryParams"
										},
										"name": "AdminGetProductCategoryParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1687,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-categories/index.d.ts",
											"qualifiedName": "AdminProductCategoriesCategoryRes"
										},
										"name": "AdminProductCategoriesCategoryRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1688,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1689,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a product category."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product category's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.productCategories.create({\n  name: \"Skinny Jeans\",\n})\n.then(({ product_category }) => {\n  console.log(product_category.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1690,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product category's details."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-categories/create-product-category.d.ts",
											"qualifiedName": "AdminPostProductCategoriesReq"
										},
										"name": "AdminPostProductCategoriesReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1691,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-categories/index.d.ts",
											"qualifiedName": "AdminProductCategoriesCategoryRes"
										},
										"name": "AdminProductCategoriesCategoryRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1692,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1693,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Updates a product category."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product category's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.productCategories.update(productCategoryId, {\n  name: \"Skinny Jeans\"\n})\n.then(({ product_category }) => {\n  console.log(product_category.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1694,
									"name": "productCategoryId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product category."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1695,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the product category."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-categories/update-product-category.d.ts",
											"qualifiedName": "AdminPostProductCategoriesCategoryReq"
										},
										"name": "AdminPostProductCategoriesCategoryReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1696,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-categories/index.d.ts",
											"qualifiedName": "AdminProductCategoriesCategoryRes"
										},
										"name": "AdminProductCategoriesCategoryRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1697,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1698,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of product categories. The product categories can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`handle`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. \nThe product categories can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of product categories with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list product categories:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.productCategories.list()\n.then(({ product_categories, limit, offset, count }) => {\n  console.log(product_categories.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the product category:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.productCategories.list({\n  expand: \"category_children\"\n})\n.then(({ product_categories, limit, offset, count }) => {\n  console.log(product_categories.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`100`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.productCategories.list({\n  expand: \"category_children\",\n  limit,\n  offset\n})\n.then(({ product_categories, limit, offset, count }) => {\n  console.log(product_categories.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1699,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved product categories."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-categories/list-product-categories.d.ts",
											"qualifiedName": "AdminGetProductCategoriesParams"
										},
										"name": "AdminGetProductCategoriesParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1700,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-categories/index.d.ts",
											"qualifiedName": "AdminProductCategoriesListRes"
										},
										"name": "AdminProductCategoriesListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1701,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1702,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a product category. This does not delete associated products."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.productCategories.delete(productCategoryId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1703,
									"name": "productCategoryId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product category."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1704,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1705,
					"name": "removeProducts",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1706,
							"name": "removeProducts",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Remove a list of products from a product category."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product category's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.productCategories.removeProducts(productCategoryId, {\n  product_ids: [\n    {\n      id: productId\n    }\n  ]\n})\n.then(({ product_category }) => {\n  console.log(product_category.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1707,
									"name": "productCategoryId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product category."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1708,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The products to delete."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-categories/delete-products-batch.d.ts",
											"qualifiedName": "AdminDeleteProductCategoriesCategoryProductsBatchReq"
										},
										"name": "AdminDeleteProductCategoriesCategoryProductsBatchReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1709,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-categories/index.d.ts",
											"qualifiedName": "AdminProductCategoriesCategoryRes"
										},
										"name": "AdminProductCategoriesCategoryRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1710,
					"name": "addProducts",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1711,
							"name": "addProducts",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add a list of products to a product category."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product category's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.productCategories.addProducts(productCategoryId, {\n  product_ids: [\n    {\n      id: productId\n    }\n  ]\n})\n.then(({ product_category }) => {\n  console.log(product_category.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1712,
									"name": "productCategoryId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product category."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1713,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The products to add."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-categories/add-products-batch.d.ts",
											"qualifiedName": "AdminPostProductCategoriesCategoryProductsBatchReq"
										},
										"name": "AdminPostProductCategoriesCategoryProductsBatchReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1714,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-categories/index.d.ts",
											"qualifiedName": "AdminProductCategoriesCategoryRes"
										},
										"name": "AdminProductCategoriesCategoryRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1680,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 1681,
							"name": "new AdminProductCategoriesResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 1682,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1679,
								"name": "AdminProductCategoriesResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						1680
					]
				},
				{
					"title": "Methods",
					"children": [
						1683,
						1688,
						1692,
						1697,
						1701,
						1705,
						1710
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 1093,
			"name": "AdminProductTagsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Product Tag API Routes](https://docs.medusajs.com/api/admin#product-tags). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.productTags`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 438
					},
					{
						"kind": "text",
						"text": ".\n\nProduct tags are string values created when you create or update a product with a new tag.\nProducts can have more than one tag, and products can share tags. This allows admins to associate products to similar tags that can be used to filter products."
					}
				]
			},
			"children": [
				{
					"id": 1097,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1098,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of product tags. The product tags can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The product tags can also be sorted or paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of product tags with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list product tags:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.productTags.list()\n.then(({ product_tags }) => {\n  console.log(product_tags.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`10`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.productTags.list({\n  limit,\n  offset\n})\n.then(({ product_tags }) => {\n  console.log(product_tags.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1099,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved product tags."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-tags/list-product-tags.d.ts",
											"qualifiedName": "AdminGetProductTagsParams"
										},
										"name": "AdminGetProductTagsParams",
										"package": "@medusajs/medusa"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-tags/index.d.ts",
											"qualifiedName": "AdminProductTagsListRes"
										},
										"name": "AdminProductTagsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1094,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 1095,
							"name": "new AdminProductTagsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 1096,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1093,
								"name": "AdminProductTagsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						1094
					]
				},
				{
					"title": "Methods",
					"children": [
						1097
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 1100,
			"name": "AdminProductTypesResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Product Type API Routes](https://docs.medusajs.com/api/admin#product-types). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.productTypes`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 438
					},
					{
						"kind": "text",
						"text": ".\n\nProduct types are string values created when you create or update a product with a new type.\nProducts can have one type, and products can share types. This allows admins to associate products with a type that can be used to filter products."
					}
				]
			},
			"children": [
				{
					"id": 1104,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1105,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of product types. The product types can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter.\nThe product types can also be sorted or paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of product types with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list product types:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.productTypes.list()\n.then(({ product_types }) => {\n  console.log(product_types.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`20`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.productTypes.list({\n  limit,\n  offset\n})\n.then(({ product_types }) => {\n  console.log(product_types.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1106,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved product types."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-types/list-product-types.d.ts",
											"qualifiedName": "AdminGetProductTypesParams"
										},
										"name": "AdminGetProductTypesParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1107,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-types/index.d.ts",
											"qualifiedName": "AdminProductTypesListRes"
										},
										"name": "AdminProductTypesListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1101,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 1102,
							"name": "new AdminProductTypesResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 1103,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1100,
								"name": "AdminProductTypesResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						1101
					]
				},
				{
					"title": "Methods",
					"children": [
						1104
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 1108,
			"name": "AdminProductsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Product API Routes](https://docs.medusajs.com/api/admin#products). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.products`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 438
					},
					{
						"kind": "text",
						"text": ".\n\nProducts are saleable items in a store. This also includes [saleable gift cards](https://docs.medusajs.com/modules/gift-cards/admin/manage-gift-cards#manage-gift-card-product) in a store.\n\nRelated Guide: [How to manage products](https://docs.medusajs.com/modules/products/admin/manage-products)."
					}
				]
			},
			"children": [
				{
					"id": 1112,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1113,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a new Product. This API Route can also be used to create a gift card if the "
									},
									{
										"kind": "code",
										"text": "`is_giftcard`"
									},
									{
										"kind": "text",
										"text": " field is set to "
									},
									{
										"kind": "code",
										"text": "`true`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.create({\n  title: \"Shirt\",\n  is_giftcard: false,\n  discountable: true\n})\n.then(({ product }) => {\n  console.log(product.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1114,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/create-product.d.ts",
											"qualifiedName": "AdminPostProductsReq"
										},
										"name": "AdminPostProductsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1115,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/index.d.ts",
											"qualifiedName": "AdminProductsRes"
										},
										"name": "AdminProductsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1116,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1117,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a product's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.retrieve(productId)\n.then(({ product }) => {\n  console.log(product.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1118,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1119,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/index.d.ts",
											"qualifiedName": "AdminProductsRes"
										},
										"name": "AdminProductsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1120,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1121,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a Product's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.update(productId, {\n  title: \"Shirt\",\n})\n.then(({ product }) => {\n  console.log(product.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1122,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1123,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in a product."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/update-product.d.ts",
											"qualifiedName": "AdminPostProductsProductReq"
										},
										"name": "AdminPostProductsProductReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1124,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/index.d.ts",
											"qualifiedName": "AdminProductsRes"
										},
										"name": "AdminProductsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1125,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1126,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a product and its associated product variants and options."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.delete(productId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1127,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1128,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/index.d.ts",
											"qualifiedName": "AdminProductsDeleteRes"
										},
										"name": "AdminProductsDeleteRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1129,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1130,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of products. The products can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`status`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The products can also be sorted or paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of products with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list products:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.list()\n.then(({ products, limit, offset, count }) => {\n  console.log(products.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the products:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.list({\n  expand: \"images\"\n})\n.then(({ products, limit, offset, count }) => {\n  console.log(products.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`50`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.list({\n  expand: \"images\",\n  limit,\n  offset\n})\n.then(({ products, limit, offset, count }) => {\n  console.log(products.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1131,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved products."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/list-products.d.ts",
											"qualifiedName": "AdminGetProductsParams"
										},
										"name": "AdminGetProductsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1132,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/index.d.ts",
											"qualifiedName": "AdminProductsListRes"
										},
										"name": "AdminProductsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1136,
					"name": "listTags",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1137,
							"name": "listTags",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of Product Tags with how many times each is used in products."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of tags."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.listTags()\n.then(({ tags }) => {\n  console.log(tags.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1138,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/index.d.ts",
											"qualifiedName": "AdminProductsListTagsRes"
										},
										"name": "AdminProductsListTagsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1139,
					"name": "setMetadata",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1140,
							"name": "setMetadata",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Set the metadata of a product. It can be any key-value pair, which allows adding custom data to a product. Learn about how you can update and delete the metadata attribute \n[here](https://docs.medusajs.com/development/entities/overview#metadata-attribute)."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.setMetadata(productId, {\n  key: \"test\",\n  value: \"true\"\n})\n.then(({ product }) => {\n  console.log(product.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1141,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1142,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The metadata details to add, update, or delete."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/set-metadata.d.ts",
											"qualifiedName": "AdminPostProductsProductMetadataReq"
										},
										"name": "AdminPostProductsProductMetadataReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1143,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/index.d.ts",
											"qualifiedName": "AdminProductsRes"
										},
										"name": "AdminProductsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1144,
					"name": "createVariant",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1145,
							"name": "createVariant",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a product variant associated with a product. Each product variant must have a unique combination of product option values."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product's details. You can access the variant under the "
											},
											{
												"kind": "code",
												"text": "`variants`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.createVariant(productId, {\n  title: \"Color\",\n  prices: [\n    {\n      amount: 1000,\n      currency_code: \"eur\"\n    }\n  ],\n  options: [\n    {\n      option_id,\n      value: \"S\"\n    }\n  ],\n  inventory_quantity: 100\n})\n.then(({ product }) => {\n  console.log(product.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1146,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product that the variant belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1147,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product variant to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/create-variant.d.ts",
											"qualifiedName": "AdminPostProductsProductVariantsReq"
										},
										"name": "AdminPostProductsProductVariantsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1148,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/index.d.ts",
											"qualifiedName": "AdminProductsRes"
										},
										"name": "AdminProductsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1149,
					"name": "updateVariant",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1150,
							"name": "updateVariant",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a product variant's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product's details. You can access the variant under the "
											},
											{
												"kind": "code",
												"text": "`variants`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.updateVariant(productId, variantId, {\n  title: \"Color\",\n  prices: [\n    {\n      amount: 1000,\n      currency_code: \"eur\"\n    }\n  ],\n  options: [\n    {\n      option_id,\n      value: \"S\"\n    }\n  ],\n  inventory_quantity: 100\n})\n.then(({ product }) => {\n  console.log(product.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1151,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product that the variant belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1152,
									"name": "variantId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product variant."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1153,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the product variant."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/update-variant.d.ts",
											"qualifiedName": "AdminPostProductsProductVariantsVariantReq"
										},
										"name": "AdminPostProductsProductVariantsVariantReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1154,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/index.d.ts",
											"qualifiedName": "AdminProductsRes"
										},
										"name": "AdminProductsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1155,
					"name": "deleteVariant",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1156,
							"name": "deleteVariant",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a product variant."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.deleteVariant(productId, variantId)\n.then(({ variant_id, object, deleted, product }) => {\n  console.log(product.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1157,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product that the variant belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1158,
									"name": "variantId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product variant."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1159,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/index.d.ts",
											"qualifiedName": "AdminProductsDeleteVariantRes"
										},
										"name": "AdminProductsDeleteVariantRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1160,
					"name": "addOption",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1161,
							"name": "addOption",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add a product option to a product."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product's details. You can access the variant under the "
											},
											{
												"kind": "code",
												"text": "`options`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.addOption(productId, {\n  title: \"Size\"\n})\n.then(({ product }) => {\n  console.log(product.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1162,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1163,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The option to add."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/add-option.d.ts",
											"qualifiedName": "AdminPostProductsProductOptionsReq"
										},
										"name": "AdminPostProductsProductOptionsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1164,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/index.d.ts",
											"qualifiedName": "AdminProductsRes"
										},
										"name": "AdminProductsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1165,
					"name": "updateOption",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1166,
							"name": "updateOption",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a product option's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product's details. You can access the variant under the "
											},
											{
												"kind": "code",
												"text": "`options`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.updateOption(productId, optionId, {\n  title: \"Size\"\n})\n.then(({ product }) => {\n  console.log(product.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1167,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product that the option belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1168,
									"name": "optionId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product option."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1169,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the product option."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/update-option.d.ts",
											"qualifiedName": "AdminPostProductsProductOptionsOption"
										},
										"name": "AdminPostProductsProductOptionsOption",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1170,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/index.d.ts",
											"qualifiedName": "AdminProductsRes"
										},
										"name": "AdminProductsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1171,
					"name": "deleteOption",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1172,
							"name": "deleteOption",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a product option. If there are product variants that use this product option, they must be deleted before deleting the product option."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1173,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product that the option belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1174,
									"name": "optionId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product option."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1175,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/index.d.ts",
											"qualifiedName": "AdminProductsDeleteOptionRes"
										},
										"name": "AdminProductsDeleteOptionRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1109,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 1110,
							"name": "new AdminProductsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 1111,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1108,
								"name": "AdminProductsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						1109
					]
				},
				{
					"title": "Methods",
					"children": [
						1112,
						1116,
						1120,
						1125,
						1129,
						1136,
						1139,
						1144,
						1149,
						1155,
						1160,
						1165,
						1171
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 1176,
			"name": "AdminPublishableApiKeyResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Publishable API Key API Routes](https://docs.medusajs.com/api/admin#publishable-api-keys). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.publishableApiKeys`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 438
					},
					{
						"kind": "text",
						"text": ".\n\nPublishable API Keys can be used to scope Store API calls with an API key, determining what resources are retrieved when querying the API.\nFor example, a publishable API key can be associated with one or more sales channels. When it is passed in the header of a request to the List Product store API Route,\nthe sales channels are inferred from the key and only products associated with those sales channels are retrieved.\nAdmins can manage publishable API keys and their associated resources. Currently, only Sales Channels are supported as a resource.\n\nRelated Guide: [How to manage publishable API keys](https://docs.medusajs.com/development/publishable-api-keys/admin/manage-publishable-api-keys)."
					}
				]
			},
			"children": [
				{
					"id": 1180,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1181,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a publishable API key's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the publishable API key's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.publishableApiKeys.retrieve(publishableApiKeyId)\n.then(({ publishable_api_key }) => {\n  console.log(publishable_api_key.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1182,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the publishable API key."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1183,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/publishable-api-keys/index.d.ts",
											"qualifiedName": "AdminPublishableApiKeysRes"
										},
										"name": "AdminPublishableApiKeysRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1184,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1185,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of publishable API keys. The publishable API keys can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " passed in "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": ". The publishable API keys can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of publishable API keys with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list publishable API keys:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.publishableApiKeys.list()\n.then(({ publishable_api_keys, count, limit, offset }) => {\n  console.log(publishable_api_keys)\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`20`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.publishableApiKeys.list({\n  limit,\n  offset\n})\n.then(({ publishable_api_keys, count, limit, offset }) => {\n  console.log(publishable_api_keys)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1186,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved publishable API keys."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/publishable-api-keys/list-publishable-api-keys.d.ts",
											"qualifiedName": "GetPublishableApiKeysParams"
										},
										"name": "GetPublishableApiKeysParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1187,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/publishable-api-keys/index.d.ts",
											"qualifiedName": "AdminPublishableApiKeysListRes"
										},
										"name": "AdminPublishableApiKeysListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1188,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1189,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a publishable API key."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the publishbale API key's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.publishableApiKeys.create({\n title\n})\n.then(({ publishable_api_key }) => {\n  console.log(publishable_api_key.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1190,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The publishable API key to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/publishable-api-keys/create-publishable-api-key.d.ts",
											"qualifiedName": "AdminPostPublishableApiKeysReq"
										},
										"name": "AdminPostPublishableApiKeysReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1191,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/publishable-api-keys/index.d.ts",
											"qualifiedName": "AdminPublishableApiKeysRes"
										},
										"name": "AdminPublishableApiKeysRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1192,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1193,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a publishable API key's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the publishbale API key's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.publishableApiKeys.update(publishableApiKeyId, {\n  title: \"new title\"\n})\n.then(({ publishable_api_key }) => {\n  console.log(publishable_api_key.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1194,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the publishable API key."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1195,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the publishable API key."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/publishable-api-keys/update-publishable-api-key.d.ts",
											"qualifiedName": "AdminPostPublishableApiKeysPublishableApiKeyReq"
										},
										"name": "AdminPostPublishableApiKeysPublishableApiKeyReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1196,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/publishable-api-keys/index.d.ts",
											"qualifiedName": "AdminPublishableApiKeysRes"
										},
										"name": "AdminPublishableApiKeysRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1197,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1198,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a publishable API key. Associated resources, such as sales channels, are not deleted."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the delete operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.publishableApiKeys.delete(publishableApiKeyId)\n.then(({ id, object, deleted }) => {\n  console.log(id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1199,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the publishable API key"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1200,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1201,
					"name": "revoke",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1202,
							"name": "revoke",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Revoke a publishable API key. Revoking the publishable API Key can't be undone, and the key can't be used in future requests."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the publishbale API key's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.publishableApiKeys.revoke(publishableApiKeyId)\n.then(({ publishable_api_key }) => {\n  console.log(publishable_api_key.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1203,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the publishable API key."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1204,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/publishable-api-keys/index.d.ts",
											"qualifiedName": "AdminPublishableApiKeysRes"
										},
										"name": "AdminPublishableApiKeysRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1205,
					"name": "addSalesChannelsBatch",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1206,
							"name": "addSalesChannelsBatch",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add a list of sales channels to a publishable API key."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the publishbale API key's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.publishableApiKeys.addSalesChannelsBatch(publishableApiKeyId, {\n  sales_channel_ids: [\n    {\n      id: channelId\n    }\n  ]\n})\n.then(({ publishable_api_key }) => {\n  console.log(publishable_api_key.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1207,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the publishable API key."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1208,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The sales channels to add."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/publishable-api-keys/add-channels-batch.d.ts",
											"qualifiedName": "AdminPostPublishableApiKeySalesChannelsBatchReq"
										},
										"name": "AdminPostPublishableApiKeySalesChannelsBatchReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1209,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/publishable-api-keys/index.d.ts",
											"qualifiedName": "AdminPublishableApiKeysRes"
										},
										"name": "AdminPublishableApiKeysRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1210,
					"name": "deleteSalesChannelsBatch",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1211,
							"name": "deleteSalesChannelsBatch",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Remove a list of sales channels from a publishable API key. This doesn't delete the sales channels and only removes the association between them and the publishable API key."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the publishbale API key's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.publishableApiKeys.deleteSalesChannelsBatch(publishableApiKeyId, {\n  sales_channel_ids: [\n    {\n      id: channelId\n    }\n  ]\n})\n.then(({ publishable_api_key }) => {\n  console.log(publishable_api_key.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1212,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the publishable API key."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1213,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The sales channels to delete from the publishable API key."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/publishable-api-keys/delete-channels-batch.d.ts",
											"qualifiedName": "AdminDeletePublishableApiKeySalesChannelsBatchReq"
										},
										"name": "AdminDeletePublishableApiKeySalesChannelsBatchReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1214,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/publishable-api-keys/index.d.ts",
											"qualifiedName": "AdminPublishableApiKeysRes"
										},
										"name": "AdminPublishableApiKeysRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1215,
					"name": "listSalesChannels",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1216,
							"name": "listSalesChannels",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "List the sales channels associated with a publishable API key. The sales channels can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of sales channels."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.publishableApiKeys.listSalesChannels()\n.then(({ sales_channels }) => {\n  console.log(sales_channels.length)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1217,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the publishable API key."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1218,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters to apply on the retrieved sales channels."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/publishable-api-keys/list-publishable-api-key-sales-channels.d.ts",
											"qualifiedName": "GetPublishableApiKeySalesChannelsParams"
										},
										"name": "GetPublishableApiKeySalesChannelsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1219,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/publishable-api-keys/index.d.ts",
											"qualifiedName": "AdminPublishableApiKeysListSalesChannelsRes"
										},
										"name": "AdminPublishableApiKeysListSalesChannelsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1177,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 1178,
							"name": "new AdminPublishableApiKeyResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 1179,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1176,
								"name": "AdminPublishableApiKeyResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						1177
					]
				},
				{
					"title": "Methods",
					"children": [
						1180,
						1184,
						1188,
						1192,
						1197,
						1201,
						1205,
						1210,
						1215
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 1220,
			"name": "AdminRegionsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Region API Routes](https://docs.medusajs.com/api/admin#regions). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.regions`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 438
					},
					{
						"kind": "text",
						"text": ".\n\nRegions are different countries or geographical regions that the commerce store serves customers in.\nAdmins can manage these regions, their providers, and more.\n\nRelated Guide: [How to manage regions](https://docs.medusajs.com/modules/regions-and-currencies/admin/manage-regions)."
					}
				]
			},
			"children": [
				{
					"id": 1224,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1225,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a region."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the region's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.regions.create({\n  name: \"Europe\",\n  currency_code: \"eur\",\n  tax_rate: 0,\n  payment_providers: [\n    \"manual\"\n  ],\n  fulfillment_providers: [\n    \"manual\"\n  ],\n  countries: [\n    \"DK\"\n  ]\n})\n.then(({ region }) => {\n  console.log(region.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1226,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The region to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/create-region.d.ts",
											"qualifiedName": "AdminPostRegionsReq"
										},
										"name": "AdminPostRegionsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1227,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/index.d.ts",
											"qualifiedName": "AdminRegionsRes"
										},
										"name": "AdminRegionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1228,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1229,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a region's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the region's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.regions.update(regionId, {\n  name: \"Europe\"\n})\n.then(({ region }) => {\n  console.log(region.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1230,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The region's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1231,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the region."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/update-region.d.ts",
											"qualifiedName": "AdminPostRegionsRegionReq"
										},
										"name": "AdminPostRegionsRegionReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1232,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/index.d.ts",
											"qualifiedName": "AdminRegionsRes"
										},
										"name": "AdminRegionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1233,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1234,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a region. Associated resources, such as providers or currencies are not deleted. Associated tax rates are deleted."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.regions.delete(regionId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1235,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The region's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1236,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1237,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1238,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a region's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the region's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.regions.retrieve(regionId)\n.then(({ region }) => {\n  console.log(region.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1239,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The region's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1240,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/index.d.ts",
											"qualifiedName": "AdminRegionsRes"
										},
										"name": "AdminRegionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1241,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1242,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of Regions. The regions can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`created_at`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The regions can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of regions with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list regions:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.regions.list()\n.then(({ regions, limit, offset, count }) => {\n  console.log(regions.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`50`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.regions.list({\n  limit,\n  offset\n})\n.then(({ regions, limit, offset, count }) => {\n  console.log(regions.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1243,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved regions."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/list-regions.d.ts",
											"qualifiedName": "AdminGetRegionsParams"
										},
										"name": "AdminGetRegionsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1244,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/index.d.ts",
											"qualifiedName": "AdminRegionsListRes"
										},
										"name": "AdminRegionsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1245,
					"name": "addCountry",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1246,
							"name": "addCountry",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add a country to the list of countries in a region."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the region's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.regions.addCountry(regionId, {\n  country_code: \"dk\"\n})\n.then(({ region }) => {\n  console.log(region.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1247,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The region's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1248,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The country to add."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/add-country.d.ts",
											"qualifiedName": "AdminPostRegionsRegionCountriesReq"
										},
										"name": "AdminPostRegionsRegionCountriesReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1249,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/index.d.ts",
											"qualifiedName": "AdminRegionsRes"
										},
										"name": "AdminRegionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1250,
					"name": "deleteCountry",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1251,
							"name": "deleteCountry",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a country from the list of countries in a region. The country will still be available in the system, and it can be used in other regions."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the region's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.regions.deleteCountry(regionId, \"dk\")\n.then(({ region }) => {\n  console.log(region.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1252,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The region's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1253,
									"name": "country_code",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The code of the country to delete from the region."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1254,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/index.d.ts",
											"qualifiedName": "AdminRegionsRes"
										},
										"name": "AdminRegionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1255,
					"name": "addFulfillmentProvider",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1256,
							"name": "addFulfillmentProvider",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add a fulfillment provider to the list of fulfullment providers in a region."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the region's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.regions.addFulfillmentProvider(regionId, {\n  provider_id: \"manual\"\n})\n.then(({ region }) => {\n  console.log(region.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1257,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The region's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1258,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The fulfillment provider to add."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/add-fulfillment-provider.d.ts",
											"qualifiedName": "AdminPostRegionsRegionFulfillmentProvidersReq"
										},
										"name": "AdminPostRegionsRegionFulfillmentProvidersReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1259,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/index.d.ts",
											"qualifiedName": "AdminRegionsRes"
										},
										"name": "AdminRegionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1260,
					"name": "deleteFulfillmentProvider",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1261,
							"name": "deleteFulfillmentProvider",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a fulfillment provider from a region. The fulfillment provider will still be available for usage in other regions."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the region's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.regions.deleteFulfillmentProvider(regionId, \"manual\")\n.then(({ region }) => {\n  console.log(region.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1262,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The region's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1263,
									"name": "provider_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the fulfillment provider to delete from the region."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1264,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/index.d.ts",
											"qualifiedName": "AdminRegionsRes"
										},
										"name": "AdminRegionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1265,
					"name": "retrieveFulfillmentOptions",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1266,
							"name": "retrieveFulfillmentOptions",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of fulfillment options available in a region."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of fulfillment options."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.regions.retrieveFulfillmentOptions(regionId)\n.then(({ fulfillment_options }) => {\n  console.log(fulfillment_options.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1267,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The region's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1268,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/index.d.ts",
											"qualifiedName": "AdminGetRegionsRegionFulfillmentOptionsRes"
										},
										"name": "AdminGetRegionsRegionFulfillmentOptionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1269,
					"name": "addPaymentProvider",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1270,
							"name": "addPaymentProvider",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add a payment provider to the list of payment providers in a region."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the region's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.regions.addPaymentProvider(regionId, {\n  provider_id: \"manual\"\n})\n.then(({ region }) => {\n  console.log(region.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1271,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The region's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1272,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The payment provider to add."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/add-payment-provider.d.ts",
											"qualifiedName": "AdminPostRegionsRegionPaymentProvidersReq"
										},
										"name": "AdminPostRegionsRegionPaymentProvidersReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1273,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/index.d.ts",
											"qualifiedName": "AdminRegionsRes"
										},
										"name": "AdminRegionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1274,
					"name": "deletePaymentProvider",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1275,
							"name": "deletePaymentProvider",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a payment provider from a region. The payment provider will still be available for usage in other regions."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the region's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.regions.deletePaymentProvider(regionId, \"manual\")\n.then(({ region }) => {\n  console.log(region.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1276,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The region's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1277,
									"name": "provider_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment provider to delete from the region."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1278,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/index.d.ts",
											"qualifiedName": "AdminRegionsRes"
										},
										"name": "AdminRegionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1221,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 1222,
							"name": "new AdminRegionsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 1223,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1220,
								"name": "AdminRegionsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						1221
					]
				},
				{
					"title": "Methods",
					"children": [
						1224,
						1228,
						1233,
						1237,
						1241,
						1245,
						1250,
						1255,
						1260,
						1265,
						1269,
						1274
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 1279,
			"name": "AdminReservationsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Reservation API Routes](https://docs.medusajs.com/api/admin#reservations). To use these API Routes, make sure to install the\n[@medusajs/inventory](https://docs.medusajs.com/modules/multiwarehouse/install-modules#inventory-module) module in your Medusa backend.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 438
					},
					{
						"kind": "text",
						"text": ". The methods\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.reservations`"
					},
					{
						"kind": "text",
						"text": " property.\n\nReservations, provided by the [Inventory Module](https://docs.medusajs.com/modules/multiwarehouse/inventory-module), are quantities of an item that are reserved, typically when an order is placed but not yet fulfilled.\nReservations can be associated with any resources, but commonly with line items of an order.\n\nRelated Guide: [How to manage item allocations in orders](https://docs.medusajs.com/modules/multiwarehouse/admin/manage-item-allocations-in-orders)."
					}
				]
			},
			"children": [
				{
					"id": 1283,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1284,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a reservation's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the reservation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.reservations.retrieve(reservationId)\n.then(({ reservation }) => {\n  console.log(reservation.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1285,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The reservation's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1286,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/reservations/index.d.ts",
											"qualifiedName": "AdminReservationsRes"
										},
										"name": "AdminReservationsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1287,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1288,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of reservations. The reservations can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`location_id`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`quantity`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The reservations can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of reservations with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list reservations:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.reservations.list()\n.then(({ reservations, count, limit, offset }) => {\n  console.log(reservations.length)\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the reservations:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.reservations.list({\n  expand: \"location\"\n})\n.then(({ reservations, count, limit, offset }) => {\n  console.log(reservations.length)\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`20`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.reservations.list({\n  expand: \"location\",\n  limit,\n  offset\n})\n.then(({ reservations, count, limit, offset }) => {\n  console.log(reservations.length)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1289,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination parameters to apply on the retrieved reservations."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/reservations/list-reservations.d.ts",
											"qualifiedName": "AdminGetReservationsParams"
										},
										"name": "AdminGetReservationsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1290,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/reservations/index.d.ts",
											"qualifiedName": "AdminReservationsListRes"
										},
										"name": "AdminReservationsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1291,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1292,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a reservation which can be associated with any resource, such as an order's line item."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the reservation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.reservations.create({\n  line_item_id: \"item_123\",\n  location_id: \"loc_123\",\n  inventory_item_id: \"iitem_123\",\n  quantity: 1\n})\n.then(({ reservation }) => {\n  console.log(reservation.id);\n});\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1293,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The reservation to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/reservations/create-reservation.d.ts",
											"qualifiedName": "AdminPostReservationsReq"
										},
										"name": "AdminPostReservationsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1294,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/reservations/index.d.ts",
											"qualifiedName": "AdminReservationsRes"
										},
										"name": "AdminReservationsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1295,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1296,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a reservation's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the reservation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.reservations.update(reservationId, {\n  quantity: 3\n})\n.then(({ reservation }) => {\n  console.log(reservation.id);\n});\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1297,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the reservation."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1298,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the reservation."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/reservations/update-reservation.d.ts",
											"qualifiedName": "AdminPostReservationsReservationReq"
										},
										"name": "AdminPostReservationsReservationReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1299,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/reservations/index.d.ts",
											"qualifiedName": "AdminReservationsRes"
										},
										"name": "AdminReservationsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1300,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1301,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a reservation. Associated resources, such as the line item, will not be deleted."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.reservations.delete(reservationId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n});\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1302,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the reservation."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1303,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1280,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 1281,
							"name": "new AdminReservationsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 1282,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1279,
								"name": "AdminReservationsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						1280
					]
				},
				{
					"title": "Methods",
					"children": [
						1283,
						1287,
						1291,
						1295,
						1300
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 1304,
			"name": "AdminReturnReasonsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Return Reason API Routes](https://docs.medusajs.com/api/admin#return-reasons). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.returnReasons`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 438
					},
					{
						"kind": "text",
						"text": ".\n\nReturn reasons are key-value pairs that are used to specify why an order return is being created.\nAdmins can manage available return reasons, and they can be used by both admins and customers when creating a return.\n\nRelated Guide: [How to manage return reasons](https://docs.medusajs.com/modules/orders/admin/manage-returns#manage-return-reasons)."
					}
				]
			},
			"children": [
				{
					"id": 1308,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1309,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a return reason."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the return reason's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.returnReasons.create({\n  label: \"Damaged\",\n  value: \"damaged\"\n})\n.then(({ return_reason }) => {\n  console.log(return_reason.id);\n});\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1310,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The return reason to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/return-reasons/create-reason.d.ts",
											"qualifiedName": "AdminPostReturnReasonsReq"
										},
										"name": "AdminPostReturnReasonsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1311,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/return-reasons/index.d.ts",
											"qualifiedName": "AdminReturnReasonsRes"
										},
										"name": "AdminReturnReasonsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1312,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1313,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a return reason's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the return reason's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.returnReasons.update(returnReasonId, {\n  label: \"Damaged\"\n})\n.then(({ return_reason }) => {\n  console.log(return_reason.id);\n});\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1314,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The return reason's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1315,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the return reason."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/return-reasons/update-reason.d.ts",
											"qualifiedName": "AdminPostReturnReasonsReasonReq"
										},
										"name": "AdminPostReturnReasonsReasonReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1316,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/return-reasons/index.d.ts",
											"qualifiedName": "AdminReturnReasonsRes"
										},
										"name": "AdminReturnReasonsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1317,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1318,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a return reason."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.returnReasons.delete(returnReasonId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n});\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1319,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the return reason."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1320,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1321,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1322,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a return reason's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the return reason's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.returnReasons.retrieve(returnReasonId)\n.then(({ return_reason }) => {\n  console.log(return_reason.id);\n});\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1323,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The return reason's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1324,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/return-reasons/index.d.ts",
											"qualifiedName": "AdminReturnReasonsRes"
										},
										"name": "AdminReturnReasonsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1325,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1326,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of return reasons."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of return reasons."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.returnReasons.list()\n.then(({ return_reasons }) => {\n  console.log(return_reasons.length);\n});\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1327,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/return-reasons/index.d.ts",
											"qualifiedName": "AdminReturnReasonsListRes"
										},
										"name": "AdminReturnReasonsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1305,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 1306,
							"name": "new AdminReturnReasonsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 1307,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1304,
								"name": "AdminReturnReasonsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						1305
					]
				},
				{
					"title": "Methods",
					"children": [
						1308,
						1312,
						1317,
						1321,
						1325
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 1328,
			"name": "AdminReturnsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Return API Routes](https://docs.medusajs.com/api/admin#returns). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.returns`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 438
					},
					{
						"kind": "text",
						"text": ".\n\nA return can be created by a customer or an admin to return items in an order.\nAdmins can manage these returns and change their state.\n\nRelated Guide: [How to manage returns](https://docs.medusajs.com/modules/orders/admin/manage-returns)."
					}
				]
			},
			"children": [
				{
					"id": 1332,
					"name": "cancel",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1333,
							"name": "cancel",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Register a return as canceled. The return can be associated with an order, claim, or swap."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the order associated with the return. If the return is associated with a claim or a swap, then it'll be the order\nthat the claim or swap belongs to."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.returns.cancel(returnId)\n.then(({ order }) => {\n  console.log(order.id);\n});\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1334,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The return's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1335,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/returns/index.d.ts",
											"qualifiedName": "AdminReturnsCancelRes"
										},
										"name": "AdminReturnsCancelRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1336,
					"name": "receive",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1337,
							"name": "receive",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Mark a return as received. This also updates the status of associated order, claim, or swap accordingly."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the return's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.returns.receive(returnId, {\n  items: [\n    {\n      item_id,\n      quantity: 1\n    }\n  ]\n})\n.then((data) => {\n  console.log(data.return.id);\n});\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1338,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The return's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1339,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The received return."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/returns/receive-return.d.ts",
											"qualifiedName": "AdminPostReturnsReturnReceiveReq"
										},
										"name": "AdminPostReturnsReturnReceiveReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1340,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/returns/index.d.ts",
											"qualifiedName": "AdminReturnsRes"
										},
										"name": "AdminReturnsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1341,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1342,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of Returns. The returns can be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of returns with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list returns:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.returns.list()\n.then(({ returns, limit, offset, count }) => {\n  console.log(returns.length)\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`50`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.returns.list({\n  limit,\n  offset\n})\n.then(({ returns, limit, offset, count }) => {\n  console.log(returns.length)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1343,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Paignation configurations to be applied on the retrieved returns."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/returns/list-returns.d.ts",
											"qualifiedName": "AdminGetReturnsParams"
										},
										"name": "AdminGetReturnsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1344,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/returns/index.d.ts",
											"qualifiedName": "AdminReturnsListRes"
										},
										"name": "AdminReturnsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1329,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 1330,
							"name": "new AdminReturnsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 1331,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1328,
								"name": "AdminReturnsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						1329
					]
				},
				{
					"title": "Methods",
					"children": [
						1332,
						1336,
						1341
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 1345,
			"name": "AdminSalesChannelsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Sales Channel API Routes](https://docs.medusajs.com/api/admin#sales-channels). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.salesChannels`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 438
					},
					{
						"kind": "text",
						"text": ".\n\nA sales channel indicates a channel where products can be sold in. For example, a webshop or a mobile app.\nAdmins can manage sales channels and the products available in them.\n\nRelated Guide: [How to manage sales channels](https://docs.medusajs.com/modules/sales-channels/admin/manage)."
					}
				]
			},
			"children": [
				{
					"id": 1349,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1350,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a sales channel's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the sales channel's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.salesChannels.retrieve(salesChannelId)\n.then(({ sales_channel }) => {\n  console.log(sales_channel.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1351,
									"name": "salesChannelId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The sales channel's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1352,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/index.d.ts",
											"qualifiedName": "AdminSalesChannelsRes"
										},
										"name": "AdminSalesChannelsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1353,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1354,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a sales channel."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the sales channel's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.salesChannels.create({\n  name: \"App\",\n  description: \"Mobile app\"\n})\n.then(({ sales_channel }) => {\n  console.log(sales_channel.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1355,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The sales channel to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/create-sales-channel.d.ts",
											"qualifiedName": "AdminPostSalesChannelsReq"
										},
										"name": "AdminPostSalesChannelsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1356,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/index.d.ts",
											"qualifiedName": "AdminSalesChannelsRes"
										},
										"name": "AdminSalesChannelsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1357,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1358,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a sales channel's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the sales channel's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.salesChannels.update(salesChannelId, {\n  name: \"App\"\n})\n.then(({ sales_channel }) => {\n  console.log(sales_channel.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1359,
									"name": "salesChannelId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The sales channel's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1360,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the sales channel."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/update-sales-channel.d.ts",
											"qualifiedName": "AdminPostSalesChannelsSalesChannelReq"
										},
										"name": "AdminPostSalesChannelsSalesChannelReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1361,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/index.d.ts",
											"qualifiedName": "AdminSalesChannelsRes"
										},
										"name": "AdminSalesChannelsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1362,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1363,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of sales channels. The sales channels can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`name`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The sales channels can also be sorted or paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of sales channels with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list sales channels:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.salesChannels.list()\n.then(({ sales_channels, limit, offset, count }) => {\n  console.log(sales_channels.length)\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the sales channels:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.salesChannels.list({\n  expand: \"locations\"\n})\n.then(({ sales_channels, limit, offset, count }) => {\n  console.log(sales_channels.length)\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`20`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.salesChannels.list({\n  expand: \"locations\",\n  limit,\n  offset\n})\n.then(({ sales_channels, limit, offset, count }) => {\n  console.log(sales_channels.length)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1364,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations applied on the retrieved sales channels."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/list-sales-channels.d.ts",
											"qualifiedName": "AdminGetSalesChannelsParams"
										},
										"name": "AdminGetSalesChannelsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1365,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/index.d.ts",
											"qualifiedName": "AdminSalesChannelsListRes"
										},
										"name": "AdminSalesChannelsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1366,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1367,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a sales channel. Associated products, stock locations, and other resources are not deleted."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.salesChannels.delete(salesChannelId)\n.then(({ id, object, deleted }) => {\n  console.log(id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1368,
									"name": "salesChannelId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The sales channel's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1369,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1370,
					"name": "removeProducts",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1371,
							"name": "removeProducts",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Remove a list of products from a sales channel. This doesn't delete the product. It only removes the association between the product and the sales channel."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the sales channel's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.salesChannels.removeProducts(salesChannelId, {\n  product_ids: [\n    {\n      id: productId\n    }\n  ]\n})\n.then(({ sales_channel }) => {\n  console.log(sales_channel.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1372,
									"name": "salesChannelId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The sales channel's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1373,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The products to remove from the sales channel."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/delete-products-batch.d.ts",
											"qualifiedName": "AdminDeleteSalesChannelsChannelProductsBatchReq"
										},
										"name": "AdminDeleteSalesChannelsChannelProductsBatchReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1374,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/index.d.ts",
											"qualifiedName": "AdminSalesChannelsRes"
										},
										"name": "AdminSalesChannelsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1375,
					"name": "addProducts",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1376,
							"name": "addProducts",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add a list of products to a sales channel."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the sales channel's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.salesChannels.addProducts(salesChannelId, {\n  product_ids: [\n    {\n      id: productId\n    }\n  ]\n})\n.then(({ sales_channel }) => {\n  console.log(sales_channel.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1377,
									"name": "salesChannelId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The sales channel's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1378,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The products to add to the sales channel."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/add-product-batch.d.ts",
											"qualifiedName": "AdminPostSalesChannelsChannelProductsBatchReq"
										},
										"name": "AdminPostSalesChannelsChannelProductsBatchReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1379,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/index.d.ts",
											"qualifiedName": "AdminSalesChannelsRes"
										},
										"name": "AdminSalesChannelsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1380,
					"name": "addLocation",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1381,
							"name": "addLocation",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Associate a stock location with a sales channel. It requires the \n[@medusajs/stock-location](https://docs.medusajs.com/modules/multiwarehouse/install-modules#stock-location-module) module to be installed in\nyour Medusa backend."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the sales channel's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.salesChannels.addLocation(salesChannelId, {\n  location_id: \"loc_123\"\n})\n.then(({ sales_channel }) => {\n  console.log(sales_channel.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1382,
									"name": "salesChannelId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The sales channel's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1383,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The stock location to associate with the sales channel."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/associate-stock-location.d.ts",
											"qualifiedName": "AdminPostSalesChannelsChannelStockLocationsReq"
										},
										"name": "AdminPostSalesChannelsChannelStockLocationsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1384,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/index.d.ts",
											"qualifiedName": "AdminSalesChannelsRes"
										},
										"name": "AdminSalesChannelsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1385,
					"name": "removeLocation",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1386,
							"name": "removeLocation",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Remove a stock location from a sales channel. This only removes the association between the stock location and the sales channel. It does not delete the stock location."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the sales channel's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.salesChannels.removeLocation(salesChannelId, {\n  location_id: \"loc_id\"\n})\n.then(({ sales_channel }) => {\n  console.log(sales_channel.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1387,
									"name": "salesChannelId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The sales channel's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1388,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The stock location to remove from the sales channel."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/remove-stock-location.d.ts",
											"qualifiedName": "AdminDeleteSalesChannelsChannelStockLocationsReq"
										},
										"name": "AdminDeleteSalesChannelsChannelStockLocationsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1389,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/index.d.ts",
											"qualifiedName": "AdminSalesChannelsRes"
										},
										"name": "AdminSalesChannelsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1346,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 1347,
							"name": "new AdminSalesChannelsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 1348,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1345,
								"name": "AdminSalesChannelsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						1346
					]
				},
				{
					"title": "Methods",
					"children": [
						1349,
						1353,
						1357,
						1362,
						1366,
						1370,
						1375,
						1380,
						1385
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 1390,
			"name": "AdminShippingOptionsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Shipping Option API Routes](https://docs.medusajs.com/api/admin#shipping-options). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.shippingOptions`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 438
					},
					{
						"kind": "text",
						"text": ".\n\nA shipping option is used to define the available shipping methods during checkout or when creating a return.\nAdmins can create an unlimited number of shipping options, each associated with a shipping profile and fulfillment provider, among other resources.\n\nRelated Guide: [Shipping Option architecture](https://docs.medusajs.com/modules/carts-and-checkout/shipping#shipping-option)."
					}
				]
			},
			"children": [
				{
					"id": 1394,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1395,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a shipping option."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the shipping option's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.shippingOptions.create({\n  name: \"PostFake\",\n  region_id,\n  provider_id,\n  data: {\n  },\n  price_type: \"flat_rate\"\n})\n.then(({ shipping_option }) => {\n  console.log(shipping_option.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1396,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipping option to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/shipping-options/create-shipping-option.d.ts",
											"qualifiedName": "AdminPostShippingOptionsReq"
										},
										"name": "AdminPostShippingOptionsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1397,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/shipping-options/index.d.ts",
											"qualifiedName": "AdminShippingOptionsRes"
										},
										"name": "AdminShippingOptionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1398,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1399,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a shipping option's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the shipping option's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.shippingOptions.update(optionId, {\n  name: \"PostFake\",\n  requirements: [\n    {\n      id,\n      type: \"max_subtotal\",\n      amount: 1000\n    }\n  ]\n})\n.then(({ shipping_option }) => {\n  console.log(shipping_option.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1400,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipping option's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1401,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the shipping option."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/shipping-options/update-shipping-option.d.ts",
											"qualifiedName": "AdminPostShippingOptionsOptionReq"
										},
										"name": "AdminPostShippingOptionsOptionReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1402,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/shipping-options/index.d.ts",
											"qualifiedName": "AdminShippingOptionsRes"
										},
										"name": "AdminShippingOptionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1403,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1404,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a shipping option. Once deleted, it can't be used when creating orders or returns."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.shippingOptions.delete(optionId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1405,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipping option's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1406,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1407,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1408,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a shipping option's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the shipping option's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.shippingOptions.retrieve(optionId)\n.then(({ shipping_option }) => {\n  console.log(shipping_option.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1409,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipping option's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1410,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/shipping-options/index.d.ts",
											"qualifiedName": "AdminShippingOptionsRes"
										},
										"name": "AdminShippingOptionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1411,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1412,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of shipping options. The shipping options can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`region_id`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`is_return`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of shipping options."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.shippingOptions.list()\n.then(({ shipping_options, count }) => {\n  console.log(shipping_options.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1413,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters to apply on the retrieved shipping options."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/shipping-options/list-shipping-options.d.ts",
											"qualifiedName": "AdminGetShippingOptionsParams"
										},
										"name": "AdminGetShippingOptionsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1414,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/shipping-options/index.d.ts",
											"qualifiedName": "AdminShippingOptionsListRes"
										},
										"name": "AdminShippingOptionsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1391,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 1392,
							"name": "new AdminShippingOptionsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 1393,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1390,
								"name": "AdminShippingOptionsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						1391
					]
				},
				{
					"title": "Methods",
					"children": [
						1394,
						1398,
						1403,
						1407,
						1411
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 1415,
			"name": "AdminShippingProfilesResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Shipping Profile API Routes](https://docs.medusajs.com/api/admin#shipping-profiles). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.shippingProfiles`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 438
					},
					{
						"kind": "text",
						"text": ".\n\nA shipping profile is used to group products that can be shipped in the same manner.\nThey are created by the admin and they're not associated with a fulfillment provider.\n\nRelated Guide: [Shipping Profile architecture](https://docs.medusajs.com/modules/carts-and-checkout/shipping#shipping-profile)."
					}
				]
			},
			"children": [
				{
					"id": 1419,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1420,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a shipping profile."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the shipping profile's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { ShippingProfileType } from \"@medusajs/medusa\"\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.shippingProfiles.create({\n  name: \"Large Products\",\n  type: ShippingProfileType.DEFAULT\n})\n.then(({ shipping_profile }) => {\n  console.log(shipping_profile.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1421,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipping profile to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/shipping-profiles/create-shipping-profile.d.ts",
											"qualifiedName": "AdminPostShippingProfilesReq"
										},
										"name": "AdminPostShippingProfilesReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1422,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/shipping-profiles/index.d.ts",
											"qualifiedName": "AdminShippingProfilesRes"
										},
										"name": "AdminShippingProfilesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1423,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1424,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a shipping profile's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the shipping profile's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.shippingProfiles.update(shippingProfileId, {\n  name: 'Large Products'\n})\n.then(({ shipping_profile }) => {\n  console.log(shipping_profile.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1425,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipping profile's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1426,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the shipping profile."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/shipping-profiles/update-shipping-profile.d.ts",
											"qualifiedName": "AdminPostShippingProfilesProfileReq"
										},
										"name": "AdminPostShippingProfilesProfileReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1427,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/shipping-profiles/index.d.ts",
											"qualifiedName": "AdminShippingProfilesRes"
										},
										"name": "AdminShippingProfilesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1428,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1429,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a shipping profile. Associated shipping options are deleted as well."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.shippingProfiles.delete(profileId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1430,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipping profile's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1431,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1432,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1433,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a shipping profile's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the shipping profile's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.shippingProfiles.retrieve(profileId)\n.then(({ shipping_profile }) => {\n  console.log(shipping_profile.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1434,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipping profile's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1435,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/shipping-profiles/index.d.ts",
											"qualifiedName": "AdminShippingProfilesRes"
										},
										"name": "AdminShippingProfilesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1436,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1437,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of shipping profiles."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of shipping profiles."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.shippingProfiles.list()\n.then(({ shipping_profiles }) => {\n  console.log(shipping_profiles.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1438,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/shipping-profiles/index.d.ts",
											"qualifiedName": "AdminShippingProfilesListRes"
										},
										"name": "AdminShippingProfilesListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1416,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 1417,
							"name": "new AdminShippingProfilesResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 1418,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1415,
								"name": "AdminShippingProfilesResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						1416
					]
				},
				{
					"title": "Methods",
					"children": [
						1419,
						1423,
						1428,
						1432,
						1436
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 1439,
			"name": "AdminStockLocationsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Stock Location API Routes](https://docs.medusajs.com/api/admin#stock-locations). To use these API Routes, make sure to install the\n[@medusajs/stock-location](https://docs.medusajs.com/modules/multiwarehouse/install-modules#stock-location-module) module in your Medusa backend.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 438
					},
					{
						"kind": "text",
						"text": ". The methods\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.stockLocations`"
					},
					{
						"kind": "text",
						"text": " property.\n\nA stock location, provided by the [Stock Location module](https://docs.medusajs.com/modules/multiwarehouse/stock-location-module), indicates a physical address that stock-kept items, such as physical products, can be stored in.\nAn admin can create and manage available stock locations.\n\nRelated Guide: [How to manage stock locations](https://docs.medusajs.com/modules/multiwarehouse/admin/manage-stock-locations)."
					}
				]
			},
			"children": [
				{
					"id": 1443,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1444,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a stock location."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the stock location's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.stockLocations.create({\n  name: \"Main Warehouse\",\n})\n.then(({ stock_location }) => {\n  console.log(stock_location.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1445,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The stock location to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/stock-locations/create-stock-location.d.ts",
											"qualifiedName": "AdminPostStockLocationsReq"
										},
										"name": "AdminPostStockLocationsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1446,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/stock-locations/index.d.ts",
											"qualifiedName": "AdminStockLocationsRes"
										},
										"name": "AdminStockLocationsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1447,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1448,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a stock location's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the stock location's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.stockLocations.retrieve(stockLocationId)\n.then(({ stock_location }) => {\n  console.log(stock_location.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1449,
									"name": "itemId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The stock location's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1450,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/stock-locations/index.d.ts",
											"qualifiedName": "AdminStockLocationsRes"
										},
										"name": "AdminStockLocationsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1451,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1452,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a stock location's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the stock location's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.stockLocations.update(stockLocationId, {\n  name: 'Main Warehouse'\n})\n.then(({ stock_location }) => {\n  console.log(stock_location.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1453,
									"name": "stockLocationId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The stock location's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1454,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to be updated in the stock location."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/stock-locations/update-stock-location.d.ts",
											"qualifiedName": "AdminPostStockLocationsLocationReq"
										},
										"name": "AdminPostStockLocationsLocationReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1455,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/stock-locations/index.d.ts",
											"qualifiedName": "AdminStockLocationsRes"
										},
										"name": "AdminStockLocationsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1456,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1457,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a stock location."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.stockLocations.delete(stockLocationId)\n.then(({ id, object, deleted }) => {\n  console.log(id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1458,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The stock location's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1459,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/types/src/common/common.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/types"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1460,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1461,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of stock locations. The stock locations can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`name`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`created_at`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter.\nThe stock locations can also be sorted or paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of stock locations with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list stock locations:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.stockLocations.list()\n.then(({ stock_locations, limit, offset, count }) => {\n  console.log(stock_locations.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the stock locations:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.stockLocations.list({\n  expand: \"address\"\n})\n.then(({ stock_locations, limit, offset, count }) => {\n  console.log(stock_locations.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`20`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.stockLocations.list({\n  expand: \"address\",\n  limit,\n  offset\n})\n.then(({ stock_locations, limit, offset, count }) => {\n  console.log(stock_locations.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1462,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved stock locations."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/stock-locations/list-stock-locations.d.ts",
											"qualifiedName": "AdminGetStockLocationsParams"
										},
										"name": "AdminGetStockLocationsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1463,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/stock-locations/index.d.ts",
											"qualifiedName": "AdminStockLocationsListRes"
										},
										"name": "AdminStockLocationsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1440,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 1441,
							"name": "new AdminStockLocationsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 1442,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1439,
								"name": "AdminStockLocationsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						1440
					]
				},
				{
					"title": "Methods",
					"children": [
						1443,
						1447,
						1451,
						1456,
						1460
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 1464,
			"name": "AdminStoresResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Store API Routes](https://docs.medusajs.com/api/admin#store). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.store`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 438
					},
					{
						"kind": "text",
						"text": ".\n\nA store indicates the general configurations and details about the commerce store. By default, there's only one store in the Medusa backend.\nAdmins can manage the store and its details or configurations."
					}
				]
			},
			"children": [
				{
					"id": 1468,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1469,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update the store's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the store's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.store.update({\n  name: \"Medusa Store\"\n})\n.then(({ store }) => {\n  console.log(store.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1470,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the store."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/store/update-store.d.ts",
											"qualifiedName": "AdminPostStoreReq"
										},
										"name": "AdminPostStoreReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1471,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/store/index.d.ts",
											"qualifiedName": "AdminStoresRes"
										},
										"name": "AdminStoresRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1472,
					"name": "addCurrency",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1473,
							"name": "addCurrency",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add a currency code to the available currencies in a store. This doesn't create new currencies, as currencies are defined within the Medusa backend. \nTo create a currency, you can [create a migration](https://docs.medusajs.com/development/entities/migrations/create) that inserts the currency into the database."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the store's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.store.addCurrency(\"eur\")\n.then(({ store }) => {\n  console.log(store.currencies);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1474,
									"name": "currency_code",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The code of the currency to add to the store."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1475,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/store/index.d.ts",
											"qualifiedName": "AdminStoresRes"
										},
										"name": "AdminStoresRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1476,
					"name": "deleteCurrency",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1477,
							"name": "deleteCurrency",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a currency code from the available currencies in a store. This doesn't completely delete the currency and it can be added again later to the store."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the store's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.store.deleteCurrency(\"eur\")\n.then(({ store }) => {\n  console.log(store.currencies);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1478,
									"name": "currency_code",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The code of the currency to delete from the store."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1479,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/store/index.d.ts",
											"qualifiedName": "AdminStoresRes"
										},
										"name": "AdminStoresRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1480,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1481,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve the store's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the store's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.store.retrieve()\n.then(({ store }) => {\n  console.log(store.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1482,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/store/index.d.ts",
											"qualifiedName": "AdminExtendedStoresRes"
										},
										"name": "AdminExtendedStoresRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1483,
					"name": "listPaymentProviders",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1484,
							"name": "listPaymentProviders",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of available payment providers in a store."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of payment providers."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.store.listPaymentProviders()\n.then(({ payment_providers }) => {\n  console.log(payment_providers.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1485,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/store/index.d.ts",
											"qualifiedName": "AdminPaymentProvidersList"
										},
										"name": "AdminPaymentProvidersList",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1486,
					"name": "listTaxProviders",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1487,
							"name": "listTaxProviders",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of available tax providers in a store."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of tax providers."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.store.listTaxProviders()\n.then(({ tax_providers }) => {\n  console.log(tax_providers.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1488,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/store/index.d.ts",
											"qualifiedName": "AdminTaxProvidersList"
										},
										"name": "AdminTaxProvidersList",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1465,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 1466,
							"name": "new AdminStoresResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 1467,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1464,
								"name": "AdminStoresResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						1465
					]
				},
				{
					"title": "Methods",
					"children": [
						1468,
						1472,
						1476,
						1480,
						1483,
						1486
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 1489,
			"name": "AdminSwapsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Swap API Routes](https://docs.medusajs.com/api/admin#swaps). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.swaps`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 438
					},
					{
						"kind": "text",
						"text": ".\n\nA swap is created by a customer or an admin to exchange an item with a new one.\nCreating a swap implicitely includes creating a return for the item being exchanged.\n\nRelated Guide: [How to manage swaps](https://docs.medusajs.com/modules/orders/admin/manage-swaps)"
					}
				]
			},
			"children": [
				{
					"id": 1493,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1494,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a swap's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the swap's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.swaps.retrieve(swapId)\n.then(({ swap }) => {\n  console.log(swap.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1495,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The swap's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1496,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/swaps/index.d.ts",
											"qualifiedName": "AdminSwapsRes"
										},
										"name": "AdminSwapsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1497,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1498,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of swaps. The swaps can be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of swaps with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list swaps:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.swaps.list()\n.then(({ swaps }) => {\n  console.log(swaps.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`50`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.swaps.list({\n  limit,\n  offset\n})\n.then(({ swaps }) => {\n  console.log(swaps.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1499,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Pagination configurations to apply on the retrieved swaps."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/swaps/list-swaps.d.ts",
											"qualifiedName": "AdminGetSwapsParams"
										},
										"name": "AdminGetSwapsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1500,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/swaps/index.d.ts",
											"qualifiedName": "AdminSwapsListRes"
										},
										"name": "AdminSwapsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1490,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 1491,
							"name": "new AdminSwapsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 1492,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1489,
								"name": "AdminSwapsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						1490
					]
				},
				{
					"title": "Methods",
					"children": [
						1493,
						1497
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 1501,
			"name": "AdminTaxRatesResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Tax Rate API Routes](https://docs.medusajs.com/api/admin#tax-rates). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.taxRates`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 438
					},
					{
						"kind": "text",
						"text": ".\n\nEach region has at least a default tax rate. Admins can create and manage additional tax rates that can be applied for certain conditions, such as for specific product types.\n\nRelated Guide: [How to manage tax rates](https://docs.medusajs.com/modules/taxes/admin/manage-tax-rates)."
					}
				]
			},
			"children": [
				{
					"id": 1505,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1506,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a tax rate's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the tax rate's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "A simple example that retrieves a tax rate by its ID:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.taxRates.retrieve(taxRateId)\n.then(({ tax_rate }) => {\n  console.log(tax_rate.id);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.taxRates.retrieve(taxRateId, {\n  expand: \"shipping_options\"\n})\n.then(({ tax_rate }) => {\n  console.log(tax_rate.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1507,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The tax rate's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1508,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on retrieved tax rates."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/get-tax-rate.d.ts",
											"qualifiedName": "AdminGetTaxRatesTaxRateParams"
										},
										"name": "AdminGetTaxRatesTaxRateParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1509,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/index.d.ts",
											"qualifiedName": "AdminTaxRatesRes"
										},
										"name": "AdminTaxRatesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1510,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1511,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of tax rates. The tax rates can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`name`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`rate`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The tax rates can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of tax rates with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list tax rates:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.taxRates.list()\n.then(({ tax_rates, limit, offset, count }) => {\n  console.log(tax_rates.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the tax rates:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.taxRates.list({\n  expand: [\"shipping_options\"]\n})\n.then(({ tax_rates, limit, offset, count }) => {\n  console.log(tax_rates.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`50`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.taxRates.list({\n  expand: [\"shipping_options\"],\n  limit,\n  offset\n})\n.then(({ tax_rates, limit, offset, count }) => {\n  console.log(tax_rates.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1512,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations applied to the retrieved tax rates."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/list-tax-rates.d.ts",
											"qualifiedName": "AdminGetTaxRatesParams"
										},
										"name": "AdminGetTaxRatesParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1513,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/index.d.ts",
											"qualifiedName": "AdminTaxRatesListRes"
										},
										"name": "AdminTaxRatesListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1514,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1515,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a tax rate."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the tax rate's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.taxRates.create({\n  code: \"TEST\",\n  name: \"New Tax Rate\",\n  region_id\n})\n.then(({ tax_rate }) => {\n  console.log(tax_rate.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1516,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The tax rate to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/create-tax-rate.d.ts",
											"qualifiedName": "AdminPostTaxRatesReq"
										},
										"name": "AdminPostTaxRatesReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1517,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/create-tax-rate.d.ts",
											"qualifiedName": "AdminPostTaxRatesParams"
										},
										"name": "AdminPostTaxRatesParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1518,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/index.d.ts",
											"qualifiedName": "AdminTaxRatesRes"
										},
										"name": "AdminTaxRatesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1519,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1520,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a tax rate's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the tax rate's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.taxRates.update(taxRateId, {\n  name: \"New Tax Rate\"\n})\n.then(({ tax_rate }) => {\n  console.log(tax_rate.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1521,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The tax rate's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1522,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/update-tax-rate.d.ts",
											"qualifiedName": "AdminPostTaxRatesTaxRateReq"
										},
										"name": "AdminPostTaxRatesTaxRateReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1523,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/update-tax-rate.d.ts",
											"qualifiedName": "AdminPostTaxRatesTaxRateParams"
										},
										"name": "AdminPostTaxRatesTaxRateParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1524,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/index.d.ts",
											"qualifiedName": "AdminTaxRatesRes"
										},
										"name": "AdminTaxRatesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1525,
					"name": "addProducts",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1526,
							"name": "addProducts",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add products to a tax rate."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the tax rate's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.taxRates.addProducts(taxRateId, {\n  products: [\n    productId\n  ]\n})\n.then(({ tax_rate }) => {\n  console.log(tax_rate.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1527,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The tax rate's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1528,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The products to add to the tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/add-to-products.d.ts",
											"qualifiedName": "AdminPostTaxRatesTaxRateProductsReq"
										},
										"name": "AdminPostTaxRatesTaxRateProductsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1529,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/add-to-products.d.ts",
											"qualifiedName": "AdminPostTaxRatesTaxRateProductsParams"
										},
										"name": "AdminPostTaxRatesTaxRateProductsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1530,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/index.d.ts",
											"qualifiedName": "AdminTaxRatesRes"
										},
										"name": "AdminTaxRatesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1531,
					"name": "addProductTypes",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1532,
							"name": "addProductTypes",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add product types to a tax rate."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the tax rate's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.taxRates.addProductTypes(taxRateId, {\n  product_types: [\n    productTypeId\n  ]\n})\n.then(({ tax_rate }) => {\n  console.log(tax_rate.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1533,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The tax rate's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1534,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product types to add to the tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/add-to-product-types.d.ts",
											"qualifiedName": "AdminPostTaxRatesTaxRateProductTypesReq"
										},
										"name": "AdminPostTaxRatesTaxRateProductTypesReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1535,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/get-tax-rate.d.ts",
											"qualifiedName": "AdminGetTaxRatesTaxRateParams"
										},
										"name": "AdminGetTaxRatesTaxRateParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1536,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/index.d.ts",
											"qualifiedName": "AdminTaxRatesRes"
										},
										"name": "AdminTaxRatesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1537,
					"name": "addShippingOptions",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1538,
							"name": "addShippingOptions",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add shipping options to a tax rate."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the tax rate's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.taxRates.addShippingOptions(taxRateId, {\n  shipping_options: [\n    shippingOptionId\n  ]\n})\n.then(({ tax_rate }) => {\n  console.log(tax_rate.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1539,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The tax rate's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1540,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipping options to add to the tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/add-to-shipping-options.d.ts",
											"qualifiedName": "AdminPostTaxRatesTaxRateShippingOptionsReq"
										},
										"name": "AdminPostTaxRatesTaxRateShippingOptionsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1541,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/add-to-shipping-options.d.ts",
											"qualifiedName": "AdminPostTaxRatesTaxRateShippingOptionsParams"
										},
										"name": "AdminPostTaxRatesTaxRateShippingOptionsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1542,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/index.d.ts",
											"qualifiedName": "AdminTaxRatesRes"
										},
										"name": "AdminTaxRatesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1543,
					"name": "removeProducts",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1544,
							"name": "removeProducts",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Remove products from a tax rate. This only removes the association between the products and the tax rate. It does not delete the products."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the tax rate's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.taxRates.removeProducts(taxRateId, {\n  products: [\n    productId\n  ]\n})\n.then(({ tax_rate }) => {\n  console.log(tax_rate.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1545,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The tax rate's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1546,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The products to remove from the tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/remove-from-products.d.ts",
											"qualifiedName": "AdminDeleteTaxRatesTaxRateProductsReq"
										},
										"name": "AdminDeleteTaxRatesTaxRateProductsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1547,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/remove-from-products.d.ts",
											"qualifiedName": "AdminDeleteTaxRatesTaxRateProductsParams"
										},
										"name": "AdminDeleteTaxRatesTaxRateProductsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1548,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/index.d.ts",
											"qualifiedName": "AdminTaxRatesRes"
										},
										"name": "AdminTaxRatesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1549,
					"name": "removeProductTypes",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1550,
							"name": "removeProductTypes",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Remove product types from a tax rate. This only removes the association between the product types and the tax rate. It does not delete the product types."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the tax rate's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.taxRates.removeProductTypes(taxRateId, {\n  product_types: [\n    productTypeId\n  ]\n})\n.then(({ tax_rate }) => {\n  console.log(tax_rate.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1551,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The tax rate's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1552,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product types to remove from the tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/remove-from-product-types.d.ts",
											"qualifiedName": "AdminDeleteTaxRatesTaxRateProductTypesReq"
										},
										"name": "AdminDeleteTaxRatesTaxRateProductTypesReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1553,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/remove-from-product-types.d.ts",
											"qualifiedName": "AdminDeleteTaxRatesTaxRateProductTypesParams"
										},
										"name": "AdminDeleteTaxRatesTaxRateProductTypesParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1554,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/index.d.ts",
											"qualifiedName": "AdminTaxRatesRes"
										},
										"name": "AdminTaxRatesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1555,
					"name": "removeShippingOptions",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1556,
							"name": "removeShippingOptions",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Remove shipping options from a tax rate. This only removes the association between the shipping options and the tax rate. It does not delete the shipping options."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the tax rate's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.taxRates.removeShippingOptions(taxRateId, {\n  shipping_options: [\n    shippingOptionId\n  ]\n})\n.then(({ tax_rate }) => {\n  console.log(tax_rate.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1557,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The tax rate's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1558,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipping options to remove from the tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/remove-from-shipping-options.d.ts",
											"qualifiedName": "AdminDeleteTaxRatesTaxRateShippingOptionsReq"
										},
										"name": "AdminDeleteTaxRatesTaxRateShippingOptionsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1559,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/remove-from-shipping-options.d.ts",
											"qualifiedName": "AdminDeleteTaxRatesTaxRateShippingOptionsParams"
										},
										"name": "AdminDeleteTaxRatesTaxRateShippingOptionsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1560,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/index.d.ts",
											"qualifiedName": "AdminTaxRatesRes"
										},
										"name": "AdminTaxRatesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1561,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1562,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a tax rate. Resources associated with the tax rate, such as products or product types, are not deleted."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.taxRates.delete(taxRateId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1563,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The tax rate's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1564,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1502,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 1503,
							"name": "new AdminTaxRatesResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 1504,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1501,
								"name": "AdminTaxRatesResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						1502
					]
				},
				{
					"title": "Methods",
					"children": [
						1505,
						1510,
						1514,
						1519,
						1525,
						1531,
						1537,
						1543,
						1549,
						1555,
						1561
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 1565,
			"name": "AdminUploadsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Upload API Routes](https://docs.medusajs.com/api/admin#uploads). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.uploads`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 438
					},
					{
						"kind": "text",
						"text": ".\n\nThe methods in this class are used to upload any type of resources. For example, they can be used to upload CSV files that are used to import products into the store.\n\nRelated Guide: [How to upload CSV file when importing a product](https://docs.medusajs.com/modules/products/admin/import-products#1-upload-csv-file)."
					}
				]
			},
			"children": [
				{
					"id": 1572,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1573,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Upload a file or multiple files to a public bucket or storage. The file upload is handled by the file service installed on the Medusa backend."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the uploaded file details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.uploads.create(file)\n.then(({ uploads }) => {\n  console.log(uploads.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1574,
									"name": "file",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The file(s) to upload."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
											"qualifiedName": "AdminCreateUploadPayload"
										},
										"name": "AdminCreateUploadPayload",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/uploads/index.d.ts",
											"qualifiedName": "AdminUploadsRes"
										},
										"name": "AdminUploadsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1575,
					"name": "createProtected",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1576,
							"name": "createProtected",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Upload a file to an ACL or a non-public bucket. The file upload is handled by the file service installed on the Medusa backend."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the uploaded file details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.uploads.createProtected(file)\n.then(({ uploads }) => {\n  console.log(uploads.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1577,
									"name": "file",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The file to upload."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
											"qualifiedName": "AdminCreateUploadPayload"
										},
										"name": "AdminCreateUploadPayload",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/uploads/index.d.ts",
											"qualifiedName": "AdminUploadsRes"
										},
										"name": "AdminUploadsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1578,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1579,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete an uploaded file from storage. The file is deleted using the installed file service on the Medusa backend."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.uploads.delete({\n  file_key\n})\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1580,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The uploaded file to delete."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/uploads/delete-upload.d.ts",
											"qualifiedName": "AdminDeleteUploadsReq"
										},
										"name": "AdminDeleteUploadsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1581,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1582,
					"name": "getPresignedDownloadUrl",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1583,
							"name": "getPresignedDownloadUrl",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create and retrieve a presigned or public download URL for a file. The URL creation is handled by the file service installed on the Medusa backend."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the download URL details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.uploads.getPresignedDownloadUrl({\n  file_key\n})\n.then(({ download_url }) => {\n  console.log(download_url);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1584,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The uploaded file to get a presigned download URL for."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/uploads/get-download-url.d.ts",
											"qualifiedName": "AdminPostUploadsDownloadUrlReq"
										},
										"name": "AdminPostUploadsDownloadUrlReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1585,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/uploads/index.d.ts",
											"qualifiedName": "AdminUploadsDownloadUrlRes"
										},
										"name": "AdminUploadsDownloadUrlRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1586,
					"name": "_createPayload",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isPrivate": true
					},
					"signatures": [
						{
							"id": 1587,
							"name": "_createPayload",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 1588,
									"name": "file",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
											"qualifiedName": "AdminCreateUploadPayload"
										},
										"name": "AdminCreateUploadPayload",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.dom.d.ts",
									"qualifiedName": "FormData"
								},
								"name": "FormData",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 1566,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 1567,
							"name": "new AdminUploadsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 1568,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1565,
								"name": "AdminUploadsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						1566
					]
				},
				{
					"title": "Methods",
					"children": [
						1572,
						1575,
						1578,
						1582,
						1586
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 1589,
			"name": "AdminUsersResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin User API Routes](https://docs.medusajs.com/api/admin#users). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.users`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 438
					},
					{
						"kind": "text",
						"text": ".\n\nA store can have more than one user, each having the same privileges. Admins can manage users, their passwords, and more.\n\nRelated Guide: [How to manage users](https://docs.medusajs.com/modules/users/admin/manage-users)."
					}
				]
			},
			"children": [
				{
					"id": 1593,
					"name": "sendResetPasswordToken",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1594,
							"name": "sendResetPasswordToken",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Generate a password token for an admin user with a given email. This also triggers the "
									},
									{
										"kind": "code",
										"text": "`user.password_reset`"
									},
									{
										"kind": "text",
										"text": " event. So, if you have a Notification Service installed\nthat can handle this event, a notification, such as an email, will be sent to the user. The token is triggered as part of the "
									},
									{
										"kind": "code",
										"text": "`user.password_reset`"
									},
									{
										"kind": "text",
										"text": " event's payload.\nThat token must be used later to reset the password using the "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "resetPassword",
										"target": 1597,
										"tsLinkText": ""
									},
									{
										"kind": "text",
										"text": " method."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves when the token is generated successfully."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.users.sendResetPasswordToken({\n  email: \"user@example.com\"\n})\n.then(() => {\n  // successful\n})\n.catch(() => {\n  // error occurred\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1595,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The user's reset details."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/users/reset-password-token.d.ts",
											"qualifiedName": "AdminResetPasswordTokenRequest"
										},
										"name": "AdminResetPasswordTokenRequest",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1596,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1597,
					"name": "resetPassword",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1598,
							"name": "resetPassword",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Reset the password of an admin user using their reset password token. You must generate a reset password token first for the user using the "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "sendResetPasswordToken",
										"target": 1593,
										"tsLinkText": ""
									},
									{
										"kind": "text",
										"text": " method,\nthen use that token to reset the password in this method."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the user's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.users.resetPassword({\n  token: \"supersecrettoken\",\n  password: \"supersecret\"\n})\n.then(({ user }) => {\n  console.log(user.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1599,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The reset details."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/users/reset-password.d.ts",
											"qualifiedName": "AdminResetPasswordRequest"
										},
										"name": "AdminResetPasswordRequest",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1600,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/users/index.d.ts",
											"qualifiedName": "AdminUserRes"
										},
										"name": "AdminUserRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1601,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1602,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve an admin user's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the user's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.users.retrieve(userId)\n.then(({ user }) => {\n  console.log(user.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1603,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The user's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1604,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/users/index.d.ts",
											"qualifiedName": "AdminUserRes"
										},
										"name": "AdminUserRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1605,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1606,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create an admin user. The user has the same privileges as all admin users, and will be able to authenticate and perform admin functionalities right after creation."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the user's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.users.create({\n  email: \"user@example.com\",\n  password: \"supersecret\"\n})\n.then(({ user }) => {\n  console.log(user.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1607,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The user to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
											"qualifiedName": "AdminCreateUserPayload"
										},
										"name": "AdminCreateUserPayload",
										"package": "@medusajs/medusa-js"
									}
								},
								{
									"id": 1608,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/users/index.d.ts",
											"qualifiedName": "AdminUserRes"
										},
										"name": "AdminUserRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1609,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1610,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update an admin user's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the user's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.users.update(userId, {\n  first_name: \"Marcellus\"\n})\n.then(({ user }) => {\n  console.log(user.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1611,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The user's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1612,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the user."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
											"qualifiedName": "AdminUpdateUserPayload"
										},
										"name": "AdminUpdateUserPayload",
										"package": "@medusajs/medusa-js"
									}
								},
								{
									"id": 1613,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/users/index.d.ts",
											"qualifiedName": "AdminUserRes"
										},
										"name": "AdminUserRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1614,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1615,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a user. Once deleted, the user will not be able to authenticate or perform admin functionalities."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.users.delete(userId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1616,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The user's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1617,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1618,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1619,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve all admin users."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of users."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list users:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.users.list()\n.then(({ users }) => {\n  console.log(users.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`20`"
											},
											{
												"kind": "text",
												"text": " users are returned. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.users.list({\n  limit,\n  offset\n})\n.then(({ users, limit, offset, count }) => {\n  console.log(users.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1620,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/users/list-users.d.ts",
											"qualifiedName": "AdminGetUsersParams"
										},
										"name": "AdminGetUsersParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1621,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/users/index.d.ts",
											"qualifiedName": "AdminUsersListRes"
										},
										"name": "AdminUsersListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1590,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 1591,
							"name": "new AdminUsersResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 1592,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1589,
								"name": "AdminUsersResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						1590
					]
				},
				{
					"title": "Methods",
					"children": [
						1593,
						1597,
						1601,
						1605,
						1609,
						1614,
						1618
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 1622,
			"name": "AdminVariantsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Product Variant API Routes](https://docs.medusajs.com/api/admin#product-variants). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.variants`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 438
					},
					{
						"kind": "text",
						"text": ".\n\nProduct variants are the actual salable item in your store. Each variant is a combination of the different option values available on the product.\nProduct variants can be managed through "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "AdminProductsResource",
						"target": 1108
					},
					{
						"kind": "text",
						"text": ".\n\nRelated Guide: [How to manage product variants](https://docs.medusajs.com/modules/products/admin/manage-products#manage-product-variants)."
					}
				]
			},
			"children": [
				{
					"id": 1626,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1627,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of product variants. The product variant can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`id`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`title`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The product variant can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of product variants with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list product variants:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.variants.list()\n.then(({ variants, limit, offset, count }) => {\n  console.log(variants.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the product variants:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.variants.list({\n  expand: \"options\"\n})\n.then(({ variants, limit, offset, count }) => {\n  console.log(variants.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`100`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.variants.list({\n  expand: \"options\",\n  limit,\n  offset\n})\n.then(({ variants, limit, offset, count }) => {\n  console.log(variants.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1628,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved product variants."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/variants/list-variants.d.ts",
											"qualifiedName": "AdminGetVariantsParams"
										},
										"name": "AdminGetVariantsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1629,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/variants/index.d.ts",
											"qualifiedName": "AdminVariantsListRes"
										},
										"name": "AdminVariantsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1630,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1631,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a product variant's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product variant's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "A simple example that retrieves a product variant by its ID:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.variants.retrieve(variantId)\n.then(({ variant }) => {\n  console.log(variant.id);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.variants.retrieve(variantId, {\n  expand: \"options\"\n})\n.then(({ variant }) => {\n  console.log(variant.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1632,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product variant's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1633,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved product variant."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/variants/get-variant.d.ts",
											"qualifiedName": "AdminGetVariantParams"
										},
										"name": "AdminGetVariantParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 1634,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/variants/index.d.ts",
											"qualifiedName": "AdminVariantsRes"
										},
										"name": "AdminVariantsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1635,
					"name": "getInventory",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1636,
							"name": "getInventory",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve the available inventory of a product variant."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the inventory details of the product variant."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.variants.getInventory(variantId)\n.then(({ variant }) => {\n  console.log(variant.inventory, variant.sales_channel_availability)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1637,
									"name": "variantId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product variant's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1638,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/variants/get-inventory.d.ts",
											"qualifiedName": "AdminGetVariantsVariantInventoryRes"
										},
										"name": "AdminGetVariantsVariantInventoryRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 1623,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 1624,
							"name": "new AdminVariantsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 1625,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1622,
								"name": "AdminVariantsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						1623
					]
				},
				{
					"title": "Methods",
					"children": [
						1626,
						1630,
						1635
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 18,
			"name": "AuthResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Auth API Routes](https://docs.medusajs.com/api/store#auth). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.auth`"
					},
					{
						"kind": "text",
						"text": " property.\n\nThe methods in this class allows you to manage a customer's session, such as login or log out.\nYou can send authenticated requests for a customer either using the Cookie header or using the JWT Token.\nWhen you log the customer in using the "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "authenticate",
						"target": 22,
						"tsLinkText": ""
					},
					{
						"kind": "text",
						"text": " method, the JS client will automatically attach the\ncookie header in all subsequent requests.\n\nRelated Guide: [How to implement customer profiles in your storefront](https://docs.medusajs.com/modules/customers/storefront/implement-customer-profiles)."
					}
				]
			},
			"children": [
				{
					"id": 22,
					"name": "authenticate",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 23,
							"name": "authenticate",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Authenticate a customer using their email and password. If the customer is authenticated successfully, the cookie is automatically attached to subsequent requests sent with the JS Client."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.auth.authenticate({\n  email: \"user@example.com\",\n  password: \"user@example.com\"\n})\n.then(({ customer }) => {\n  console.log(customer.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 24,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The credentials of the customer to authenticate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/auth/create-session.d.ts",
											"qualifiedName": "StorePostAuthReq"
										},
										"name": "StorePostAuthReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 25,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/auth/index.d.ts",
											"qualifiedName": "StoreAuthRes"
										},
										"name": "StoreAuthRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 26,
					"name": "deleteSession",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 27,
							"name": "deleteSession",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Log out the customer and remove their authentication session. This method requires "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "customer authentication",
										"target": 22,
										"tsLinkText": "customer authentication"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves when customer is logged out successfully."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.auth.deleteSession()\n.then(() => {\n  // customer logged out successfully\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 28,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 29,
					"name": "getSession",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 30,
							"name": "getSession",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve the details of the logged-in customer. Can also be used to check if there is an authenticated customer.\nThis method requires "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "customer authentication",
										"target": 22,
										"tsLinkText": "customer authentication"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged\nmedusa.auth.getSession()\n.then(({ customer }) => {\n  console.log(customer.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 31,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/auth/index.d.ts",
											"qualifiedName": "StoreAuthRes"
										},
										"name": "StoreAuthRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 32,
					"name": "exists",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 33,
							"name": "exists",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Check if the email is already used by another registered customer. Can be used to validate a new customer's email."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the result of the check."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.auth.exists(\"user@example.com\")\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 34,
									"name": "email",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The email to check."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 35,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/auth/index.d.ts",
											"qualifiedName": "StoreGetAuthEmailRes"
										},
										"name": "StoreGetAuthEmailRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 36,
					"name": "getToken",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 37,
							"name": "getToken",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Authenticate the customer and retrieve a JWT token to use for subsequent authenticated requests."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the access token of the customer, if they're authenticated successfully."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.auth.getToken({\n  email: 'user@example.com',\n  password: 'supersecret'\n})\n.then(({ access_token }) => {\n  console.log(access_token);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 38,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The credentials of the customer to authenticate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/auth/create-session.d.ts",
											"qualifiedName": "StorePostAuthReq"
										},
										"name": "StorePostAuthReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 39,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/auth/index.d.ts",
											"qualifiedName": "StoreBearerAuthRes"
										},
										"name": "StoreBearerAuthRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 19,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 20,
							"name": "new AuthResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 21,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 18,
								"name": "AuthResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						19
					]
				},
				{
					"title": "Methods",
					"children": [
						22,
						26,
						29,
						32,
						36
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 40,
			"name": "CartsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Cart API Routes](https://docs.medusajs.com/api/store#carts). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.carts`"
					},
					{
						"kind": "text",
						"text": " property.\n\nA cart is a virtual shopping bag that customers can use to add items they want to purchase.\nA cart is then used to checkout and place an order.\n\nRelated Guide: [How to implement cart functionality in your storefront](https://docs.medusajs.com/modules/carts-and-checkout/storefront/implement-cart)."
					}
				]
			},
			"children": [
				{
					"id": 41,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 42,
							"name": "new CartsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 43,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 40,
								"name": "CartsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 44,
					"name": "lineItems",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "LineItemsResource",
								"target": 146,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to line-item-related routes part of the [Store Cart API Routes](https://docs.medusajs.com/api/store#carts)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 146,
						"name": "LineItemsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 45,
					"name": "addShippingMethod",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 46,
							"name": "addShippingMethod",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add a shipping method to the cart. The validation of the "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " field is handled by the fulfillment provider of the chosen shipping option."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the cart's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.carts.addShippingMethod(cartId, {\n  option_id\n})\n.then(({ cart }) => {\n  console.log(cart.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 47,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the cart to add the shipping method to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 48,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipping method to add."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/add-shipping-method.d.ts",
											"qualifiedName": "StorePostCartsCartShippingMethodReq"
										},
										"name": "StorePostCartsCartShippingMethodReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 49,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/index.d.ts",
											"qualifiedName": "StoreCartsRes"
										},
										"name": "StoreCartsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 50,
					"name": "complete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 51,
							"name": "complete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Complete a cart and place an order or create a swap, based on the cart's type. This includes attempting to authorize the cart's payment.\nIf authorizing the payment requires more action, the cart will not be completed and the order will not be placed or the swap will not be created.\nAn idempotency key will be generated if none is provided in the header "
									},
									{
										"kind": "code",
										"text": "`Idempotency-Key`"
									},
									{
										"kind": "text",
										"text": " and added to\nthe response. If an error occurs during cart completion or the request is interrupted for any reason, the cart completion can be retried by passing the idempotency\nkey in the "
									},
									{
										"kind": "code",
										"text": "`Idempotency-Key`"
									},
									{
										"kind": "text",
										"text": " header."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the completion details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.carts.complete(cartId)\n.then(({ data, type }) => {\n  console.log(data.id, type);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 52,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the cart to complete."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 53,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/index.d.ts",
											"qualifiedName": "StoreCompleteCartRes"
										},
										"name": "StoreCompleteCartRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 54,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 55,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a Cart. Although optional, specifying the cart's region and sales channel can affect the cart's pricing and\nthe products that can be added to the cart respectively. So, make sure to set those early on and change them if necessary, such as when the customer changes their region.\nIf a customer is logged in, make sure to pass its ID or email within the cart's details so that the cart is attached to the customer."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the created cart's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.carts.create()\n.then(({ cart }) => {\n  console.log(cart.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 56,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The cart to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/create-cart.d.ts",
											"qualifiedName": "StorePostCartReq"
										},
										"name": "StorePostCartReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 57,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/index.d.ts",
											"qualifiedName": "StoreCartsRes"
										},
										"name": "StoreCartsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 58,
					"name": "createPaymentSessions",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 59,
							"name": "createPaymentSessions",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create Payment Sessions for each of the available Payment Providers in the Cart's Region. If there's only one payment session created,\nit will be selected by default. The creation of the payment session uses the payment provider and may require sending requests to third-party services."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the cart's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.carts.createPaymentSessions(cartId)\n.then(({ cart }) => {\n  console.log(cart.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 60,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the cart to create the payment sessions for."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 61,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/index.d.ts",
											"qualifiedName": "StoreCartsRes"
										},
										"name": "StoreCartsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 62,
					"name": "deleteDiscount",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 63,
							"name": "deleteDiscount",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Remove a Discount from a Cart. This only removes the application of the discount, and not completely deletes it. The totals will be re-calculated and the payment sessions\nwill be refreshed after the removal."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the cart's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.carts.deleteDiscount(cartId, code)\n.then(({ cart }) => {\n  console.log(cart.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 64,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "the ID of the cart to remove the discount from."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 65,
									"name": "code",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The code of the discount to remove from the cart."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 66,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/index.d.ts",
											"qualifiedName": "StoreCartsRes"
										},
										"name": "StoreCartsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 67,
					"name": "deletePaymentSession",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 68,
							"name": "deletePaymentSession",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a Payment Session in a Cart. May be useful if a payment has failed. The totals will be recalculated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the cart's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.carts.deletePaymentSession(cartId, \"manual\")\n.then(({ cart }) => {\n  console.log(cart.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 69,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the cart to delete the payment session from."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 70,
									"name": "provider_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment provider that the session is associated with."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 71,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/index.d.ts",
											"qualifiedName": "StoreCartsRes"
										},
										"name": "StoreCartsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 72,
					"name": "refreshPaymentSession",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 73,
							"name": "refreshPaymentSession",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Refresh a Payment Session to ensure that it is in sync with the Cart. This is usually not necessary, but is provided for edge cases."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the cart's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.carts.refreshPaymentSession(cartId, \"manual\")\n.then(({ cart }) => {\n  console.log(cart.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 74,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the cart to refresh its payment session."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 75,
									"name": "provider_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment provider that's associated with the payment session."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 76,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/index.d.ts",
											"qualifiedName": "StoreCartsRes"
										},
										"name": "StoreCartsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 77,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 78,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a Cart's details. This includes recalculating its totals."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the cart's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.carts.retrieve(cartId)\n.then(({ cart }) => {\n  console.log(cart.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 79,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The cart's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 80,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/index.d.ts",
											"qualifiedName": "StoreCartsRes"
										},
										"name": "StoreCartsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 81,
					"name": "setPaymentSession",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 82,
							"name": "setPaymentSession",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Select the Payment Session that will be used to complete the cart. This is typically used when the customer chooses their preferred payment method during checkout.\nThe totals of the cart will be recalculated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the cart's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.carts.setPaymentSession(cartId, {\n  provider_id: \"manual\"\n})\n.then(({ cart }) => {\n  console.log(cart.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 83,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The cart's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 84,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The associated payment provider."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/set-payment-session.d.ts",
											"qualifiedName": "StorePostCartsCartPaymentSessionReq"
										},
										"name": "StorePostCartsCartPaymentSessionReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 85,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/index.d.ts",
											"qualifiedName": "StoreCartsRes"
										},
										"name": "StoreCartsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 86,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 87,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a Cart's details. If the cart has payment sessions and the region was not changed, the payment sessions are updated. The cart's totals are also recalculated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the cart's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.carts.update(cartId, {\n  email: \"user@example.com\"\n})\n.then(({ cart }) => {\n  console.log(cart.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 88,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The cart's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 89,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the cart."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/update-cart.d.ts",
											"qualifiedName": "StorePostCartsCartReq"
										},
										"name": "StorePostCartsCartReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 90,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/index.d.ts",
											"qualifiedName": "StoreCartsRes"
										},
										"name": "StoreCartsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 91,
					"name": "updatePaymentSession",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 92,
							"name": "updatePaymentSession",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a Payment Session with additional data. This can be useful depending on the payment provider used.\nAll payment sessions are updated and cart totals are recalculated afterwards."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the cart's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.carts.updatePaymentSession(cartId, \"manual\", {\n  data: {\n\n  }\n})\n.then(({ cart }) => {\n  console.log(cart.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 93,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The cart's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 94,
									"name": "provider_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment provider that the payment session is associated with."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 95,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the payment session."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/update-payment-session.d.ts",
											"qualifiedName": "StorePostCartsCartPaymentSessionUpdateReq"
										},
										"name": "StorePostCartsCartPaymentSessionUpdateReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 96,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/index.d.ts",
											"qualifiedName": "StoreCartsRes"
										},
										"name": "StoreCartsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						41
					]
				},
				{
					"title": "Properties",
					"children": [
						44
					]
				},
				{
					"title": "Methods",
					"children": [
						45,
						50,
						54,
						58,
						62,
						67,
						72,
						77,
						81,
						86,
						91
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 97,
			"name": "CollectionsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Product Collection API Routes](https://docs.medusajs.com/api/store#product-collections). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.collections`"
					},
					{
						"kind": "text",
						"text": " property.\n\nA product collection is used to organize products for different purposes such as marketing or discount purposes. For example, you can create a Summer Collection.\nUsing the methods in this class, you can list or retrieve a collection's details and products."
					}
				]
			},
			"children": [
				{
					"id": 98,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 99,
							"name": "new CollectionsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 100,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 97,
								"name": "CollectionsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 101,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 102,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a product collection's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the collection's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.collections.retrieve(collectionId)\n.then(({ collection }) => {\n  console.log(collection.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 103,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 104,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/collections/index.d.ts",
											"qualifiedName": "StoreCollectionsRes"
										},
										"name": "StoreCollectionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 105,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 106,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of product collections. The product collections can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`handle`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`created_at`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. \nThe product collections can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of product collections with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list product collections:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.collections.list()\n.then(({ collections, limit, offset, count }) => {\n  console.log(collections.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`10`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.collections.list({\n  limit,\n  offset\n})\n.then(({ collections, limit, offset, count }) => {\n  console.log(collections.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 107,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved product collections."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/collections/list-collections.d.ts",
											"qualifiedName": "StoreGetCollectionsParams"
										},
										"name": "StoreGetCollectionsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 108,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/collections/index.d.ts",
											"qualifiedName": "StoreCollectionsListRes"
										},
										"name": "StoreCollectionsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						98
					]
				},
				{
					"title": "Methods",
					"children": [
						101,
						105
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 109,
			"name": "CustomersResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Customer API Routes](https://docs.medusajs.com/api/store#customers_postcustomers). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.customers`"
					},
					{
						"kind": "text",
						"text": " property.\n\nA customer can register and manage their information such as addresses, orders, payment methods, and more.\n\nRelated Guide: [How to implement customer profiles in your storefront](https://docs.medusajs.com/modules/customers/storefront/implement-customer-profiles)."
					}
				]
			},
			"children": [
				{
					"id": 110,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 111,
							"name": "new CustomersResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 112,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 109,
								"name": "CustomerResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 113,
					"name": "paymentMethods",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "PaymentMethodsResource",
								"target": 241,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to payment-related routes part of the [Store Customer API Routes](https://docs.medusajs.com/api/store#customers_postcustomers)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 241,
						"name": "PaymentMethodsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 114,
					"name": "addresses",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AddressesResource",
								"target": 1,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to address-related routes part of the [Store Customer API Routes](https://docs.medusajs.com/api/store#customers_postcustomers)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 1,
						"name": "AddressesResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 115,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 116,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Register a new customer. This will also automatically authenticate the customer and set their login session in the response Cookie header.\nSubsequent requests sent with the JS client are sent with the Cookie session automatically."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the created customer's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.customers.create({\n  first_name: \"Alec\",\n  last_name: \"Reynolds\",\n  email: \"user@example.com\",\n  password: \"supersecret\"\n})\n.then(({ customer }) => {\n  console.log(customer.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 117,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The details of the customer to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/create-customer.d.ts",
											"qualifiedName": "StorePostCustomersReq"
										},
										"name": "StorePostCustomersReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 118,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/index.d.ts",
											"qualifiedName": "StoreCustomersRes"
										},
										"name": "StoreCustomersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 119,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 120,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve the logged-in customer's details. This method requires "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "customer authentication",
										"target": 22
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the logged-in customer's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged\nmedusa.customers.retrieve()\n.then(({ customer }) => {\n  console.log(customer.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 121,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/index.d.ts",
											"qualifiedName": "StoreCustomersRes"
										},
										"name": "StoreCustomersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 122,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 123,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update the logged-in customer's details. This method requires "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "customer authentication",
										"target": 22
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the logged-in customer's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged\nmedusa.customers.update({\n  first_name: \"Laury\"\n})\n.then(({ customer }) => {\n  console.log(customer.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 124,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the logged-in customer."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/update-customer.d.ts",
											"qualifiedName": "StorePostCustomersCustomerReq"
										},
										"name": "StorePostCustomersCustomerReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 125,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/index.d.ts",
											"qualifiedName": "StoreCustomersRes"
										},
										"name": "StoreCustomersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 126,
					"name": "listOrders",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 127,
							"name": "listOrders",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of the logged-in customer's orders. The orders can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`status`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`fulfillment_status`"
									},
									{
										"kind": "text",
										"text": ". The orders can also be paginated.\nThis method requires "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "customer authentication",
										"target": 22
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of orders with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged\nmedusa.customers.listOrders()\n.then(({ orders, limit, offset, count }) => {\n  console.log(orders);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 128,
									"name": "params",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved orders."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/list-orders.d.ts",
											"qualifiedName": "StoreGetCustomersCustomerOrdersParams"
										},
										"name": "StoreGetCustomersCustomerOrdersParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 129,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/index.d.ts",
											"qualifiedName": "StoreCustomersListOrdersRes"
										},
										"name": "StoreCustomersListOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 130,
					"name": "resetPassword",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 131,
							"name": "resetPassword",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Reset a customer's password using a password token created by a previous request using the "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "generatePasswordToken",
										"target": 134,
										"tsLinkText": ""
									},
									{
										"kind": "text",
										"text": " method. If the password token expired,\nyou must create a new one."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.customers.resetPassword({\n  email: \"user@example.com\",\n  password: \"supersecret\",\n  token: \"supersecrettoken\"\n})\n.then(({ customer }) => {\n  console.log(customer.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 132,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The necessary details to reset the password."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/reset-password.d.ts",
											"qualifiedName": "StorePostCustomersResetPasswordReq"
										},
										"name": "StorePostCustomersResetPasswordReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 133,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/index.d.ts",
											"qualifiedName": "StoreCustomersRes"
										},
										"name": "StoreCustomersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 134,
					"name": "generatePasswordToken",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 135,
							"name": "generatePasswordToken",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a reset password token to be used when sending a request with the "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "resetPassword",
										"target": 130,
										"tsLinkText": ""
									},
									{
										"kind": "text",
										"text": " method. This emits the event "
									},
									{
										"kind": "code",
										"text": "`customer.password_reset`"
									},
									{
										"kind": "text",
										"text": ". If a notification provider is\ninstalled in the Medusa backend and is configured to handle this event, a notification to the customer, such as an email, may be sent with reset instructions."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves when reset password token is created successfully."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.customers.generatePasswordToken({\n  email: \"user@example.com\"\n})\n.then(() => {\n  // successful\n})\n.catch(() => {\n  // failed\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 136,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The necessary details to create the reset password token."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/reset-password-token.d.ts",
											"qualifiedName": "StorePostCustomersCustomerPasswordTokenReq"
										},
										"name": "StorePostCustomersCustomerPasswordTokenReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 137,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						110
					]
				},
				{
					"title": "Properties",
					"children": [
						113,
						114
					]
				},
				{
					"title": "Methods",
					"children": [
						115,
						119,
						122,
						126,
						130,
						134
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 138,
			"name": "GiftCardsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Gift Card API Routes](https://docs.medusajs.com/api/store#gift-cards). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.giftCards`"
					},
					{
						"kind": "text",
						"text": " property.\n\nCustomers can use gift cards during checkout to deduct the gift card's balance from the checkout total.\nThe methods in this class allow retrieving a gift card's details by its code. A gift card can be applied to a cart using "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "CartsResource",
						"target": 40
					},
					{
						"kind": "text",
						"text": ".\n\nRelated Guide: [How to use gift cards in a storefront](https://docs.medusajs.com/modules/gift-cards/storefront/use-gift-cards)."
					}
				]
			},
			"children": [
				{
					"id": 139,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 140,
							"name": "new GiftCardsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 141,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 138,
								"name": "GiftCardsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 142,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 143,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a Gift Card's details by its associated unique code."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the gift card."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.giftCards.retrieve(code)\n.then(({ gift_card }) => {\n  console.log(gift_card.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 144,
									"name": "code",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The code of the gift card."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 145,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/gift-cards/index.d.ts",
											"qualifiedName": "StoreGiftCardsRes"
										},
										"name": "StoreGiftCardsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						139
					]
				},
				{
					"title": "Methods",
					"children": [
						142
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 146,
			"name": "LineItemsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to Line Item API Routes part of the [Store Cart API Routes](https://docs.medusajs.com/api/store#carts). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.carts.lineItems`"
					},
					{
						"kind": "text",
						"text": " property."
					}
				]
			},
			"children": [
				{
					"id": 147,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 148,
							"name": "new LineItemsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 149,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 146,
								"name": "LineItemsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 150,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 151,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Generate a Line Item with a given Product Variant and adds it to the Cart"
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the associated cart's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.carts.lineItems.create(cart_id, {\n  variant_id,\n  quantity: 1\n})\n.then(({ cart }) => {\n  console.log(cart.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 152,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The cart's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 153,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The line item to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/create-line-item/index.d.ts",
											"qualifiedName": "StorePostCartsCartLineItemsReq"
										},
										"name": "StorePostCartsCartLineItemsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 154,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/index.d.ts",
											"qualifiedName": "StoreCartsRes"
										},
										"name": "StoreCartsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 155,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 156,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a line item's data."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the associated cart's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.carts.lineItems.update(cartId, lineId, {\n  quantity: 1\n})\n.then(({ cart }) => {\n  console.log(cart.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 157,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the line item's cart."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 158,
									"name": "line_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the line item to update."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 159,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The data to update in the line item."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/update-line-item.d.ts",
											"qualifiedName": "StorePostCartsCartLineItemsItemReq"
										},
										"name": "StorePostCartsCartLineItemsItemReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 160,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/index.d.ts",
											"qualifiedName": "StoreCartsRes"
										},
										"name": "StoreCartsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 161,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 162,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a line item from a cart. The payment sessions will be updated and the totals will be recalculated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the associated cart's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.carts.lineItems.delete(cartId, lineId)\n.then(({ cart }) => {\n  console.log(cart.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 163,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the line item's cart."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 164,
									"name": "line_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the line item to delete."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 165,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/index.d.ts",
											"qualifiedName": "StoreCartsRes"
										},
										"name": "StoreCartsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						147
					]
				},
				{
					"title": "Methods",
					"children": [
						150,
						155,
						161
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 166,
			"name": "OrderEditsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Order Edits API Routes](https://docs.medusajs.com/api/store#order-edits). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.orderEdits`"
					},
					{
						"kind": "text",
						"text": " property.\n\nOrder edits are changes made to items in an order such as adding, updating their quantity, or deleting them. Order edits are created by the admin.\nA customer can review order edit requests created by an admin and confirm or decline them.\n\nRelated Guide: [How to handle order edits in a storefront](https://docs.medusajs.com/modules/orders/storefront/handle-order-edits)."
					}
				]
			},
			"children": [
				{
					"id": 167,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 168,
							"name": "new OrderEditsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 169,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 166,
								"name": "OrderEditsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 170,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 171,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve an Order Edit's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order edit's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.orderEdits.retrieve(orderEditId)\n.then(({ order_edit }) => {\n  console.log(order_edit.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 172,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order edit."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 173,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/order-edits/index.d.ts",
											"qualifiedName": "StoreOrderEditsRes"
										},
										"name": "StoreOrderEditsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 174,
					"name": "decline",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 175,
							"name": "decline",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Decline an Order Edit. The changes are not reflected on the original order."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order edit's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.orderEdits.decline(orderEditId)\n.then(({ order_edit }) => {\n  console.log(order_edit.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 176,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order edit."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 177,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The decline details."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/order-edits/decline-order-edit.d.ts",
											"qualifiedName": "StorePostOrderEditsOrderEditDecline"
										},
										"name": "StorePostOrderEditsOrderEditDecline",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 178,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/order-edits/index.d.ts",
											"qualifiedName": "StoreOrderEditsRes"
										},
										"name": "StoreOrderEditsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 179,
					"name": "complete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 180,
							"name": "complete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Complete and confirm an Order Edit and reflect its changes on the original order. Any additional payment required must be authorized first using the "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "PaymentCollectionsResource",
										"target": 207
									},
									{
										"kind": "text",
										"text": " routes."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order edit's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.orderEdits.complete(orderEditId)\n.then(({ order_edit }) => {\n  console.log(order_edit.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 181,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order edit."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 182,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/order-edits/index.d.ts",
											"qualifiedName": "StoreOrderEditsRes"
										},
										"name": "StoreOrderEditsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						167
					]
				},
				{
					"title": "Methods",
					"children": [
						170,
						174,
						179
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 183,
			"name": "OrdersResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Order API Routes](https://docs.medusajs.com/api/store#orders). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.orders`"
					},
					{
						"kind": "text",
						"text": " property.\n\nOrders are purchases made by customers, typically through a storefront.\nOrders are placed and created using "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "CartsResource",
						"target": 40
					},
					{
						"kind": "text",
						"text": ". The methods in this class allow retrieving and claiming orders.\n\nRelated Guide: [How to retrieve order details in a storefront](https://docs.medusajs.com/modules/orders/storefront/retrieve-order-details)."
					}
				]
			},
			"children": [
				{
					"id": 184,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 185,
							"name": "new OrdersResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 186,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 183,
								"name": "OrdersResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 187,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 188,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve an Order's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the order."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.orders.retrieve(orderId)\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 189,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The order's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 190,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/orders/index.d.ts",
											"qualifiedName": "StoreOrdersRes"
										},
										"name": "StoreOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 191,
					"name": "retrieveByCartId",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 192,
							"name": "retrieveByCartId",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve an order's details by the ID of the cart that was used to create the order."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the order."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.orders.retrieveByCartId(cartId)\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 193,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The cart's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 194,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/orders/index.d.ts",
											"qualifiedName": "StoreOrdersRes"
										},
										"name": "StoreOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 195,
					"name": "lookupOrder",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 196,
							"name": "lookupOrder",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Look up an order using filters. If the filters don't narrow down the results to a single order, a "
									},
									{
										"kind": "code",
										"text": "`404`"
									},
									{
										"kind": "text",
										"text": " response is returned with no orders."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the order."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.orders.lookupOrder({\n  display_id: 1,\n  email: \"user@example.com\"\n})\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 197,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters used to retrieve the order."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/orders/lookup-order.d.ts",
											"qualifiedName": "StoreGetOrdersParams"
										},
										"name": "StoreGetOrdersParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 198,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/orders/index.d.ts",
											"qualifiedName": "StoreOrdersRes"
										},
										"name": "StoreOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 199,
					"name": "requestCustomerOrders",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 200,
							"name": "requestCustomerOrders",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Allow the logged-in customer to claim ownership of one or more orders. This generates a token that can be used later on to verify the claim using the "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "confirmRequest",
										"target": 203,
										"tsLinkText": ""
									},
									{
										"kind": "text",
										"text": " method.\nThis also emits the event "
									},
									{
										"kind": "code",
										"text": "`order-update-token.created`"
									},
									{
										"kind": "text",
										"text": ". So, if you have a notification provider installed that handles this event and sends the customer a notification, such as an email,\nthe customer should receive instructions on how to finalize their claim ownership."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves when the request is created successfully."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.orders.requestCustomerOrders({\n  order_ids,\n})\n.then(() => {\n  // successful\n})\n.catch(() => {\n  // an error occurred\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 201,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The orders to claim."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/orders/request-order.d.ts",
											"qualifiedName": "StorePostCustomersCustomerOrderClaimReq"
										},
										"name": "StorePostCustomersCustomerOrderClaimReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 202,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 203,
					"name": "confirmRequest",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 204,
							"name": "confirmRequest",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Verify the claim order token provided to the customer when they request ownership of an order."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves when the claim order is verified successfully."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.orders.confirmRequest(\n  token,\n)\n.then(() => {\n  // successful\n})\n.catch(() => {\n  // an error occurred\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 205,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The claim order to verify."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/orders/confirm-order-request.d.ts",
											"qualifiedName": "StorePostCustomersCustomerAcceptClaimReq"
										},
										"name": "StorePostCustomersCustomerAcceptClaimReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 206,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						184
					]
				},
				{
					"title": "Methods",
					"children": [
						187,
						191,
						195,
						199,
						203
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 207,
			"name": "PaymentCollectionsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Payment Collection API Routes](https://docs.medusajs.com/api/store#payment-collections). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.paymentCollections`"
					},
					{
						"kind": "text",
						"text": " property.\n\nA payment collection is useful for managing additional payments, such as for Order Edits, or installment payments."
					}
				]
			},
			"children": [
				{
					"id": 208,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 209,
							"name": "new PaymentCollectionsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 210,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 207,
								"name": "PaymentCollectionsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 211,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 212,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a Payment Collection's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the payment collection's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "A simple example that retrieves a payment collection by its ID:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.paymentCollections.retrieve(paymentCollectionId)\n.then(({ payment_collection }) => {\n  console.log(payment_collection.id)\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.paymentCollections.retrieve(paymentCollectionId, {\n  expand: \"region\"\n})\n.then(({ payment_collection }) => {\n  console.log(payment_collection.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 213,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 214,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved payment collection."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/payment-collections/get-payment-collection.d.ts",
											"qualifiedName": "StoreGetPaymentCollectionsParams"
										},
										"name": "StoreGetPaymentCollectionsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 215,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/payment-collections/index.d.ts",
											"qualifiedName": "StorePaymentCollectionsRes"
										},
										"name": "StorePaymentCollectionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 216,
					"name": "authorizePaymentSession",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 217,
							"name": "authorizePaymentSession",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Authorize a Payment Session of a Payment Collection."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the payment collection's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.paymentCollections.authorize(paymentId, sessionId)\n.then(({ payment_collection }) => {\n  console.log(payment_collection.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 218,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 219,
									"name": "session_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment session."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 220,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/payment-collections/index.d.ts",
											"qualifiedName": "StorePaymentCollectionsRes"
										},
										"name": "StorePaymentCollectionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 221,
					"name": "authorizePaymentSessionsBatch",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 222,
							"name": "authorizePaymentSessionsBatch",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Authorize the Payment Sessions of a Payment Collection."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the payment collection's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.paymentCollections.authorizePaymentSessionsBatch(paymentCollectionId, {\n session_ids: [\"ps_123456\"]\n})\n.then(({ payment_collection }) => {\n  console.log(payment_collection.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 223,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 224,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The list of payment session IDs to authorize."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/payment-collections/authorize-batch-payment-sessions.d.ts",
											"qualifiedName": "StorePostPaymentCollectionsBatchSessionsAuthorizeReq"
										},
										"name": "StorePostPaymentCollectionsBatchSessionsAuthorizeReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 225,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/payment-collections/index.d.ts",
											"qualifiedName": "StorePaymentCollectionsRes"
										},
										"name": "StorePaymentCollectionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 226,
					"name": "managePaymentSessionsBatch",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 227,
							"name": "managePaymentSessionsBatch",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create, update, or delete a list of payment sessions of a Payment Collections. If a payment session is not provided in the "
									},
									{
										"kind": "code",
										"text": "`sessions`"
									},
									{
										"kind": "text",
										"text": " array, it's deleted."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the payment collection's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To add two new payment sessions:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\n\n// Total amount = 10000\nmedusa.paymentCollections.managePaymentSessionsBatch(paymentId, {\n  sessions: [\n    {\n      provider_id: \"stripe\",\n      amount: 5000,\n    },\n    {\n      provider_id: \"manual\",\n      amount: 5000,\n    },\n  ]\n})\n.then(({ payment_collection }) => {\n  console.log(payment_collection.id);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo update a payment session and another one by not including it in the payload:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nmedusa.paymentCollections.managePaymentSessionsBatch(paymentId, {\n  sessions: [\n    {\n      provider_id: \"stripe\",\n      amount: 10000,\n      session_id: \"ps_123456\"\n    },\n  ]\n})\n.then(({ payment_collection }) => {\n  console.log(payment_collection.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 228,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 229,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes of each session to update."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/payment-collections/manage-batch-payment-sessions.d.ts",
											"qualifiedName": "StorePostPaymentCollectionsBatchSessionsReq"
										},
										"name": "StorePostPaymentCollectionsBatchSessionsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 230,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/payment-collections/index.d.ts",
											"qualifiedName": "StorePaymentCollectionsRes"
										},
										"name": "StorePaymentCollectionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 231,
					"name": "managePaymentSession",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 232,
							"name": "managePaymentSession",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a Payment Session for a payment provider in a Payment Collection."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the payment collection's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.paymentCollections.managePaymentSession(payment_id, { provider_id: \"stripe\" })\n.then(({ payment_collection }) => {\n  console.log(payment_collection.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 233,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 234,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The payment session to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/payment-collections/manage-payment-session.d.ts",
											"qualifiedName": "StorePaymentCollectionSessionsReq"
										},
										"name": "StorePaymentCollectionSessionsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 235,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/payment-collections/index.d.ts",
											"qualifiedName": "StorePaymentCollectionsRes"
										},
										"name": "StorePaymentCollectionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 236,
					"name": "refreshPaymentSession",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 237,
							"name": "refreshPaymentSession",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Refresh a Payment Session's data to ensure that it is in sync with the Payment Collection."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the refreshed payment session's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.paymentCollections.refreshPaymentSession(paymentCollectionId, sessionId)\n.then(({ payment_session }) => {\n  console.log(payment_session.status);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 238,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 239,
									"name": "session_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment session."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 240,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/payment-collections/index.d.ts",
											"qualifiedName": "StorePaymentCollectionsSessionRes"
										},
										"name": "StorePaymentCollectionsSessionRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						208
					]
				},
				{
					"title": "Methods",
					"children": [
						211,
						216,
						221,
						226,
						231,
						236
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 241,
			"name": "PaymentMethodsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to Payment Method API Routes part of the [Store Customer API Routes](https://docs.medusajs.com/api/store#customers_postcustomers). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.customers.paymentMethods`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "customer authentication",
						"target": 22
					},
					{
						"kind": "text",
						"text": "."
					}
				]
			},
			"children": [
				{
					"id": 242,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 243,
							"name": "new PaymentMethodsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 244,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 241,
								"name": "PaymentMethodsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 245,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 246,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve the logged-in customer's saved payment methods. This method only works with payment providers created with the deprecated Payment Service interface.\nThe payment methods are saved using the Payment Service's third-party service, and not on the Medusa backend. So, they're retrieved from the third-party service."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer's payment methods."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged\nmedusa.customers.paymentMethods.list()\n.then(({ payment_methods }) => {\n  console.log(payment_methods.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 247,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/index.d.ts",
											"qualifiedName": "StoreCustomersListPaymentMethodsRes"
										},
										"name": "StoreCustomersListPaymentMethodsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						242
					]
				},
				{
					"title": "Methods",
					"children": [
						245
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 248,
			"name": "ProductCategoriesResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Product Category API Routes](https://docs.medusajs.com/api/store#product-categories_getproductcategories). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.productCategories`"
					},
					{
						"kind": "text",
						"text": " property.\n\nProducts can be categoriezed into categories. A product can be associated more than one category.\nUsing the methods in this class, you can list or retrieve a category's details and products.\n\nRelated Guide: [How to use product categories in a storefront](https://docs.medusajs.com/modules/products/storefront/use-categories)."
					}
				],
				"blockTags": [
					{
						"tag": "@featureFlag",
						"content": [
							{
								"kind": "text",
								"text": "product_categories"
							}
						]
					}
				]
			},
			"children": [
				{
					"id": 249,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 250,
							"name": "new ProductCategoriesResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 251,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 248,
								"name": "ProductCategoriesResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 252,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 253,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a Product Category's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product category's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "A simple example that retrieves a product category by its ID:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.productCategories.retrieve(productCategoryId)\n.then(({ product_category }) => {\n  console.log(product_category.id);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.productCategories.retrieve(productCategoryId, {\n  expand: \"products\"\n})\n.then(({ product_category }) => {\n  console.log(product_category.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 254,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product category."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 255,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved product categories."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/product-categories/get-product-category.d.ts",
											"qualifiedName": "StoreGetProductCategoriesCategoryParams"
										},
										"name": "StoreGetProductCategoriesCategoryParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 256,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/product-categories/index.d.ts",
											"qualifiedName": "StoreGetProductCategoriesCategoryRes"
										},
										"name": "StoreGetProductCategoriesCategoryRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 257,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 258,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of product categories. The product categories can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`handle`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. \nThe product categories can also be paginated. This method can also be used to retrieve a product category by its handle."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of product categories with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list product categories:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.productCategories.list()\n.then(({ product_categories, limit, offset, count }) => {\n  console.log(product_categories.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo retrieve a product category by its handle:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.productCategories.list({\n  handle: \"women\",\n})\n.then(({ product_categories, limit, offset, count }) => {\n  if (!product_categories.length) {\n    // category does not exist\n  }\n  const category = product_categories[0]\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the product categories:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.productCategories.list({\n  expand: \"products\"\n})\n.then(({ product_categories, limit, offset, count }) => {\n  console.log(product_categories.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`100`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.productCategories.list({\n  expand: \"products\",\n  limit,\n  offset\n})\n.then(({ product_categories, limit, offset, count }) => {\n  console.log(product_categories.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 259,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved product categories."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/product-categories/list-product-categories.d.ts",
											"qualifiedName": "StoreGetProductCategoriesParams"
										},
										"name": "StoreGetProductCategoriesParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 260,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/product-categories/index.d.ts",
											"qualifiedName": "StoreGetProductCategoriesRes"
										},
										"name": "StoreGetProductCategoriesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						249
					]
				},
				{
					"title": "Methods",
					"children": [
						252,
						257
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 261,
			"name": "ProductTagsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Product Tag API Routes](https://docs.medusajs.com/api/store#product-tags). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.productTags`"
					},
					{
						"kind": "text",
						"text": " property.\n\nProduct tags are string values that can be used to filter products by.\nProducts can have more than one tag, and products can share tags."
					}
				]
			},
			"children": [
				{
					"id": 262,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 263,
							"name": "new ProductTagsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 264,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 261,
								"name": "ProductTagsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 265,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 266,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of product tags. The product tags can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`id`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The product tags can also be sorted or paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of product tags with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list product tags:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.productTags.list()\n.then(({ product_tags }) => {\n  console.log(product_tags.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`20`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.productTags.list({\n  limit,\n  offset\n})\n.then(({ product_tags }) => {\n  console.log(product_tags.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 267,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved product tags."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/product-tags/list-product-tags.d.ts",
											"qualifiedName": "StoreGetProductTagsParams"
										},
										"name": "StoreGetProductTagsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 268,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/product-tags/index.d.ts",
											"qualifiedName": "StoreProductTagsListRes"
										},
										"name": "StoreProductTagsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						262
					]
				},
				{
					"title": "Methods",
					"children": [
						265
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 269,
			"name": "ProductTypesResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Product Type API Routes](https://docs.medusajs.com/api/store#product-types). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.productTypes`"
					},
					{
						"kind": "text",
						"text": " property.\n\nProduct types are string values that can be used to filter products by.\nProducts can have more than one tag, and products can share types."
					}
				]
			},
			"children": [
				{
					"id": 270,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 271,
							"name": "new ProductTypesResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 272,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 269,
								"name": "ProductTypesResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 273,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 274,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of product types. The product types can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The product types can also be sorted or paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of product types with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list product types:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.productTypes.list()\n.then(({ product_types }) => {\n  console.log(product_types.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`20`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.productTypes.list({\n  limit,\n  offset\n})\n.then(({ product_types }) => {\n  console.log(product_types.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 275,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on retrieved product types."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/product-types/list-product-types.d.ts",
											"qualifiedName": "StoreGetProductTypesParams"
										},
										"name": "StoreGetProductTypesParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 276,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/product-types/index.d.ts",
											"qualifiedName": "StoreProductTypesListRes"
										},
										"name": "StoreProductTypesListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						270
					]
				},
				{
					"title": "Methods",
					"children": [
						273
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 277,
			"name": "ProductVariantsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Product Variant API Routes](https://docs.medusajs.com/api/store#product-variants). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.product.variants`"
					},
					{
						"kind": "text",
						"text": " property.\n\nProduct variants are the actual salable item in your store. Each variant is a combination of the different option values available on the product."
					}
				]
			},
			"children": [
				{
					"id": 278,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 279,
							"name": "new ProductVariantsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 280,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 277,
								"name": "ProductVariantsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 281,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 282,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a Product Variant's details. For accurate and correct pricing of the product variant based on the customer's context, it's highly recommended to pass fields such as\n"
									},
									{
										"kind": "code",
										"text": "`region_id`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`currency_code`"
									},
									{
										"kind": "text",
										"text": ", and "
									},
									{
										"kind": "code",
										"text": "`cart_id`"
									},
									{
										"kind": "text",
										"text": " when available.\n\nPassing "
									},
									{
										"kind": "code",
										"text": "`sales_channel_id`"
									},
									{
										"kind": "text",
										"text": " ensures retrieving only variants of products available in the current sales channel.\nYou can alternatively use a publishable API key in the request header instead of passing a "
									},
									{
										"kind": "code",
										"text": "`sales_channel_id`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product variant's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.product.variants.retrieve(productVariantId)\n.then(({ variant }) => {\n  console.log(variant.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 283,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product variant."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 284,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/variants/index.d.ts",
											"qualifiedName": "StoreVariantsRes"
										},
										"name": "StoreVariantsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 285,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 286,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieves a list of product variants. The product variants can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`id`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`title`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The product variants can also be paginated.\n\nFor accurate and correct pricing of the product variants based on the customer's context, it's highly recommended to pass fields such as\n"
									},
									{
										"kind": "code",
										"text": "`region_id`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`currency_code`"
									},
									{
										"kind": "text",
										"text": ", and "
									},
									{
										"kind": "code",
										"text": "`cart_id`"
									},
									{
										"kind": "text",
										"text": " when available.\n\nPassing "
									},
									{
										"kind": "code",
										"text": "`sales_channel_id`"
									},
									{
										"kind": "text",
										"text": " ensures retrieving only variants of products available in the specified sales channel.\nYou can alternatively use a publishable API key in the request header instead of passing a "
									},
									{
										"kind": "code",
										"text": "`sales_channel_id`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of product variants."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list product variants:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.product.variants.list()\n.then(({ variants }) => {\n  console.log(variants.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the product variants:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.product.variants.list({\n  expand: \"product\"\n})\n.then(({ variants }) => {\n  console.log(variants.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`100`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.product.variants.list({\n  expand: \"product\",\n  limit,\n  offset\n})\n.then(({ variants }) => {\n  console.log(variants.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 287,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations applied on the retrieved product variants."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/variants/list-variants.d.ts",
											"qualifiedName": "StoreGetVariantsParams"
										},
										"name": "StoreGetVariantsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 288,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/variants/index.d.ts",
											"qualifiedName": "StoreVariantsListRes"
										},
										"name": "StoreVariantsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						278
					]
				},
				{
					"title": "Methods",
					"children": [
						281,
						285
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 289,
			"name": "ProductsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Product API Routes](https://docs.medusajs.com/api/store#products). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.products`"
					},
					{
						"kind": "text",
						"text": " property.\n\nProducts are saleable items in a store. This also includes [saleable gift cards](https://docs.medusajs.com/modules/gift-cards/storefront/use-gift-cards) in a store.\nUsing the methods in this class, you can filter products by categories, collections, sales channels, and more.\n\nRelated Guide: [How to show products in a storefront](https://docs.medusajs.com/modules/products/storefront/show-products)."
					}
				]
			},
			"children": [
				{
					"id": 290,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 291,
							"name": "new ProductsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 292,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 289,
								"name": "ProductsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 293,
					"name": "variants",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "ProductVariantsResource",
								"target": 277,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Store Product Variant API Routes](https://docs.medusajs.com/api/store#product-variants_getvariants)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 277,
						"name": "ProductVariantsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 294,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 295,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a Product's details. For accurate and correct pricing of the product based on the customer's context, it's highly recommended to pass fields such as\n"
									},
									{
										"kind": "code",
										"text": "`region_id`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`currency_code`"
									},
									{
										"kind": "text",
										"text": ", and "
									},
									{
										"kind": "code",
										"text": "`cart_id`"
									},
									{
										"kind": "text",
										"text": " when available.\n\nPassing "
									},
									{
										"kind": "code",
										"text": "`sales_channel_id`"
									},
									{
										"kind": "text",
										"text": " ensures retrieving only products available in the current sales channel.\nYou can alternatively use a publishable API key in the request header instead of passing a "
									},
									{
										"kind": "code",
										"text": "`sales_channel_id`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.products.retrieve(productId)\n.then(({ product }) => {\n  console.log(product.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 296,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 297,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/products/index.d.ts",
											"qualifiedName": "StoreProductsRes"
										},
										"name": "StoreProductsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 298,
					"name": "search",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 299,
							"name": "search",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Run a search query on products using the search service installed on the Medusa backend. The searching is handled through the search service, so the returned data's\nformat depends on the search service you're using."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of search results. The format of the items depends on the search engine installed on the Medusa backend."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.products.search({\n  q: \"Shirt\"\n})\n.then(({ hits }) => {\n  console.log(hits.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 300,
									"name": "searchOptions",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Fields to search products."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/products/search.d.ts",
											"qualifiedName": "StorePostSearchReq"
										},
										"name": "StorePostSearchReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 301,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/products/index.d.ts",
											"qualifiedName": "StorePostSearchRes"
										},
										"name": "StorePostSearchRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 302,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 303,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of products. The products can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`id`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The products can also be sorted or paginated.\nThis method can also be used to retrieve a product by its handle.\n\nFor accurate and correct pricing of the products based on the customer's context, it's highly recommended to pass fields such as\n"
									},
									{
										"kind": "code",
										"text": "`region_id`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`currency_code`"
									},
									{
										"kind": "text",
										"text": ", and "
									},
									{
										"kind": "code",
										"text": "`cart_id`"
									},
									{
										"kind": "text",
										"text": " when available.\n\nPassing "
									},
									{
										"kind": "code",
										"text": "`sales_channel_id`"
									},
									{
										"kind": "text",
										"text": " ensures retrieving only products available in the specified sales channel.\nYou can alternatively use a publishable API key in the request header instead of passing a "
									},
									{
										"kind": "code",
										"text": "`sales_channel_id`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of products with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list products:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.products.list()\n.then(({ products, limit, offset, count }) => {\n  console.log(products.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the products:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.products.list({\n  expand: \"variants\"\n})\n.then(({ products, limit, offset, count }) => {\n  console.log(products.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`100`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.products.list({\n  expand: \"variants\",\n  limit,\n  offset\n})\n.then(({ products, limit, offset, count }) => {\n  console.log(products.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 304,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved products."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/products/list-products.d.ts",
											"qualifiedName": "StoreGetProductsParams"
										},
										"name": "StoreGetProductsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 305,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/products/index.d.ts",
											"qualifiedName": "StoreProductsListRes"
										},
										"name": "StoreProductsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						290
					]
				},
				{
					"title": "Properties",
					"children": [
						293
					]
				},
				{
					"title": "Methods",
					"children": [
						294,
						298,
						302
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 306,
			"name": "RegionsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Region API Routes](https://docs.medusajs.com/api/store#regions_getregions). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.regions`"
					},
					{
						"kind": "text",
						"text": " property.\n\nRegions are different countries or geographical regions that the commerce store serves customers in.\nCustomers can choose what region they're in, which can be used to change the prices shown based on the region and its currency.\n\nRelated Guide: [How to use regions in a storefront](https://docs.medusajs.com/modules/regions-and-currencies/storefront/use-regions)."
					}
				]
			},
			"children": [
				{
					"id": 307,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 308,
							"name": "new RegionsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 309,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 306,
								"name": "RegionsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 310,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 311,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of regions. This method is useful to show the customer all available regions to choose from."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of regions with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.regions.list()\n.then(({ regions, count, limit, offset }) => {\n  console.log(regions.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 312,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/regions/index.d.ts",
											"qualifiedName": "StoreRegionsListRes"
										},
										"name": "StoreRegionsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 313,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 314,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a Region's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the region's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.regions.retrieve(regionId)\n.then(({ region }) => {\n  console.log(region.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 315,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The region's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 316,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/regions/index.d.ts",
											"qualifiedName": "StoreRegionsRes"
										},
										"name": "StoreRegionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						307
					]
				},
				{
					"title": "Methods",
					"children": [
						310,
						313
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 317,
			"name": "ReturnReasonsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Return Reason API Routes](https://docs.medusajs.com/api/store#return-reasons). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.returnReasons`"
					},
					{
						"kind": "text",
						"text": " property.\n\nReturn reasons are key-value pairs that are used to specify why an order return is being created."
					}
				]
			},
			"children": [
				{
					"id": 318,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 319,
							"name": "new ReturnReasonsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 320,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 317,
								"name": "ReturnReasonsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 321,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 322,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a Return Reason's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the return reason's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.returnReasons.retrieve(reasonId)\n.then(({ return_reason }) => {\n  console.log(return_reason.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 323,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the return reason."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 324,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/return-reasons/index.d.ts",
											"qualifiedName": "StoreReturnReasonsRes"
										},
										"name": "StoreReturnReasonsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 325,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 326,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of Return Reasons. This is useful when implementing a Create Return flow in the storefront."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of return reasons."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.returnReasons.list()\n.then(({ return_reasons }) => {\n  console.log(return_reasons.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 327,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/return-reasons/index.d.ts",
											"qualifiedName": "StoreReturnReasonsListRes"
										},
										"name": "StoreReturnReasonsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						318
					]
				},
				{
					"title": "Methods",
					"children": [
						321,
						325
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 328,
			"name": "ReturnsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Return API Routes](https://docs.medusajs.com/api/store#returns). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.returns`"
					},
					{
						"kind": "text",
						"text": " property.\n\nA return can be created by a customer to return items in an order.\n\nRelated Guide: [How to create a return in a storefront](https://docs.medusajs.com/modules/orders/storefront/create-return)."
					}
				]
			},
			"children": [
				{
					"id": 329,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 330,
							"name": "new ReturnsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 331,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 328,
								"name": "ReturnsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 332,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 333,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a return for an order. If a return shipping method is specified, the return is automatically fulfilled."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the return's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.returns.create({\n  order_id,\n  items: [\n    {\n      item_id,\n      quantity: 1\n    }\n  ]\n})\n.then((data) => {\n  console.log(data.return.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 334,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The data of the return to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/returns/create-return.d.ts",
											"qualifiedName": "StorePostReturnsReq"
										},
										"name": "StorePostReturnsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 335,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/returns/index.d.ts",
											"qualifiedName": "StoreReturnsRes"
										},
										"name": "StoreReturnsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						329
					]
				},
				{
					"title": "Methods",
					"children": [
						332
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 336,
			"name": "ShippingOptionsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Shipping Option API Routes](https://docs.medusajs.com/api/store#shipping-options). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.shippingOptions`"
					},
					{
						"kind": "text",
						"text": " property.\n\nA shipping option is used to define the available shipping methods during checkout or when creating a return.\n\nRelated Guide: [Shipping Option architecture](https://docs.medusajs.com/modules/carts-and-checkout/shipping#shipping-option)."
					}
				]
			},
			"children": [
				{
					"id": 337,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 338,
							"name": "new ShippingOptionsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 339,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 336,
								"name": "ShippingOptionsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 340,
					"name": "listCartOptions",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 341,
							"name": "listCartOptions",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of shipping options available for a cart."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of shipping options."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.shippingOptions.listCartOptions(cartId)\n.then(({ shipping_options }) => {\n  console.log(shipping_options.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 342,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The cart's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 343,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/shipping-options/index.d.ts",
											"qualifiedName": "StoreShippingOptionsListRes"
										},
										"name": "StoreShippingOptionsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 344,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 345,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of shipping options. The shipping options can be filtered using the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of shipping options."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.shippingOptions.list()\n.then(({ shipping_options }) => {\n  console.log(shipping_options.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 346,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The filters to apply on the shipping options."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/shipping-options/list-options.d.ts",
											"qualifiedName": "StoreGetShippingOptionsParams"
										},
										"name": "StoreGetShippingOptionsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 347,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/shipping-options/index.d.ts",
											"qualifiedName": "StoreShippingOptionsListRes"
										},
										"name": "StoreShippingOptionsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						337
					]
				},
				{
					"title": "Methods",
					"children": [
						340,
						344
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 348,
			"name": "SwapsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Swap API Routes](https://docs.medusajs.com/api/store#swaps). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.swaps`"
					},
					{
						"kind": "text",
						"text": " property.\n\nA swap is created by a customer or an admin to exchange an item with a new one.\nCreating a swap implicitely includes creating a return for the item being exchanged.\n\nRelated Guide: [How to create a swap in a storefront](https://docs.medusajs.com/modules/orders/storefront/create-swap)"
					}
				]
			},
			"children": [
				{
					"id": 349,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 350,
							"name": "new SwapsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 351,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 348,
								"name": "SwapsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 352,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 353,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a Swap for an Order. This will also create a return and associate it with the swap. If a return shipping option is specified, the return will automatically be fulfilled.\nTo complete the swap, you must use the "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "CartsResource.complete",
										"target": 50
									},
									{
										"kind": "text",
										"text": " method passing it the ID of the swap's cart.\n\nAn idempotency key will be generated if none is provided in the header "
									},
									{
										"kind": "code",
										"text": "`Idempotency-Key`"
									},
									{
										"kind": "text",
										"text": " and added to\nthe response. If an error occurs during swap creation or the request is interrupted for any reason, the swap creation can be retried by passing the idempotency\nkey in the "
									},
									{
										"kind": "code",
										"text": "`Idempotency-Key`"
									},
									{
										"kind": "text",
										"text": " header."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the swap's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.swaps.create({\n  order_id,\n  return_items: [\n    {\n      item_id,\n      quantity: 1\n    }\n  ],\n  additional_items: [\n    {\n      variant_id,\n      quantity: 1\n    }\n  ]\n})\n.then(({ swap }) => {\n  console.log(swap.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 354,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The data of the swap to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/swaps/create-swap.d.ts",
											"qualifiedName": "StorePostSwapsReq"
										},
										"name": "StorePostSwapsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 355,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/swaps/index.d.ts",
											"qualifiedName": "StoreSwapsRes"
										},
										"name": "StoreSwapsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 356,
					"name": "retrieveByCartId",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 357,
							"name": "retrieveByCartId",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a Swap's details by the ID of its cart."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the swap's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.swaps.retrieveByCartId(cartId)\n.then(({ swap }) => {\n  console.log(swap.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 358,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The cart's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 359,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/swaps/index.d.ts",
											"qualifiedName": "StoreSwapsRes"
										},
										"name": "StoreSwapsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						349
					]
				},
				{
					"title": "Methods",
					"children": [
						352,
						356
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		}
	],
	"groups": [
		{
			"title": "Classes",
			"children": [
				1,
				428,
				446,
				470,
				505,
				402,
				518,
				559,
				580,
				666,
				711,
				360,
				736,
				787,
				810,
				835,
				979,
				848,
				1639,
				1661,
				1038,
				1679,
				1093,
				1100,
				1108,
				1176,
				1220,
				1279,
				1304,
				1328,
				1345,
				1390,
				1415,
				1439,
				1464,
				1489,
				1501,
				1565,
				1589,
				1622,
				18,
				40,
				97,
				109,
				138,
				146,
				166,
				183,
				207,
				241,
				248,
				261,
				269,
				277,
				289,
				306,
				317,
				328,
				336,
				348
			]
		}
	],
	"packageName": "@medusajs/medusa-js",
	"symbolIdMap": {
		"0": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/index.ts",
			"qualifiedName": ""
		},
		"1": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/addresses.ts",
			"qualifiedName": "AddressesResource"
		},
		"2": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"3": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AddressesResource"
		},
		"4": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"5": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/addresses.ts",
			"qualifiedName": "AddressesResource.addAddress"
		},
		"6": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/addresses.ts",
			"qualifiedName": "AddressesResource.addAddress"
		},
		"7": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/addresses.ts",
			"qualifiedName": "payload"
		},
		"8": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/addresses.ts",
			"qualifiedName": "customHeaders"
		},
		"9": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/addresses.ts",
			"qualifiedName": "AddressesResource.deleteAddress"
		},
		"10": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/addresses.ts",
			"qualifiedName": "AddressesResource.deleteAddress"
		},
		"11": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/addresses.ts",
			"qualifiedName": "address_id"
		},
		"12": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/addresses.ts",
			"qualifiedName": "customHeaders"
		},
		"13": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/addresses.ts",
			"qualifiedName": "AddressesResource.updateAddress"
		},
		"14": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/addresses.ts",
			"qualifiedName": "AddressesResource.updateAddress"
		},
		"15": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/addresses.ts",
			"qualifiedName": "address_id"
		},
		"16": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/addresses.ts",
			"qualifiedName": "payload"
		},
		"17": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/addresses.ts",
			"qualifiedName": "customHeaders"
		},
		"18": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "AuthResource"
		},
		"19": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"20": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AuthResource"
		},
		"21": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"22": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "AuthResource.authenticate"
		},
		"23": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "AuthResource.authenticate"
		},
		"24": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "payload"
		},
		"25": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "customHeaders"
		},
		"26": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "AuthResource.deleteSession"
		},
		"27": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "AuthResource.deleteSession"
		},
		"28": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "customHeaders"
		},
		"29": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "AuthResource.getSession"
		},
		"30": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "AuthResource.getSession"
		},
		"31": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "customHeaders"
		},
		"32": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "AuthResource.exists"
		},
		"33": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "AuthResource.exists"
		},
		"34": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "email"
		},
		"35": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "customHeaders"
		},
		"36": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "AuthResource.getToken"
		},
		"37": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "AuthResource.getToken"
		},
		"38": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "payload"
		},
		"39": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "customHeaders"
		},
		"40": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource"
		},
		"41": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"42": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "CartsResource"
		},
		"43": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"44": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.lineItems"
		},
		"45": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.addShippingMethod"
		},
		"46": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.addShippingMethod"
		},
		"47": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "cart_id"
		},
		"48": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "payload"
		},
		"49": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "customHeaders"
		},
		"50": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.complete"
		},
		"51": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.complete"
		},
		"52": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "cart_id"
		},
		"53": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "customHeaders"
		},
		"54": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.create"
		},
		"55": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.create"
		},
		"56": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "payload"
		},
		"57": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "customHeaders"
		},
		"58": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.createPaymentSessions"
		},
		"59": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.createPaymentSessions"
		},
		"60": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "cart_id"
		},
		"61": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "customHeaders"
		},
		"62": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.deleteDiscount"
		},
		"63": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.deleteDiscount"
		},
		"64": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "cart_id"
		},
		"65": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "code"
		},
		"66": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "customHeaders"
		},
		"67": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.deletePaymentSession"
		},
		"68": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.deletePaymentSession"
		},
		"69": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "cart_id"
		},
		"70": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "provider_id"
		},
		"71": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "customHeaders"
		},
		"72": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.refreshPaymentSession"
		},
		"73": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.refreshPaymentSession"
		},
		"74": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "cart_id"
		},
		"75": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "provider_id"
		},
		"76": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "customHeaders"
		},
		"77": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.retrieve"
		},
		"78": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.retrieve"
		},
		"79": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "cart_id"
		},
		"80": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "customHeaders"
		},
		"81": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.setPaymentSession"
		},
		"82": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.setPaymentSession"
		},
		"83": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "cart_id"
		},
		"84": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "payload"
		},
		"85": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "customHeaders"
		},
		"86": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.update"
		},
		"87": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.update"
		},
		"88": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "cart_id"
		},
		"89": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "payload"
		},
		"90": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "customHeaders"
		},
		"91": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.updatePaymentSession"
		},
		"92": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.updatePaymentSession"
		},
		"93": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "cart_id"
		},
		"94": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "provider_id"
		},
		"95": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "payload"
		},
		"96": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "customHeaders"
		},
		"97": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/collections.ts",
			"qualifiedName": "CollectionsResource"
		},
		"98": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"99": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "CollectionsResource"
		},
		"100": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"101": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/collections.ts",
			"qualifiedName": "CollectionsResource.retrieve"
		},
		"102": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/collections.ts",
			"qualifiedName": "CollectionsResource.retrieve"
		},
		"103": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/collections.ts",
			"qualifiedName": "id"
		},
		"104": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/collections.ts",
			"qualifiedName": "customHeaders"
		},
		"105": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/collections.ts",
			"qualifiedName": "CollectionsResource.list"
		},
		"106": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/collections.ts",
			"qualifiedName": "CollectionsResource.list"
		},
		"107": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/collections.ts",
			"qualifiedName": "query"
		},
		"108": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/collections.ts",
			"qualifiedName": "customHeaders"
		},
		"109": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource"
		},
		"110": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"111": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "CustomerResource"
		},
		"112": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"113": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource.paymentMethods"
		},
		"114": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource.addresses"
		},
		"115": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource.create"
		},
		"116": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource.create"
		},
		"117": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "payload"
		},
		"118": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "customHeaders"
		},
		"119": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource.retrieve"
		},
		"120": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource.retrieve"
		},
		"121": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "customHeaders"
		},
		"122": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource.update"
		},
		"123": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource.update"
		},
		"124": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "payload"
		},
		"125": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "customHeaders"
		},
		"126": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource.listOrders"
		},
		"127": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource.listOrders"
		},
		"128": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "params"
		},
		"129": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "customHeaders"
		},
		"130": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource.resetPassword"
		},
		"131": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource.resetPassword"
		},
		"132": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "payload"
		},
		"133": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "customHeaders"
		},
		"134": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource.generatePasswordToken"
		},
		"135": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource.generatePasswordToken"
		},
		"136": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "payload"
		},
		"137": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "customHeaders"
		},
		"138": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/gift-cards.ts",
			"qualifiedName": "GiftCardsResource"
		},
		"139": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"140": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "GiftCardsResource"
		},
		"141": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"142": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/gift-cards.ts",
			"qualifiedName": "GiftCardsResource.retrieve"
		},
		"143": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/gift-cards.ts",
			"qualifiedName": "GiftCardsResource.retrieve"
		},
		"144": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/gift-cards.ts",
			"qualifiedName": "code"
		},
		"145": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/gift-cards.ts",
			"qualifiedName": "customHeaders"
		},
		"146": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "LineItemsResource"
		},
		"147": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"148": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "LineItemsResource"
		},
		"149": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"150": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "LineItemsResource.create"
		},
		"151": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "LineItemsResource.create"
		},
		"152": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "cart_id"
		},
		"153": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "payload"
		},
		"154": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "customHeaders"
		},
		"155": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "LineItemsResource.update"
		},
		"156": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "LineItemsResource.update"
		},
		"157": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "cart_id"
		},
		"158": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "line_id"
		},
		"159": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "payload"
		},
		"160": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "customHeaders"
		},
		"161": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "LineItemsResource.delete"
		},
		"162": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "LineItemsResource.delete"
		},
		"163": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "cart_id"
		},
		"164": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "line_id"
		},
		"165": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "customHeaders"
		},
		"166": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/order-edits.ts",
			"qualifiedName": "OrderEditsResource"
		},
		"167": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"168": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "OrderEditsResource"
		},
		"169": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"170": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/order-edits.ts",
			"qualifiedName": "OrderEditsResource.retrieve"
		},
		"171": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/order-edits.ts",
			"qualifiedName": "OrderEditsResource.retrieve"
		},
		"172": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/order-edits.ts",
			"qualifiedName": "id"
		},
		"173": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"174": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/order-edits.ts",
			"qualifiedName": "OrderEditsResource.decline"
		},
		"175": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/order-edits.ts",
			"qualifiedName": "OrderEditsResource.decline"
		},
		"176": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/order-edits.ts",
			"qualifiedName": "id"
		},
		"177": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/order-edits.ts",
			"qualifiedName": "payload"
		},
		"178": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"179": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/order-edits.ts",
			"qualifiedName": "OrderEditsResource.complete"
		},
		"180": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/order-edits.ts",
			"qualifiedName": "OrderEditsResource.complete"
		},
		"181": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/order-edits.ts",
			"qualifiedName": "id"
		},
		"182": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"183": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "OrdersResource"
		},
		"184": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"185": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "OrdersResource"
		},
		"186": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"187": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "OrdersResource.retrieve"
		},
		"188": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "OrdersResource.retrieve"
		},
		"189": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "id"
		},
		"190": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"191": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "OrdersResource.retrieveByCartId"
		},
		"192": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "OrdersResource.retrieveByCartId"
		},
		"193": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "cart_id"
		},
		"194": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"195": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "OrdersResource.lookupOrder"
		},
		"196": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "OrdersResource.lookupOrder"
		},
		"197": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "payload"
		},
		"198": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"199": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "OrdersResource.requestCustomerOrders"
		},
		"200": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "OrdersResource.requestCustomerOrders"
		},
		"201": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "payload"
		},
		"202": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"203": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "OrdersResource.confirmRequest"
		},
		"204": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "OrdersResource.confirmRequest"
		},
		"205": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "payload"
		},
		"206": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"207": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "PaymentCollectionsResource"
		},
		"208": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"209": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "PaymentCollectionsResource"
		},
		"210": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"211": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "PaymentCollectionsResource.retrieve"
		},
		"212": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "PaymentCollectionsResource.retrieve"
		},
		"213": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "id"
		},
		"214": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "query"
		},
		"215": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "customHeaders"
		},
		"216": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "PaymentCollectionsResource.authorizePaymentSession"
		},
		"217": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "PaymentCollectionsResource.authorizePaymentSession"
		},
		"218": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "id"
		},
		"219": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "session_id"
		},
		"220": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "customHeaders"
		},
		"221": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "PaymentCollectionsResource.authorizePaymentSessionsBatch"
		},
		"222": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "PaymentCollectionsResource.authorizePaymentSessionsBatch"
		},
		"223": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "id"
		},
		"224": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "payload"
		},
		"225": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "customHeaders"
		},
		"226": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "PaymentCollectionsResource.managePaymentSessionsBatch"
		},
		"227": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "PaymentCollectionsResource.managePaymentSessionsBatch"
		},
		"228": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "id"
		},
		"229": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "payload"
		},
		"230": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "customHeaders"
		},
		"231": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "PaymentCollectionsResource.managePaymentSession"
		},
		"232": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "PaymentCollectionsResource.managePaymentSession"
		},
		"233": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "id"
		},
		"234": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "payload"
		},
		"235": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "customHeaders"
		},
		"236": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "PaymentCollectionsResource.refreshPaymentSession"
		},
		"237": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "PaymentCollectionsResource.refreshPaymentSession"
		},
		"238": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "id"
		},
		"239": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "session_id"
		},
		"240": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "customHeaders"
		},
		"241": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-methods.ts",
			"qualifiedName": "PaymentMethodsResource"
		},
		"242": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"243": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "PaymentMethodsResource"
		},
		"244": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"245": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-methods.ts",
			"qualifiedName": "PaymentMethodsResource.list"
		},
		"246": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-methods.ts",
			"qualifiedName": "PaymentMethodsResource.list"
		},
		"247": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-methods.ts",
			"qualifiedName": "customHeaders"
		},
		"248": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-categories.ts",
			"qualifiedName": "ProductCategoriesResource"
		},
		"249": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"250": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "ProductCategoriesResource"
		},
		"251": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"252": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-categories.ts",
			"qualifiedName": "ProductCategoriesResource.retrieve"
		},
		"253": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-categories.ts",
			"qualifiedName": "ProductCategoriesResource.retrieve"
		},
		"254": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-categories.ts",
			"qualifiedName": "id"
		},
		"255": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-categories.ts",
			"qualifiedName": "query"
		},
		"256": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-categories.ts",
			"qualifiedName": "customHeaders"
		},
		"257": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-categories.ts",
			"qualifiedName": "ProductCategoriesResource.list"
		},
		"258": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-categories.ts",
			"qualifiedName": "ProductCategoriesResource.list"
		},
		"259": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-categories.ts",
			"qualifiedName": "query"
		},
		"260": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-categories.ts",
			"qualifiedName": "customHeaders"
		},
		"261": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-tags.ts",
			"qualifiedName": "ProductTagsResource"
		},
		"262": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"263": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "ProductTagsResource"
		},
		"264": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"265": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-tags.ts",
			"qualifiedName": "ProductTagsResource.list"
		},
		"266": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-tags.ts",
			"qualifiedName": "ProductTagsResource.list"
		},
		"267": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-tags.ts",
			"qualifiedName": "query"
		},
		"268": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-tags.ts",
			"qualifiedName": "customHeaders"
		},
		"269": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-types.ts",
			"qualifiedName": "ProductTypesResource"
		},
		"270": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"271": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "ProductTypesResource"
		},
		"272": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"273": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-types.ts",
			"qualifiedName": "ProductTypesResource.list"
		},
		"274": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-types.ts",
			"qualifiedName": "ProductTypesResource.list"
		},
		"275": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-types.ts",
			"qualifiedName": "query"
		},
		"276": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-types.ts",
			"qualifiedName": "customHeaders"
		},
		"277": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-variants.ts",
			"qualifiedName": "ProductVariantsResource"
		},
		"278": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"279": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "ProductVariantsResource"
		},
		"280": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"281": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-variants.ts",
			"qualifiedName": "ProductVariantsResource.retrieve"
		},
		"282": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-variants.ts",
			"qualifiedName": "ProductVariantsResource.retrieve"
		},
		"283": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-variants.ts",
			"qualifiedName": "id"
		},
		"284": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-variants.ts",
			"qualifiedName": "customHeaders"
		},
		"285": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-variants.ts",
			"qualifiedName": "ProductVariantsResource.list"
		},
		"286": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-variants.ts",
			"qualifiedName": "ProductVariantsResource.list"
		},
		"287": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-variants.ts",
			"qualifiedName": "query"
		},
		"288": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-variants.ts",
			"qualifiedName": "customHeaders"
		},
		"289": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/products.ts",
			"qualifiedName": "ProductsResource"
		},
		"290": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"291": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "ProductsResource"
		},
		"292": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"293": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/products.ts",
			"qualifiedName": "ProductsResource.variants"
		},
		"294": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/products.ts",
			"qualifiedName": "ProductsResource.retrieve"
		},
		"295": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/products.ts",
			"qualifiedName": "ProductsResource.retrieve"
		},
		"296": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/products.ts",
			"qualifiedName": "id"
		},
		"297": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/products.ts",
			"qualifiedName": "customHeaders"
		},
		"298": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/products.ts",
			"qualifiedName": "ProductsResource.search"
		},
		"299": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/products.ts",
			"qualifiedName": "ProductsResource.search"
		},
		"300": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/products.ts",
			"qualifiedName": "searchOptions"
		},
		"301": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/products.ts",
			"qualifiedName": "customHeaders"
		},
		"302": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/products.ts",
			"qualifiedName": "ProductsResource.list"
		},
		"303": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/products.ts",
			"qualifiedName": "ProductsResource.list"
		},
		"304": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/products.ts",
			"qualifiedName": "query"
		},
		"305": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/products.ts",
			"qualifiedName": "customHeaders"
		},
		"306": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/regions.ts",
			"qualifiedName": "RegionsResource"
		},
		"307": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"308": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "RegionsResource"
		},
		"309": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"310": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/regions.ts",
			"qualifiedName": "RegionsResource.list"
		},
		"311": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/regions.ts",
			"qualifiedName": "RegionsResource.list"
		},
		"312": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/regions.ts",
			"qualifiedName": "customHeaders"
		},
		"313": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/regions.ts",
			"qualifiedName": "RegionsResource.retrieve"
		},
		"314": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/regions.ts",
			"qualifiedName": "RegionsResource.retrieve"
		},
		"315": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/regions.ts",
			"qualifiedName": "id"
		},
		"316": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/regions.ts",
			"qualifiedName": "customHeaders"
		},
		"317": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/return-reasons.ts",
			"qualifiedName": "ReturnReasonsResource"
		},
		"318": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"319": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "ReturnReasonsResource"
		},
		"320": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"321": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/return-reasons.ts",
			"qualifiedName": "ReturnReasonsResource.retrieve"
		},
		"322": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/return-reasons.ts",
			"qualifiedName": "ReturnReasonsResource.retrieve"
		},
		"323": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/return-reasons.ts",
			"qualifiedName": "id"
		},
		"324": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/return-reasons.ts",
			"qualifiedName": "customHeaders"
		},
		"325": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/return-reasons.ts",
			"qualifiedName": "ReturnReasonsResource.list"
		},
		"326": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/return-reasons.ts",
			"qualifiedName": "ReturnReasonsResource.list"
		},
		"327": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/return-reasons.ts",
			"qualifiedName": "customHeaders"
		},
		"328": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/returns.ts",
			"qualifiedName": "ReturnsResource"
		},
		"329": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"330": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "ReturnsResource"
		},
		"331": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"332": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/returns.ts",
			"qualifiedName": "ReturnsResource.create"
		},
		"333": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/returns.ts",
			"qualifiedName": "ReturnsResource.create"
		},
		"334": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/returns.ts",
			"qualifiedName": "payload"
		},
		"335": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/returns.ts",
			"qualifiedName": "customHeaders"
		},
		"336": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/shipping-options.ts",
			"qualifiedName": "ShippingOptionsResource"
		},
		"337": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"338": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "ShippingOptionsResource"
		},
		"339": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"340": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/shipping-options.ts",
			"qualifiedName": "ShippingOptionsResource.listCartOptions"
		},
		"341": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/shipping-options.ts",
			"qualifiedName": "ShippingOptionsResource.listCartOptions"
		},
		"342": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/shipping-options.ts",
			"qualifiedName": "cart_id"
		},
		"343": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/shipping-options.ts",
			"qualifiedName": "customHeaders"
		},
		"344": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/shipping-options.ts",
			"qualifiedName": "ShippingOptionsResource.list"
		},
		"345": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/shipping-options.ts",
			"qualifiedName": "ShippingOptionsResource.list"
		},
		"346": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/shipping-options.ts",
			"qualifiedName": "query"
		},
		"347": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/shipping-options.ts",
			"qualifiedName": "customHeaders"
		},
		"348": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/swaps.ts",
			"qualifiedName": "SwapsResource"
		},
		"349": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"350": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "SwapsResource"
		},
		"351": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"352": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/swaps.ts",
			"qualifiedName": "SwapsResource.create"
		},
		"353": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/swaps.ts",
			"qualifiedName": "SwapsResource.create"
		},
		"354": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/swaps.ts",
			"qualifiedName": "payload"
		},
		"355": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/swaps.ts",
			"qualifiedName": "customHeaders"
		},
		"356": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/swaps.ts",
			"qualifiedName": "SwapsResource.retrieveByCartId"
		},
		"357": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/swaps.ts",
			"qualifiedName": "SwapsResource.retrieveByCartId"
		},
		"358": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/swaps.ts",
			"qualifiedName": "cart_id"
		},
		"359": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/swaps.ts",
			"qualifiedName": "customHeaders"
		},
		"360": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin"
		},
		"361": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"362": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "Admin"
		},
		"363": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"364": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.auth"
		},
		"365": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.batchJobs"
		},
		"366": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.customers"
		},
		"367": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.customerGroups"
		},
		"368": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.discounts"
		},
		"369": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.currencies"
		},
		"370": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.collections"
		},
		"371": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.draftOrders"
		},
		"372": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.giftCards"
		},
		"373": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.invites"
		},
		"374": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.inventoryItems"
		},
		"375": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.notes"
		},
		"376": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.priceLists"
		},
		"377": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.products"
		},
		"378": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.productTags"
		},
		"379": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.productTypes"
		},
		"380": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.users"
		},
		"381": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.returns"
		},
		"382": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.orders"
		},
		"383": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.orderEdits"
		},
		"384": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.publishableApiKeys"
		},
		"385": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.returnReasons"
		},
		"386": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.variants"
		},
		"387": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.salesChannels"
		},
		"388": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.swaps"
		},
		"389": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.shippingProfiles"
		},
		"390": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.stockLocations"
		},
		"391": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.store"
		},
		"392": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.shippingOptions"
		},
		"393": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.regions"
		},
		"394": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.reservations"
		},
		"395": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.notifications"
		},
		"396": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.taxRates"
		},
		"397": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.uploads"
		},
		"398": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.paymentCollections"
		},
		"399": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.payments"
		},
		"400": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.productCategories"
		},
		"401": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.custom"
		},
		"402": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "AdminCustomResource"
		},
		"403": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"404": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminCustomResource"
		},
		"405": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"406": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "AdminCustomResource.get"
		},
		"407": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "AdminCustomResource.get"
		},
		"408": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "TQuery"
		},
		"409": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "TResponse"
		},
		"410": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "path"
		},
		"411": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "query"
		},
		"412": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "options"
		},
		"413": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "customHeaders"
		},
		"414": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "AdminCustomResource.post"
		},
		"415": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "AdminCustomResource.post"
		},
		"416": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "TPayload"
		},
		"417": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "TResponse"
		},
		"418": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "path"
		},
		"419": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "payload"
		},
		"420": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "options"
		},
		"421": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "customHeaders"
		},
		"422": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "AdminCustomResource.delete"
		},
		"423": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "AdminCustomResource.delete"
		},
		"424": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "TResponse"
		},
		"425": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "path"
		},
		"426": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "options"
		},
		"427": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "customHeaders"
		},
		"428": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "AdminAuthResource"
		},
		"429": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"430": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminAuthResource"
		},
		"431": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"432": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "AdminAuthResource.getSession"
		},
		"433": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "AdminAuthResource.getSession"
		},
		"434": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "customHeaders"
		},
		"435": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "AdminAuthResource.deleteSession"
		},
		"436": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "AdminAuthResource.deleteSession"
		},
		"437": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "customHeaders"
		},
		"438": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "AdminAuthResource.createSession"
		},
		"439": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "AdminAuthResource.createSession"
		},
		"440": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "payload"
		},
		"441": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "customHeaders"
		},
		"442": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "AdminAuthResource.getToken"
		},
		"443": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "AdminAuthResource.getToken"
		},
		"444": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "payload"
		},
		"445": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "customHeaders"
		},
		"446": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "AdminBatchJobsResource"
		},
		"447": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"448": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminBatchJobsResource"
		},
		"449": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"450": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "AdminBatchJobsResource.create"
		},
		"451": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "AdminBatchJobsResource.create"
		},
		"452": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "payload"
		},
		"453": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "customHeaders"
		},
		"454": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "AdminBatchJobsResource.list"
		},
		"455": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "AdminBatchJobsResource.list"
		},
		"456": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "query"
		},
		"457": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "customHeaders"
		},
		"458": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "AdminBatchJobsResource.cancel"
		},
		"459": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "AdminBatchJobsResource.cancel"
		},
		"460": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "batchJobId"
		},
		"461": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "customHeaders"
		},
		"462": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "AdminBatchJobsResource.confirm"
		},
		"463": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "AdminBatchJobsResource.confirm"
		},
		"464": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "batchJobId"
		},
		"465": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "customHeaders"
		},
		"466": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "AdminBatchJobsResource.retrieve"
		},
		"467": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "AdminBatchJobsResource.retrieve"
		},
		"468": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "batchJobId"
		},
		"469": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "customHeaders"
		},
		"470": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource"
		},
		"471": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"472": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminCollectionsResource"
		},
		"473": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"474": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource.create"
		},
		"475": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource.create"
		},
		"476": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "payload"
		},
		"477": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "customHeaders"
		},
		"478": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource.update"
		},
		"479": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource.update"
		},
		"480": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "id"
		},
		"481": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "payload"
		},
		"482": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "customHeaders"
		},
		"483": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource.delete"
		},
		"484": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource.delete"
		},
		"485": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "id"
		},
		"486": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "customHeaders"
		},
		"487": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource.retrieve"
		},
		"488": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource.retrieve"
		},
		"489": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "id"
		},
		"490": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "customHeaders"
		},
		"491": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource.list"
		},
		"492": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource.list"
		},
		"493": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "query"
		},
		"494": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "customHeaders"
		},
		"495": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource.addProducts"
		},
		"496": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource.addProducts"
		},
		"497": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "id"
		},
		"498": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "payload"
		},
		"499": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "customHeaders"
		},
		"500": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource.removeProducts"
		},
		"501": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource.removeProducts"
		},
		"502": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "id"
		},
		"503": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "payload"
		},
		"504": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "customHeaders"
		},
		"505": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/currencies.ts",
			"qualifiedName": "AdminCurrenciesResource"
		},
		"506": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"507": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminCurrenciesResource"
		},
		"508": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"509": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/currencies.ts",
			"qualifiedName": "AdminCurrenciesResource.list"
		},
		"510": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/currencies.ts",
			"qualifiedName": "AdminCurrenciesResource.list"
		},
		"511": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/currencies.ts",
			"qualifiedName": "query"
		},
		"512": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/currencies.ts",
			"qualifiedName": "customHeaders"
		},
		"513": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/currencies.ts",
			"qualifiedName": "AdminCurrenciesResource.update"
		},
		"514": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/currencies.ts",
			"qualifiedName": "AdminCurrenciesResource.update"
		},
		"515": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/currencies.ts",
			"qualifiedName": "code"
		},
		"516": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/currencies.ts",
			"qualifiedName": "payload"
		},
		"517": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/currencies.ts",
			"qualifiedName": "customHeaders"
		},
		"518": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource"
		},
		"519": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"520": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminCustomerGroupsResource"
		},
		"521": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"522": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.create"
		},
		"523": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.create"
		},
		"524": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "payload"
		},
		"525": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "customHeaders"
		},
		"526": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.retrieve"
		},
		"527": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.retrieve"
		},
		"528": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "id"
		},
		"529": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "query"
		},
		"530": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "customHeaders"
		},
		"531": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.update"
		},
		"532": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.update"
		},
		"533": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "id"
		},
		"534": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "payload"
		},
		"535": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "customHeaders"
		},
		"536": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.delete"
		},
		"537": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.delete"
		},
		"538": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "id"
		},
		"539": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "customHeaders"
		},
		"540": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.list"
		},
		"541": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.list"
		},
		"542": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "query"
		},
		"543": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "customHeaders"
		},
		"544": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.addCustomers"
		},
		"545": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.addCustomers"
		},
		"546": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "id"
		},
		"547": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "payload"
		},
		"548": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "customHeaders"
		},
		"549": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.removeCustomers"
		},
		"550": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.removeCustomers"
		},
		"551": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "id"
		},
		"552": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "payload"
		},
		"553": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "customHeaders"
		},
		"554": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.listCustomers"
		},
		"555": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.listCustomers"
		},
		"556": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "id"
		},
		"557": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "query"
		},
		"558": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "customHeaders"
		},
		"559": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "AdminCustomersResource"
		},
		"560": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"561": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminCustomersResource"
		},
		"562": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"563": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "AdminCustomersResource.create"
		},
		"564": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "AdminCustomersResource.create"
		},
		"565": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "payload"
		},
		"566": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "customHeaders"
		},
		"567": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "AdminCustomersResource.update"
		},
		"568": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "AdminCustomersResource.update"
		},
		"569": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "id"
		},
		"570": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "payload"
		},
		"571": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "customHeaders"
		},
		"572": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "AdminCustomersResource.retrieve"
		},
		"573": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "AdminCustomersResource.retrieve"
		},
		"574": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "id"
		},
		"575": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "customHeaders"
		},
		"576": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "AdminCustomersResource.list"
		},
		"577": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "AdminCustomersResource.list"
		},
		"578": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "query"
		},
		"579": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "customHeaders"
		},
		"580": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource"
		},
		"581": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"582": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminDiscountsResource"
		},
		"583": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"584": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.addRegion"
		},
		"585": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.addRegion"
		},
		"586": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "id"
		},
		"587": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "regionId"
		},
		"588": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"589": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.create"
		},
		"590": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.create"
		},
		"591": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "payload"
		},
		"592": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"593": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.update"
		},
		"594": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.update"
		},
		"595": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "id"
		},
		"596": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "payload"
		},
		"597": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"598": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.createDynamicCode"
		},
		"599": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.createDynamicCode"
		},
		"600": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "id"
		},
		"601": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "payload"
		},
		"602": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"603": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.delete"
		},
		"604": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.delete"
		},
		"605": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "id"
		},
		"606": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"607": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.deleteDynamicCode"
		},
		"608": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.deleteDynamicCode"
		},
		"609": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "id"
		},
		"610": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "code"
		},
		"611": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"612": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.retrieve"
		},
		"613": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.retrieve"
		},
		"614": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "id"
		},
		"615": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"616": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.retrieveByCode"
		},
		"617": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.retrieveByCode"
		},
		"618": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "code"
		},
		"619": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"620": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.list"
		},
		"621": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.list"
		},
		"622": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "query"
		},
		"623": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"624": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.removeRegion"
		},
		"625": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.removeRegion"
		},
		"626": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "id"
		},
		"627": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "regionId"
		},
		"628": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"629": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.createCondition"
		},
		"630": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.createCondition"
		},
		"631": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "discountId"
		},
		"632": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "payload"
		},
		"633": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "query"
		},
		"634": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"635": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.updateCondition"
		},
		"636": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.updateCondition"
		},
		"637": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "discountId"
		},
		"638": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "conditionId"
		},
		"639": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "payload"
		},
		"640": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "query"
		},
		"641": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"642": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.deleteCondition"
		},
		"643": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.deleteCondition"
		},
		"644": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "discountId"
		},
		"645": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "conditionId"
		},
		"646": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"647": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.getCondition"
		},
		"648": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.getCondition"
		},
		"649": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "discountId"
		},
		"650": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "conditionId"
		},
		"651": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "query"
		},
		"652": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"653": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.addConditionResourceBatch"
		},
		"654": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.addConditionResourceBatch"
		},
		"655": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "discountId"
		},
		"656": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "conditionId"
		},
		"657": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "payload"
		},
		"658": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "query"
		},
		"659": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"660": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.deleteConditionResourceBatch"
		},
		"661": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.deleteConditionResourceBatch"
		},
		"662": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "discountId"
		},
		"663": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "conditionId"
		},
		"664": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "payload"
		},
		"665": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"666": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource"
		},
		"667": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"668": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminDraftOrdersResource"
		},
		"669": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"670": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.create"
		},
		"671": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.create"
		},
		"672": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "payload"
		},
		"673": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "customHeaders"
		},
		"674": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.addLineItem"
		},
		"675": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.addLineItem"
		},
		"676": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "id"
		},
		"677": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "payload"
		},
		"678": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "customHeaders"
		},
		"679": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.delete"
		},
		"680": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.delete"
		},
		"681": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "id"
		},
		"682": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "customHeaders"
		},
		"683": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.removeLineItem"
		},
		"684": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.removeLineItem"
		},
		"685": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "id"
		},
		"686": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "itemId"
		},
		"687": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "customHeaders"
		},
		"688": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.retrieve"
		},
		"689": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.retrieve"
		},
		"690": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "id"
		},
		"691": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "customHeaders"
		},
		"692": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.list"
		},
		"693": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.list"
		},
		"694": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "query"
		},
		"695": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "customHeaders"
		},
		"696": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.markPaid"
		},
		"697": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.markPaid"
		},
		"698": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "id"
		},
		"699": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "customHeaders"
		},
		"700": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.update"
		},
		"701": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.update"
		},
		"702": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "id"
		},
		"703": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "payload"
		},
		"704": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "customHeaders"
		},
		"705": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.updateLineItem"
		},
		"706": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.updateLineItem"
		},
		"707": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "id"
		},
		"708": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "itemId"
		},
		"709": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "payload"
		},
		"710": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "customHeaders"
		},
		"711": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "AdminGiftCardsResource"
		},
		"712": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"713": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminGiftCardsResource"
		},
		"714": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"715": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "AdminGiftCardsResource.create"
		},
		"716": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "AdminGiftCardsResource.create"
		},
		"717": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "payload"
		},
		"718": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "customHeaders"
		},
		"719": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "AdminGiftCardsResource.update"
		},
		"720": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "AdminGiftCardsResource.update"
		},
		"721": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "id"
		},
		"722": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "payload"
		},
		"723": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "customHeaders"
		},
		"724": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "AdminGiftCardsResource.delete"
		},
		"725": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "AdminGiftCardsResource.delete"
		},
		"726": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "id"
		},
		"727": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "customHeaders"
		},
		"728": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "AdminGiftCardsResource.retrieve"
		},
		"729": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "AdminGiftCardsResource.retrieve"
		},
		"730": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "id"
		},
		"731": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "customHeaders"
		},
		"732": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "AdminGiftCardsResource.list"
		},
		"733": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "AdminGiftCardsResource.list"
		},
		"734": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "query"
		},
		"735": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "customHeaders"
		},
		"736": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource"
		},
		"737": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"738": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminInventoryItemsResource"
		},
		"739": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"740": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.retrieve"
		},
		"741": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.retrieve"
		},
		"742": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "inventoryItemId"
		},
		"743": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "query"
		},
		"744": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "customHeaders"
		},
		"745": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.update"
		},
		"746": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.update"
		},
		"747": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "inventoryItemId"
		},
		"748": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "payload"
		},
		"749": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "query"
		},
		"750": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "customHeaders"
		},
		"751": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.delete"
		},
		"752": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.delete"
		},
		"753": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "inventoryItemId"
		},
		"754": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "customHeaders"
		},
		"755": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.create"
		},
		"756": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.create"
		},
		"757": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "payload"
		},
		"758": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "query"
		},
		"759": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "customHeaders"
		},
		"760": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.list"
		},
		"761": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.list"
		},
		"762": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "query"
		},
		"763": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "customHeaders"
		},
		"764": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.updateLocationLevel"
		},
		"765": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.updateLocationLevel"
		},
		"766": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "inventoryItemId"
		},
		"767": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "locationId"
		},
		"768": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "payload"
		},
		"769": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "query"
		},
		"770": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "customHeaders"
		},
		"771": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.createLocationLevel"
		},
		"772": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.createLocationLevel"
		},
		"773": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "inventoryItemId"
		},
		"774": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "payload"
		},
		"775": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "query"
		},
		"776": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "customHeaders"
		},
		"777": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.deleteLocationLevel"
		},
		"778": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.deleteLocationLevel"
		},
		"779": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "inventoryItemId"
		},
		"780": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "locationId"
		},
		"781": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "customHeaders"
		},
		"782": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.listLocationLevels"
		},
		"783": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.listLocationLevels"
		},
		"784": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "inventoryItemId"
		},
		"785": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "query"
		},
		"786": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "customHeaders"
		},
		"787": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "AdminInvitesResource"
		},
		"788": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"789": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminInvitesResource"
		},
		"790": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"791": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "AdminInvitesResource.accept"
		},
		"792": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "AdminInvitesResource.accept"
		},
		"793": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "payload"
		},
		"794": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "customHeaders"
		},
		"795": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "AdminInvitesResource.create"
		},
		"796": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "AdminInvitesResource.create"
		},
		"797": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "payload"
		},
		"798": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "customHeaders"
		},
		"799": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "AdminInvitesResource.delete"
		},
		"800": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "AdminInvitesResource.delete"
		},
		"801": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "id"
		},
		"802": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "customHeaders"
		},
		"803": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "AdminInvitesResource.list"
		},
		"804": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "AdminInvitesResource.list"
		},
		"805": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "customHeaders"
		},
		"806": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "AdminInvitesResource.resend"
		},
		"807": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "AdminInvitesResource.resend"
		},
		"808": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "id"
		},
		"809": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "customHeaders"
		},
		"810": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "AdminNotesResource"
		},
		"811": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"812": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminNotesResource"
		},
		"813": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"814": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "AdminNotesResource.create"
		},
		"815": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "AdminNotesResource.create"
		},
		"816": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "payload"
		},
		"817": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "customHeaders"
		},
		"818": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "AdminNotesResource.update"
		},
		"819": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "AdminNotesResource.update"
		},
		"820": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "id"
		},
		"821": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "payload"
		},
		"822": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "customHeaders"
		},
		"823": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "AdminNotesResource.delete"
		},
		"824": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "AdminNotesResource.delete"
		},
		"825": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "id"
		},
		"826": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "customHeaders"
		},
		"827": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "AdminNotesResource.retrieve"
		},
		"828": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "AdminNotesResource.retrieve"
		},
		"829": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "id"
		},
		"830": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "customHeaders"
		},
		"831": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "AdminNotesResource.list"
		},
		"832": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "AdminNotesResource.list"
		},
		"833": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "query"
		},
		"834": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "customHeaders"
		},
		"835": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notifications.ts",
			"qualifiedName": "AdminNotificationsResource"
		},
		"836": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"837": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminNotificationsResource"
		},
		"838": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"839": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notifications.ts",
			"qualifiedName": "AdminNotificationsResource.list"
		},
		"840": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notifications.ts",
			"qualifiedName": "AdminNotificationsResource.list"
		},
		"841": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notifications.ts",
			"qualifiedName": "query"
		},
		"842": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notifications.ts",
			"qualifiedName": "customHeaders"
		},
		"843": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notifications.ts",
			"qualifiedName": "AdminNotificationsResource.resend"
		},
		"844": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notifications.ts",
			"qualifiedName": "AdminNotificationsResource.resend"
		},
		"845": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notifications.ts",
			"qualifiedName": "id"
		},
		"846": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notifications.ts",
			"qualifiedName": "payload"
		},
		"847": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notifications.ts",
			"qualifiedName": "customHeaders"
		},
		"848": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource"
		},
		"849": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"850": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminOrdersResource"
		},
		"851": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"852": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.update"
		},
		"853": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.update"
		},
		"854": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"855": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "payload"
		},
		"856": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"857": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.retrieve"
		},
		"858": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.retrieve"
		},
		"859": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"860": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "query"
		},
		"861": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"862": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.list"
		},
		"863": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.list"
		},
		"864": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "query"
		},
		"865": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"866": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.complete"
		},
		"867": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.complete"
		},
		"868": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"869": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"870": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.capturePayment"
		},
		"871": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.capturePayment"
		},
		"872": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"873": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"874": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.refundPayment"
		},
		"875": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.refundPayment"
		},
		"876": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"877": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "payload"
		},
		"878": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"879": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.createFulfillment"
		},
		"880": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.createFulfillment"
		},
		"881": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"882": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "payload"
		},
		"883": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"884": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.cancelFulfillment"
		},
		"885": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.cancelFulfillment"
		},
		"886": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"887": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "fulfillmentId"
		},
		"888": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"889": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.cancelSwapFulfillment"
		},
		"890": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.cancelSwapFulfillment"
		},
		"891": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"892": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "swapId"
		},
		"893": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "fulfillmentId"
		},
		"894": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"895": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.cancelClaimFulfillment"
		},
		"896": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.cancelClaimFulfillment"
		},
		"897": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"898": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "claimId"
		},
		"899": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "fulfillmentId"
		},
		"900": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"901": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.createShipment"
		},
		"902": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.createShipment"
		},
		"903": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"904": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "payload"
		},
		"905": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"906": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.requestReturn"
		},
		"907": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.requestReturn"
		},
		"908": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"909": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "payload"
		},
		"910": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"911": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.cancel"
		},
		"912": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.cancel"
		},
		"913": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"914": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"915": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.addShippingMethod"
		},
		"916": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.addShippingMethod"
		},
		"917": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"918": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "payload"
		},
		"919": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"920": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.archive"
		},
		"921": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.archive"
		},
		"922": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"923": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"924": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.createSwap"
		},
		"925": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.createSwap"
		},
		"926": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"927": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "payload"
		},
		"928": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"929": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.cancelSwap"
		},
		"930": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.cancelSwap"
		},
		"931": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"932": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "swapId"
		},
		"933": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"934": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.fulfillSwap"
		},
		"935": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.fulfillSwap"
		},
		"936": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"937": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "swapId"
		},
		"938": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "payload"
		},
		"939": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"940": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.createSwapShipment"
		},
		"941": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.createSwapShipment"
		},
		"942": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"943": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "swapId"
		},
		"944": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "payload"
		},
		"945": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"946": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.processSwapPayment"
		},
		"947": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.processSwapPayment"
		},
		"948": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"949": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "swapId"
		},
		"950": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"951": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.createClaim"
		},
		"952": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.createClaim"
		},
		"953": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"954": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "payload"
		},
		"955": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"956": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.cancelClaim"
		},
		"957": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.cancelClaim"
		},
		"958": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"959": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "claimId"
		},
		"960": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"961": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.updateClaim"
		},
		"962": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.updateClaim"
		},
		"963": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"964": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "claimId"
		},
		"965": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "payload"
		},
		"966": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"967": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.fulfillClaim"
		},
		"968": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.fulfillClaim"
		},
		"969": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"970": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "claimId"
		},
		"971": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "payload"
		},
		"972": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"973": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.createClaimShipment"
		},
		"974": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.createClaimShipment"
		},
		"975": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"976": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "claimId"
		},
		"977": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "payload"
		},
		"978": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"979": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource"
		},
		"980": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"981": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminOrderEditsResource"
		},
		"982": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"983": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.retrieve"
		},
		"984": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.retrieve"
		},
		"985": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "id"
		},
		"986": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "query"
		},
		"987": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"988": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.list"
		},
		"989": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.list"
		},
		"990": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "query"
		},
		"991": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"992": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.create"
		},
		"993": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.create"
		},
		"994": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "payload"
		},
		"995": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"996": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.update"
		},
		"997": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.update"
		},
		"998": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "id"
		},
		"999": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "payload"
		},
		"1000": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"1001": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.delete"
		},
		"1002": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.delete"
		},
		"1003": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "id"
		},
		"1004": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"1005": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.addLineItem"
		},
		"1006": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.addLineItem"
		},
		"1007": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "id"
		},
		"1008": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "payload"
		},
		"1009": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"1010": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.deleteItemChange"
		},
		"1011": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.deleteItemChange"
		},
		"1012": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "orderEditId"
		},
		"1013": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "itemChangeId"
		},
		"1014": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"1015": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.requestConfirmation"
		},
		"1016": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.requestConfirmation"
		},
		"1017": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "id"
		},
		"1018": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"1019": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.cancel"
		},
		"1020": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.cancel"
		},
		"1021": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "id"
		},
		"1022": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"1023": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.confirm"
		},
		"1024": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.confirm"
		},
		"1025": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "id"
		},
		"1026": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"1027": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.updateLineItem"
		},
		"1028": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.updateLineItem"
		},
		"1029": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "orderEditId"
		},
		"1030": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "itemId"
		},
		"1031": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "payload"
		},
		"1032": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"1033": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.removeLineItem"
		},
		"1034": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.removeLineItem"
		},
		"1035": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "orderEditId"
		},
		"1036": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "itemId"
		},
		"1037": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"1038": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource"
		},
		"1039": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"1040": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminPriceListResource"
		},
		"1041": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"1042": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.create"
		},
		"1043": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.create"
		},
		"1044": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "payload"
		},
		"1045": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "customHeaders"
		},
		"1046": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.update"
		},
		"1047": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.update"
		},
		"1048": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "id"
		},
		"1049": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "payload"
		},
		"1050": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "customHeaders"
		},
		"1051": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.delete"
		},
		"1052": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.delete"
		},
		"1053": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "id"
		},
		"1054": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "customHeaders"
		},
		"1055": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.retrieve"
		},
		"1056": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.retrieve"
		},
		"1057": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "id"
		},
		"1058": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "customHeaders"
		},
		"1059": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.list"
		},
		"1060": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.list"
		},
		"1061": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "query"
		},
		"1062": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "customHeaders"
		},
		"1063": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.listProducts"
		},
		"1064": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.listProducts"
		},
		"1065": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "id"
		},
		"1066": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "query"
		},
		"1067": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "customHeaders"
		},
		"1068": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.addPrices"
		},
		"1069": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.addPrices"
		},
		"1070": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "id"
		},
		"1071": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "payload"
		},
		"1072": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "customHeaders"
		},
		"1073": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.deletePrices"
		},
		"1074": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.deletePrices"
		},
		"1075": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "id"
		},
		"1076": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "payload"
		},
		"1077": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "customHeaders"
		},
		"1078": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.deleteProductPrices"
		},
		"1079": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.deleteProductPrices"
		},
		"1080": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "priceListId"
		},
		"1081": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "productId"
		},
		"1082": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "customHeaders"
		},
		"1083": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.deleteVariantPrices"
		},
		"1084": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.deleteVariantPrices"
		},
		"1085": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "priceListId"
		},
		"1086": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "variantId"
		},
		"1087": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "customHeaders"
		},
		"1088": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.deleteProductsPrices"
		},
		"1089": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.deleteProductsPrices"
		},
		"1090": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "priceListId"
		},
		"1091": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "payload"
		},
		"1092": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "customHeaders"
		},
		"1093": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-tags.ts",
			"qualifiedName": "AdminProductTagsResource"
		},
		"1094": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"1095": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminProductTagsResource"
		},
		"1096": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"1097": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-tags.ts",
			"qualifiedName": "AdminProductTagsResource.list"
		},
		"1098": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-tags.ts",
			"qualifiedName": "AdminProductTagsResource.list"
		},
		"1099": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-tags.ts",
			"qualifiedName": "query"
		},
		"1100": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-types.ts",
			"qualifiedName": "AdminProductTypesResource"
		},
		"1101": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"1102": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminProductTypesResource"
		},
		"1103": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"1104": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-types.ts",
			"qualifiedName": "AdminProductTypesResource.list"
		},
		"1105": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-types.ts",
			"qualifiedName": "AdminProductTypesResource.list"
		},
		"1106": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-types.ts",
			"qualifiedName": "query"
		},
		"1107": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-types.ts",
			"qualifiedName": "customHeaders"
		},
		"1108": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource"
		},
		"1109": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"1110": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminProductsResource"
		},
		"1111": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"1112": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.create"
		},
		"1113": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.create"
		},
		"1114": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "payload"
		},
		"1115": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "customHeaders"
		},
		"1116": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.retrieve"
		},
		"1117": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.retrieve"
		},
		"1118": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "id"
		},
		"1119": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "customHeaders"
		},
		"1120": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.update"
		},
		"1121": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.update"
		},
		"1122": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "id"
		},
		"1123": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "payload"
		},
		"1124": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "customHeaders"
		},
		"1125": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.delete"
		},
		"1126": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.delete"
		},
		"1127": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "id"
		},
		"1128": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "customHeaders"
		},
		"1129": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.list"
		},
		"1130": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.list"
		},
		"1131": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "query"
		},
		"1132": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "customHeaders"
		},
		"1136": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.listTags"
		},
		"1137": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.listTags"
		},
		"1138": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "customHeaders"
		},
		"1139": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.setMetadata"
		},
		"1140": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.setMetadata"
		},
		"1141": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "id"
		},
		"1142": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "payload"
		},
		"1143": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "customHeaders"
		},
		"1144": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.createVariant"
		},
		"1145": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.createVariant"
		},
		"1146": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "id"
		},
		"1147": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "payload"
		},
		"1148": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "customHeaders"
		},
		"1149": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.updateVariant"
		},
		"1150": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.updateVariant"
		},
		"1151": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "id"
		},
		"1152": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "variantId"
		},
		"1153": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "payload"
		},
		"1154": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "customHeaders"
		},
		"1155": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.deleteVariant"
		},
		"1156": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.deleteVariant"
		},
		"1157": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "id"
		},
		"1158": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "variantId"
		},
		"1159": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "customHeaders"
		},
		"1160": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.addOption"
		},
		"1161": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.addOption"
		},
		"1162": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "id"
		},
		"1163": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "payload"
		},
		"1164": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "customHeaders"
		},
		"1165": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.updateOption"
		},
		"1166": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.updateOption"
		},
		"1167": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "id"
		},
		"1168": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "optionId"
		},
		"1169": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "payload"
		},
		"1170": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "customHeaders"
		},
		"1171": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.deleteOption"
		},
		"1172": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.deleteOption"
		},
		"1173": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "id"
		},
		"1174": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "optionId"
		},
		"1175": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "customHeaders"
		},
		"1176": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource"
		},
		"1177": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"1178": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminPublishableApiKeyResource"
		},
		"1179": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"1180": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.retrieve"
		},
		"1181": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.retrieve"
		},
		"1182": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "id"
		},
		"1183": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "customHeaders"
		},
		"1184": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.list"
		},
		"1185": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.list"
		},
		"1186": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "query"
		},
		"1187": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "customHeaders"
		},
		"1188": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.create"
		},
		"1189": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.create"
		},
		"1190": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "payload"
		},
		"1191": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "customHeaders"
		},
		"1192": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.update"
		},
		"1193": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.update"
		},
		"1194": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "id"
		},
		"1195": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "payload"
		},
		"1196": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "customHeaders"
		},
		"1197": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.delete"
		},
		"1198": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.delete"
		},
		"1199": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "id"
		},
		"1200": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "customHeaders"
		},
		"1201": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.revoke"
		},
		"1202": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.revoke"
		},
		"1203": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "id"
		},
		"1204": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "customHeaders"
		},
		"1205": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.addSalesChannelsBatch"
		},
		"1206": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.addSalesChannelsBatch"
		},
		"1207": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "id"
		},
		"1208": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "payload"
		},
		"1209": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "customHeaders"
		},
		"1210": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.deleteSalesChannelsBatch"
		},
		"1211": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.deleteSalesChannelsBatch"
		},
		"1212": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "id"
		},
		"1213": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "payload"
		},
		"1214": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "customHeaders"
		},
		"1215": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.listSalesChannels"
		},
		"1216": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.listSalesChannels"
		},
		"1217": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "id"
		},
		"1218": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "query"
		},
		"1219": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "customHeaders"
		},
		"1220": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource"
		},
		"1221": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"1222": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminRegionsResource"
		},
		"1223": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"1224": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.create"
		},
		"1225": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.create"
		},
		"1226": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "payload"
		},
		"1227": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "customHeaders"
		},
		"1228": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.update"
		},
		"1229": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.update"
		},
		"1230": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "id"
		},
		"1231": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "payload"
		},
		"1232": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "customHeaders"
		},
		"1233": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.delete"
		},
		"1234": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.delete"
		},
		"1235": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "id"
		},
		"1236": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "customHeaders"
		},
		"1237": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.retrieve"
		},
		"1238": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.retrieve"
		},
		"1239": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "id"
		},
		"1240": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "customHeaders"
		},
		"1241": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.list"
		},
		"1242": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.list"
		},
		"1243": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "query"
		},
		"1244": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "customHeaders"
		},
		"1245": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.addCountry"
		},
		"1246": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.addCountry"
		},
		"1247": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "id"
		},
		"1248": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "payload"
		},
		"1249": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "customHeaders"
		},
		"1250": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.deleteCountry"
		},
		"1251": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.deleteCountry"
		},
		"1252": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "id"
		},
		"1253": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "country_code"
		},
		"1254": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "customHeaders"
		},
		"1255": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.addFulfillmentProvider"
		},
		"1256": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.addFulfillmentProvider"
		},
		"1257": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "id"
		},
		"1258": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "payload"
		},
		"1259": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "customHeaders"
		},
		"1260": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.deleteFulfillmentProvider"
		},
		"1261": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.deleteFulfillmentProvider"
		},
		"1262": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "id"
		},
		"1263": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "provider_id"
		},
		"1264": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "customHeaders"
		},
		"1265": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.retrieveFulfillmentOptions"
		},
		"1266": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.retrieveFulfillmentOptions"
		},
		"1267": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "id"
		},
		"1268": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "customHeaders"
		},
		"1269": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.addPaymentProvider"
		},
		"1270": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.addPaymentProvider"
		},
		"1271": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "id"
		},
		"1272": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "payload"
		},
		"1273": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "customHeaders"
		},
		"1274": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.deletePaymentProvider"
		},
		"1275": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.deletePaymentProvider"
		},
		"1276": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "id"
		},
		"1277": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "provider_id"
		},
		"1278": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "customHeaders"
		},
		"1279": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "AdminReservationsResource"
		},
		"1280": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"1281": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminReservationsResource"
		},
		"1282": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"1283": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "AdminReservationsResource.retrieve"
		},
		"1284": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "AdminReservationsResource.retrieve"
		},
		"1285": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "id"
		},
		"1286": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "customHeaders"
		},
		"1287": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "AdminReservationsResource.list"
		},
		"1288": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "AdminReservationsResource.list"
		},
		"1289": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "query"
		},
		"1290": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "customHeaders"
		},
		"1291": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "AdminReservationsResource.create"
		},
		"1292": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "AdminReservationsResource.create"
		},
		"1293": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "payload"
		},
		"1294": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "customHeaders"
		},
		"1295": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "AdminReservationsResource.update"
		},
		"1296": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "AdminReservationsResource.update"
		},
		"1297": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "id"
		},
		"1298": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "payload"
		},
		"1299": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "customHeaders"
		},
		"1300": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "AdminReservationsResource.delete"
		},
		"1301": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "AdminReservationsResource.delete"
		},
		"1302": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "id"
		},
		"1303": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "customHeaders"
		},
		"1304": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "AdminReturnReasonsResource"
		},
		"1305": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"1306": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminReturnReasonsResource"
		},
		"1307": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"1308": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "AdminReturnReasonsResource.create"
		},
		"1309": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "AdminReturnReasonsResource.create"
		},
		"1310": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "payload"
		},
		"1311": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "customHeaders"
		},
		"1312": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "AdminReturnReasonsResource.update"
		},
		"1313": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "AdminReturnReasonsResource.update"
		},
		"1314": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "id"
		},
		"1315": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "payload"
		},
		"1316": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "customHeaders"
		},
		"1317": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "AdminReturnReasonsResource.delete"
		},
		"1318": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "AdminReturnReasonsResource.delete"
		},
		"1319": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "id"
		},
		"1320": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "customHeaders"
		},
		"1321": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "AdminReturnReasonsResource.retrieve"
		},
		"1322": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "AdminReturnReasonsResource.retrieve"
		},
		"1323": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "id"
		},
		"1324": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "customHeaders"
		},
		"1325": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "AdminReturnReasonsResource.list"
		},
		"1326": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "AdminReturnReasonsResource.list"
		},
		"1327": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "customHeaders"
		},
		"1328": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/returns.ts",
			"qualifiedName": "AdminReturnsResource"
		},
		"1329": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"1330": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminReturnsResource"
		},
		"1331": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"1332": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/returns.ts",
			"qualifiedName": "AdminReturnsResource.cancel"
		},
		"1333": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/returns.ts",
			"qualifiedName": "AdminReturnsResource.cancel"
		},
		"1334": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/returns.ts",
			"qualifiedName": "id"
		},
		"1335": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/returns.ts",
			"qualifiedName": "customHeaders"
		},
		"1336": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/returns.ts",
			"qualifiedName": "AdminReturnsResource.receive"
		},
		"1337": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/returns.ts",
			"qualifiedName": "AdminReturnsResource.receive"
		},
		"1338": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/returns.ts",
			"qualifiedName": "id"
		},
		"1339": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/returns.ts",
			"qualifiedName": "payload"
		},
		"1340": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/returns.ts",
			"qualifiedName": "customHeaders"
		},
		"1341": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/returns.ts",
			"qualifiedName": "AdminReturnsResource.list"
		},
		"1342": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/returns.ts",
			"qualifiedName": "AdminReturnsResource.list"
		},
		"1343": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/returns.ts",
			"qualifiedName": "query"
		},
		"1344": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/returns.ts",
			"qualifiedName": "customHeaders"
		},
		"1345": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource"
		},
		"1346": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"1347": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminSalesChannelsResource"
		},
		"1348": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"1349": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.retrieve"
		},
		"1350": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.retrieve"
		},
		"1351": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "salesChannelId"
		},
		"1352": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "customHeaders"
		},
		"1353": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.create"
		},
		"1354": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.create"
		},
		"1355": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "payload"
		},
		"1356": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "customHeaders"
		},
		"1357": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.update"
		},
		"1358": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.update"
		},
		"1359": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "salesChannelId"
		},
		"1360": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "payload"
		},
		"1361": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "customHeaders"
		},
		"1362": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.list"
		},
		"1363": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.list"
		},
		"1364": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "query"
		},
		"1365": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "customHeaders"
		},
		"1366": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.delete"
		},
		"1367": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.delete"
		},
		"1368": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "salesChannelId"
		},
		"1369": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "customHeaders"
		},
		"1370": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.removeProducts"
		},
		"1371": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.removeProducts"
		},
		"1372": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "salesChannelId"
		},
		"1373": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "payload"
		},
		"1374": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "customHeaders"
		},
		"1375": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.addProducts"
		},
		"1376": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.addProducts"
		},
		"1377": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "salesChannelId"
		},
		"1378": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "payload"
		},
		"1379": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "customHeaders"
		},
		"1380": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.addLocation"
		},
		"1381": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.addLocation"
		},
		"1382": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "salesChannelId"
		},
		"1383": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "payload"
		},
		"1384": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "customHeaders"
		},
		"1385": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.removeLocation"
		},
		"1386": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.removeLocation"
		},
		"1387": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "salesChannelId"
		},
		"1388": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "payload"
		},
		"1389": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "customHeaders"
		},
		"1390": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "AdminShippingOptionsResource"
		},
		"1391": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"1392": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminShippingOptionsResource"
		},
		"1393": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"1394": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "AdminShippingOptionsResource.create"
		},
		"1395": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "AdminShippingOptionsResource.create"
		},
		"1396": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "payload"
		},
		"1397": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "customHeaders"
		},
		"1398": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "AdminShippingOptionsResource.update"
		},
		"1399": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "AdminShippingOptionsResource.update"
		},
		"1400": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "id"
		},
		"1401": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "payload"
		},
		"1402": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "customHeaders"
		},
		"1403": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "AdminShippingOptionsResource.delete"
		},
		"1404": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "AdminShippingOptionsResource.delete"
		},
		"1405": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "id"
		},
		"1406": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "customHeaders"
		},
		"1407": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "AdminShippingOptionsResource.retrieve"
		},
		"1408": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "AdminShippingOptionsResource.retrieve"
		},
		"1409": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "id"
		},
		"1410": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "customHeaders"
		},
		"1411": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "AdminShippingOptionsResource.list"
		},
		"1412": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "AdminShippingOptionsResource.list"
		},
		"1413": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "query"
		},
		"1414": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "customHeaders"
		},
		"1415": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "AdminShippingProfilesResource"
		},
		"1416": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"1417": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminShippingProfilesResource"
		},
		"1418": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"1419": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "AdminShippingProfilesResource.create"
		},
		"1420": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "AdminShippingProfilesResource.create"
		},
		"1421": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "payload"
		},
		"1422": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "customHeaders"
		},
		"1423": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "AdminShippingProfilesResource.update"
		},
		"1424": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "AdminShippingProfilesResource.update"
		},
		"1425": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "id"
		},
		"1426": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "payload"
		},
		"1427": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "customHeaders"
		},
		"1428": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "AdminShippingProfilesResource.delete"
		},
		"1429": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "AdminShippingProfilesResource.delete"
		},
		"1430": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "id"
		},
		"1431": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "customHeaders"
		},
		"1432": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "AdminShippingProfilesResource.retrieve"
		},
		"1433": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "AdminShippingProfilesResource.retrieve"
		},
		"1434": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "id"
		},
		"1435": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "customHeaders"
		},
		"1436": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "AdminShippingProfilesResource.list"
		},
		"1437": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "AdminShippingProfilesResource.list"
		},
		"1438": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "customHeaders"
		},
		"1439": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "AdminStockLocationsResource"
		},
		"1440": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"1441": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminStockLocationsResource"
		},
		"1442": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"1443": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "AdminStockLocationsResource.create"
		},
		"1444": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "AdminStockLocationsResource.create"
		},
		"1445": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "payload"
		},
		"1446": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "customHeaders"
		},
		"1447": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "AdminStockLocationsResource.retrieve"
		},
		"1448": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "AdminStockLocationsResource.retrieve"
		},
		"1449": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "itemId"
		},
		"1450": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "customHeaders"
		},
		"1451": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "AdminStockLocationsResource.update"
		},
		"1452": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "AdminStockLocationsResource.update"
		},
		"1453": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "stockLocationId"
		},
		"1454": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "payload"
		},
		"1455": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "customHeaders"
		},
		"1456": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "AdminStockLocationsResource.delete"
		},
		"1457": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "AdminStockLocationsResource.delete"
		},
		"1458": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "id"
		},
		"1459": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "customHeaders"
		},
		"1460": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "AdminStockLocationsResource.list"
		},
		"1461": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "AdminStockLocationsResource.list"
		},
		"1462": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "query"
		},
		"1463": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "customHeaders"
		},
		"1464": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "AdminStoresResource"
		},
		"1465": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"1466": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminStoresResource"
		},
		"1467": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"1468": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "AdminStoresResource.update"
		},
		"1469": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "AdminStoresResource.update"
		},
		"1470": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "payload"
		},
		"1471": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "customHeaders"
		},
		"1472": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "AdminStoresResource.addCurrency"
		},
		"1473": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "AdminStoresResource.addCurrency"
		},
		"1474": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "currency_code"
		},
		"1475": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "customHeaders"
		},
		"1476": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "AdminStoresResource.deleteCurrency"
		},
		"1477": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "AdminStoresResource.deleteCurrency"
		},
		"1478": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "currency_code"
		},
		"1479": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "customHeaders"
		},
		"1480": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "AdminStoresResource.retrieve"
		},
		"1481": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "AdminStoresResource.retrieve"
		},
		"1482": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "customHeaders"
		},
		"1483": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "AdminStoresResource.listPaymentProviders"
		},
		"1484": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "AdminStoresResource.listPaymentProviders"
		},
		"1485": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "customHeaders"
		},
		"1486": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "AdminStoresResource.listTaxProviders"
		},
		"1487": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "AdminStoresResource.listTaxProviders"
		},
		"1488": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "customHeaders"
		},
		"1489": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/swaps.ts",
			"qualifiedName": "AdminSwapsResource"
		},
		"1490": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"1491": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminSwapsResource"
		},
		"1492": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"1493": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/swaps.ts",
			"qualifiedName": "AdminSwapsResource.retrieve"
		},
		"1494": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/swaps.ts",
			"qualifiedName": "AdminSwapsResource.retrieve"
		},
		"1495": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/swaps.ts",
			"qualifiedName": "id"
		},
		"1496": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/swaps.ts",
			"qualifiedName": "customHeaders"
		},
		"1497": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/swaps.ts",
			"qualifiedName": "AdminSwapsResource.list"
		},
		"1498": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/swaps.ts",
			"qualifiedName": "AdminSwapsResource.list"
		},
		"1499": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/swaps.ts",
			"qualifiedName": "query"
		},
		"1500": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/swaps.ts",
			"qualifiedName": "customHeaders"
		},
		"1501": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource"
		},
		"1502": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"1503": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminTaxRatesResource"
		},
		"1504": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"1505": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.retrieve"
		},
		"1506": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.retrieve"
		},
		"1507": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "id"
		},
		"1508": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "query"
		},
		"1509": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "customHeaders"
		},
		"1510": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.list"
		},
		"1511": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.list"
		},
		"1512": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "query"
		},
		"1513": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "customHeaders"
		},
		"1514": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.create"
		},
		"1515": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.create"
		},
		"1516": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "payload"
		},
		"1517": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "query"
		},
		"1518": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "customHeaders"
		},
		"1519": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.update"
		},
		"1520": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.update"
		},
		"1521": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "id"
		},
		"1522": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "payload"
		},
		"1523": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "query"
		},
		"1524": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "customHeaders"
		},
		"1525": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.addProducts"
		},
		"1526": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.addProducts"
		},
		"1527": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "id"
		},
		"1528": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "payload"
		},
		"1529": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "query"
		},
		"1530": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "customHeaders"
		},
		"1531": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.addProductTypes"
		},
		"1532": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.addProductTypes"
		},
		"1533": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "id"
		},
		"1534": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "payload"
		},
		"1535": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "query"
		},
		"1536": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "customHeaders"
		},
		"1537": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.addShippingOptions"
		},
		"1538": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.addShippingOptions"
		},
		"1539": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "id"
		},
		"1540": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "payload"
		},
		"1541": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "query"
		},
		"1542": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "customHeaders"
		},
		"1543": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.removeProducts"
		},
		"1544": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.removeProducts"
		},
		"1545": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "id"
		},
		"1546": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "payload"
		},
		"1547": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "query"
		},
		"1548": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "customHeaders"
		},
		"1549": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.removeProductTypes"
		},
		"1550": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.removeProductTypes"
		},
		"1551": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "id"
		},
		"1552": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "payload"
		},
		"1553": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "query"
		},
		"1554": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "customHeaders"
		},
		"1555": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.removeShippingOptions"
		},
		"1556": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.removeShippingOptions"
		},
		"1557": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "id"
		},
		"1558": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "payload"
		},
		"1559": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "query"
		},
		"1560": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "customHeaders"
		},
		"1561": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.delete"
		},
		"1562": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.delete"
		},
		"1563": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "id"
		},
		"1564": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "customHeaders"
		},
		"1565": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "AdminUploadsResource"
		},
		"1566": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"1567": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminUploadsResource"
		},
		"1568": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"1572": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "AdminUploadsResource.create"
		},
		"1573": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "AdminUploadsResource.create"
		},
		"1574": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "file"
		},
		"1575": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "AdminUploadsResource.createProtected"
		},
		"1576": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "AdminUploadsResource.createProtected"
		},
		"1577": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "file"
		},
		"1578": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "AdminUploadsResource.delete"
		},
		"1579": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "AdminUploadsResource.delete"
		},
		"1580": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "payload"
		},
		"1581": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "customHeaders"
		},
		"1582": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "AdminUploadsResource.getPresignedDownloadUrl"
		},
		"1583": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "AdminUploadsResource.getPresignedDownloadUrl"
		},
		"1584": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "payload"
		},
		"1585": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "customHeaders"
		},
		"1586": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "AdminUploadsResource._createPayload"
		},
		"1587": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "AdminUploadsResource._createPayload"
		},
		"1588": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "file"
		},
		"1589": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource"
		},
		"1590": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"1591": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminUsersResource"
		},
		"1592": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"1593": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource.sendResetPasswordToken"
		},
		"1594": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource.sendResetPasswordToken"
		},
		"1595": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "payload"
		},
		"1596": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "customHeaders"
		},
		"1597": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource.resetPassword"
		},
		"1598": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource.resetPassword"
		},
		"1599": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "payload"
		},
		"1600": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "customHeaders"
		},
		"1601": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource.retrieve"
		},
		"1602": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource.retrieve"
		},
		"1603": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "id"
		},
		"1604": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "customHeaders"
		},
		"1605": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource.create"
		},
		"1606": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource.create"
		},
		"1607": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "payload"
		},
		"1608": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "customHeaders"
		},
		"1609": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource.update"
		},
		"1610": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource.update"
		},
		"1611": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "id"
		},
		"1612": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "payload"
		},
		"1613": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "customHeaders"
		},
		"1614": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource.delete"
		},
		"1615": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource.delete"
		},
		"1616": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "id"
		},
		"1617": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "customHeaders"
		},
		"1618": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource.list"
		},
		"1619": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource.list"
		},
		"1620": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "query"
		},
		"1621": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "customHeaders"
		},
		"1622": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/variants.ts",
			"qualifiedName": "AdminVariantsResource"
		},
		"1623": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"1624": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminVariantsResource"
		},
		"1625": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"1626": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/variants.ts",
			"qualifiedName": "AdminVariantsResource.list"
		},
		"1627": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/variants.ts",
			"qualifiedName": "AdminVariantsResource.list"
		},
		"1628": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/variants.ts",
			"qualifiedName": "query"
		},
		"1629": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/variants.ts",
			"qualifiedName": "customHeaders"
		},
		"1630": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/variants.ts",
			"qualifiedName": "AdminVariantsResource.retrieve"
		},
		"1631": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/variants.ts",
			"qualifiedName": "AdminVariantsResource.retrieve"
		},
		"1632": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/variants.ts",
			"qualifiedName": "id"
		},
		"1633": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/variants.ts",
			"qualifiedName": "query"
		},
		"1634": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/variants.ts",
			"qualifiedName": "customHeaders"
		},
		"1635": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/variants.ts",
			"qualifiedName": "AdminVariantsResource.getInventory"
		},
		"1636": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/variants.ts",
			"qualifiedName": "AdminVariantsResource.getInventory"
		},
		"1637": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/variants.ts",
			"qualifiedName": "variantId"
		},
		"1638": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/variants.ts",
			"qualifiedName": "customHeaders"
		},
		"1639": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "AdminPaymentCollectionsResource"
		},
		"1640": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"1641": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminPaymentCollectionsResource"
		},
		"1642": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"1643": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "AdminPaymentCollectionsResource.retrieve"
		},
		"1644": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "AdminPaymentCollectionsResource.retrieve"
		},
		"1645": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "id"
		},
		"1646": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "query"
		},
		"1647": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "customHeaders"
		},
		"1648": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "AdminPaymentCollectionsResource.update"
		},
		"1649": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "AdminPaymentCollectionsResource.update"
		},
		"1650": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "id"
		},
		"1651": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "payload"
		},
		"1652": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "customHeaders"
		},
		"1653": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "AdminPaymentCollectionsResource.delete"
		},
		"1654": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "AdminPaymentCollectionsResource.delete"
		},
		"1655": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "id"
		},
		"1656": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "customHeaders"
		},
		"1657": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "AdminPaymentCollectionsResource.markAsAuthorized"
		},
		"1658": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "AdminPaymentCollectionsResource.markAsAuthorized"
		},
		"1659": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "id"
		},
		"1660": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "customHeaders"
		},
		"1661": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "AdminPaymentsResource"
		},
		"1662": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"1663": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminPaymentsResource"
		},
		"1664": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"1665": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "AdminPaymentsResource.retrieve"
		},
		"1666": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "AdminPaymentsResource.retrieve"
		},
		"1667": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "id"
		},
		"1668": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "query"
		},
		"1669": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "customHeaders"
		},
		"1670": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "AdminPaymentsResource.capturePayment"
		},
		"1671": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "AdminPaymentsResource.capturePayment"
		},
		"1672": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "id"
		},
		"1673": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "customHeaders"
		},
		"1674": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "AdminPaymentsResource.refundPayment"
		},
		"1675": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "AdminPaymentsResource.refundPayment"
		},
		"1676": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "id"
		},
		"1677": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "payload"
		},
		"1678": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "customHeaders"
		},
		"1679": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource"
		},
		"1680": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"1681": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminProductCategoriesResource"
		},
		"1682": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"1683": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource.retrieve"
		},
		"1684": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource.retrieve"
		},
		"1685": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "productCategoryId"
		},
		"1686": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "query"
		},
		"1687": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "customHeaders"
		},
		"1688": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource.create"
		},
		"1689": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource.create"
		},
		"1690": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "payload"
		},
		"1691": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "customHeaders"
		},
		"1692": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource.update"
		},
		"1693": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource.update"
		},
		"1694": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "productCategoryId"
		},
		"1695": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "payload"
		},
		"1696": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "customHeaders"
		},
		"1697": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource.list"
		},
		"1698": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource.list"
		},
		"1699": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "query"
		},
		"1700": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "customHeaders"
		},
		"1701": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource.delete"
		},
		"1702": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource.delete"
		},
		"1703": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "productCategoryId"
		},
		"1704": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "customHeaders"
		},
		"1705": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource.removeProducts"
		},
		"1706": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource.removeProducts"
		},
		"1707": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "productCategoryId"
		},
		"1708": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "payload"
		},
		"1709": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "customHeaders"
		},
		"1710": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource.addProducts"
		},
		"1711": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource.addProducts"
		},
		"1712": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "productCategoryId"
		},
		"1713": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "payload"
		},
		"1714": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "customHeaders"
		}
	}
}